
multisteering-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a98  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003ba4  08003ba4  00004ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c4c  08003c4c  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003c4c  08003c4c  00004c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c54  08003c54  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c54  08003c54  00004c54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c58  08003c58  00004c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003c5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  20000060  08003cbc  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08003cbc  00005304  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e6e  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001981  00000000  00000000  0000def7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000f878  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005eb  00000000  00000000  00010040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001764e  00000000  00000000  0001062b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b78  00000000  00000000  00027c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c8e  00000000  00000000  000317f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b647f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c4  00000000  00000000  000b64c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b8888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b8c 	.word	0x08003b8c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003b8c 	.word	0x08003b8c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <nextion_send>:
#include "stm32f1xx_hal.h"
extern UART_HandleTypeDef huart1;

char ENDMSG[3] = {255, 255, 255};

void nextion_send(char* cmd){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	   HAL_UART_Transmit (&huart1, (uint8_t*) cmd, strlen (cmd), 50);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	2332      	movs	r3, #50	@ 0x32
 8000170:	6879      	ldr	r1, [r7, #4]
 8000172:	4806      	ldr	r0, [pc, #24]	@ (800018c <nextion_send+0x30>)
 8000174:	f002 fe86 	bl	8002e84 <HAL_UART_Transmit>
	   HAL_UART_Transmit (&huart1, (uint8_t*) &ENDMSG, 3, 50);
 8000178:	2332      	movs	r3, #50	@ 0x32
 800017a:	2203      	movs	r2, #3
 800017c:	4904      	ldr	r1, [pc, #16]	@ (8000190 <nextion_send+0x34>)
 800017e:	4803      	ldr	r0, [pc, #12]	@ (800018c <nextion_send+0x30>)
 8000180:	f002 fe80 	bl	8002e84 <HAL_UART_Transmit>
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	200000a4 	.word	0x200000a4
 8000190:	20000000 	.word	0x20000000

08000194 <HAL_CAN_RxFifo0MsgPendingCallback>:
void data_send_handler(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000194:	b580      	push	{r7, lr}
 8000196:	b084      	sub	sp, #16
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData.buff)
 800019c:	4b39      	ldr	r3, [pc, #228]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800019e:	4a3a      	ldr	r2, [pc, #232]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80001a0:	2100      	movs	r1, #0
 80001a2:	6878      	ldr	r0, [r7, #4]
 80001a4:	f001 fbb9 	bl	800191a <HAL_CAN_GetRxMessage>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d166      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
			== HAL_OK) {
		if (RxHeader.StdId == 0x600) {
 80001ae:	4b36      	ldr	r3, [pc, #216]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80001b6:	d110      	bne.n	80001da <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
			for (uint8_t i = 0; i < 7; i++) {
 80001b8:	2300      	movs	r3, #0
 80001ba:	73fb      	strb	r3, [r7, #15]
 80001bc:	e00a      	b.n	80001d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
				RxData.x600[i] = RxData.buff[i];
 80001be:	7bfa      	ldrb	r2, [r7, #15]
 80001c0:	7bfb      	ldrb	r3, [r7, #15]
 80001c2:	4930      	ldr	r1, [pc, #192]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001c4:	5c89      	ldrb	r1, [r1, r2]
 80001c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001c8:	4413      	add	r3, r2
 80001ca:	460a      	mov	r2, r1
 80001cc:	721a      	strb	r2, [r3, #8]
			for (uint8_t i = 0; i < 7; i++) {
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	3301      	adds	r3, #1
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	2b06      	cmp	r3, #6
 80001d8:	d9f1      	bls.n	80001be <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
			}
		}
		if (RxHeader.StdId == 0x601) {
 80001da:	4b2b      	ldr	r3, [pc, #172]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f240 6201 	movw	r2, #1537	@ 0x601
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d110      	bne.n	8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			for (uint8_t i = 0; i < 7; i++) {
 80001e6:	2300      	movs	r3, #0
 80001e8:	73bb      	strb	r3, [r7, #14]
 80001ea:	e00a      	b.n	8000202 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
				RxData.x601[i] = RxData.buff[i];
 80001ec:	7bba      	ldrb	r2, [r7, #14]
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	4924      	ldr	r1, [pc, #144]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001f2:	5c89      	ldrb	r1, [r1, r2]
 80001f4:	4a23      	ldr	r2, [pc, #140]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001f6:	4413      	add	r3, r2
 80001f8:	460a      	mov	r2, r1
 80001fa:	741a      	strb	r2, [r3, #16]
			for (uint8_t i = 0; i < 7; i++) {
 80001fc:	7bbb      	ldrb	r3, [r7, #14]
 80001fe:	3301      	adds	r3, #1
 8000200:	73bb      	strb	r3, [r7, #14]
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	2b06      	cmp	r3, #6
 8000206:	d9f1      	bls.n	80001ec <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
			}
		}
		if (RxHeader.StdId == 0x602) {
 8000208:	4b1f      	ldr	r3, [pc, #124]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f240 6202 	movw	r2, #1538	@ 0x602
 8000210:	4293      	cmp	r3, r2
 8000212:	d110      	bne.n	8000236 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			for (uint8_t i = 0; i < 7; i++) {
 8000214:	2300      	movs	r3, #0
 8000216:	737b      	strb	r3, [r7, #13]
 8000218:	e00a      	b.n	8000230 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
				RxData.x602[i] = RxData.buff[i];
 800021a:	7b7a      	ldrb	r2, [r7, #13]
 800021c:	7b7b      	ldrb	r3, [r7, #13]
 800021e:	4919      	ldr	r1, [pc, #100]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000220:	5c89      	ldrb	r1, [r1, r2]
 8000222:	4a18      	ldr	r2, [pc, #96]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000224:	4413      	add	r3, r2
 8000226:	460a      	mov	r2, r1
 8000228:	761a      	strb	r2, [r3, #24]
			for (uint8_t i = 0; i < 7; i++) {
 800022a:	7b7b      	ldrb	r3, [r7, #13]
 800022c:	3301      	adds	r3, #1
 800022e:	737b      	strb	r3, [r7, #13]
 8000230:	7b7b      	ldrb	r3, [r7, #13]
 8000232:	2b06      	cmp	r3, #6
 8000234:	d9f1      	bls.n	800021a <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
			}
		}
		if (RxHeader.StdId == 0x604) {
 8000236:	4b14      	ldr	r3, [pc, #80]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f240 6204 	movw	r2, #1540	@ 0x604
 800023e:	4293      	cmp	r3, r2
 8000240:	d111      	bne.n	8000266 <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			for (uint8_t i = 0; i < 7; i++) {
 8000242:	2300      	movs	r3, #0
 8000244:	733b      	strb	r3, [r7, #12]
 8000246:	e00b      	b.n	8000260 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
				RxData.x604[i] = RxData.buff[i];
 8000248:	7b3a      	ldrb	r2, [r7, #12]
 800024a:	7b3b      	ldrb	r3, [r7, #12]
 800024c:	490d      	ldr	r1, [pc, #52]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800024e:	5c89      	ldrb	r1, [r1, r2]
 8000250:	4a0c      	ldr	r2, [pc, #48]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000252:	4413      	add	r3, r2
 8000254:	460a      	mov	r2, r1
 8000256:	f883 2020 	strb.w	r2, [r3, #32]
			for (uint8_t i = 0; i < 7; i++) {
 800025a:	7b3b      	ldrb	r3, [r7, #12]
 800025c:	3301      	adds	r3, #1
 800025e:	733b      	strb	r3, [r7, #12]
 8000260:	7b3b      	ldrb	r3, [r7, #12]
 8000262:	2b06      	cmp	r3, #6
 8000264:	d9f0      	bls.n	8000248 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
			}
		}
#if DEBUG == 1
		if (RxHeader.StdId == 0x642) {
 8000266:	4b08      	ldr	r3, [pc, #32]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f240 6242 	movw	r2, #1602	@ 0x642
 800026e:	4293      	cmp	r3, r2
 8000270:	d104      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000272:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000276:	4805      	ldr	r0, [pc, #20]	@ (800028c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000278:	f002 f98b 	bl	8002592 <HAL_GPIO_TogglePin>
		}
#endif
	}
}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000130 	.word	0x20000130
 8000288:	20000104 	.word	0x20000104
 800028c:	40011000 	.word	0x40011000

08000290 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8000298:	f000 fe0a 	bl	8000eb0 <Error_Handler>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002a8:	f000 ffa6 	bl	80011f8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002ac:	f000 f810 	bl	80002d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002b0:	f000 f8d4 	bl	800045c <MX_GPIO_Init>
	MX_CAN_Init();
 80002b4:	f000 f852 	bl	800035c <MX_CAN_Init>
	MX_USART1_UART_Init();
 80002b8:	f000 f8a6 	bl	8000408 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	startup();
 80002bc:	f000 fda2 	bl	8000e04 <startup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		data_update_handler();
 80002c0:	f000 fcd0 	bl	8000c64 <data_update_handler>
		data_send_handler();
 80002c4:	f000 fd4c 	bl	8000d60 <data_send_handler>
		button_handler();
 80002c8:	f000 f966 	bl	8000598 <button_handler>
		data_update_handler();
 80002cc:	bf00      	nop
 80002ce:	e7f7      	b.n	80002c0 <main+0x1c>

080002d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	@ 0x40
 80002d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	@ 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 ffc4 	bl	800326c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f2:	2301      	movs	r3, #1
 80002f4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002fa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800030e:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000312:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000314:	f107 0318 	add.w	r3, r7, #24
 8000318:	4618      	mov	r0, r3
 800031a:	f002 f953 	bl	80025c4 <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x58>
		Error_Handler();
 8000324:	f000 fdc4 	bl	8000eb0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	2302      	movs	r3, #2
 800032e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000338:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fbc0 	bl	8002ac8 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x82>
		Error_Handler();
 800034e:	f000 fdaf 	bl	8000eb0 <Error_Handler>
	}
}
 8000352:	bf00      	nop
 8000354:	3740      	adds	r7, #64	@ 0x40
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	@ 0x28
 8000360:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000362:	4b27      	ldr	r3, [pc, #156]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000364:	4a27      	ldr	r2, [pc, #156]	@ (8000404 <MX_CAN_Init+0xa8>)
 8000366:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 4; // TJA1050 (CHN version cannot perform at 1MBit, only at 500kBit)
 8000368:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <MX_CAN_Init+0xa4>)
 800036a:	2204      	movs	r2, #4
 800036c:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800036e:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000370:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000374:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000376:	4b22      	ldr	r3, [pc, #136]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800037c:	4b20      	ldr	r3, [pc, #128]	@ (8000400 <MX_CAN_Init+0xa4>)
 800037e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000382:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000384:	4b1e      	ldr	r3, [pc, #120]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000386:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800038a:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800038c:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <MX_CAN_Init+0xa4>)
 800038e:	2200      	movs	r2, #0
 8000390:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000392:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000394:	2200      	movs	r2, #0
 8000396:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000398:	4b19      	ldr	r3, [pc, #100]	@ (8000400 <MX_CAN_Init+0xa4>)
 800039a:	2200      	movs	r2, #0
 800039c:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800039e:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80003a4:	4b16      	ldr	r3, [pc, #88]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = ENABLE;
 80003aa:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80003b0:	4813      	ldr	r0, [pc, #76]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003b2:	f000 ffa7 	bl	8001304 <HAL_CAN_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_CAN_Init+0x64>
		Error_Handler();
 80003bc:	f000 fd78 	bl	8000eb0 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	sFilterConfig.FilterBank = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003c8:	2301      	movs	r3, #1
 80003ca:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80003cc:	2300      	movs	r3, #0
 80003ce:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80003d0:	2300      	movs	r3, #0
 80003d2:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80003e0:	2301      	movs	r3, #1
 80003e2:	623b      	str	r3, [r7, #32]
	//sFilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80003e4:	463b      	mov	r3, r7
 80003e6:	4619      	mov	r1, r3
 80003e8:	4805      	ldr	r0, [pc, #20]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003ea:	f001 f886 	bl	80014fa <HAL_CAN_ConfigFilter>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_CAN_Init+0x9c>
		Error_Handler();
 80003f4:	f000 fd5c 	bl	8000eb0 <Error_Handler>
	}
	/* USER CODE END CAN_Init 2 */

}
 80003f8:	bf00      	nop
 80003fa:	3728      	adds	r7, #40	@ 0x28
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000007c 	.word	0x2000007c
 8000404:	40006400 	.word	0x40006400

08000408 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800040e:	4a12      	ldr	r2, [pc, #72]	@ (8000458 <MX_USART1_UART_Init+0x50>)
 8000410:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000412:	4b10      	ldr	r3, [pc, #64]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000414:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000418:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800042c:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800042e:	220c      	movs	r2, #12
 8000430:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800043e:	4805      	ldr	r0, [pc, #20]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000440:	f002 fcd0 	bl	8002de4 <HAL_UART_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800044a:	f000 fd31 	bl	8000eb0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000a4 	.word	0x200000a4
 8000458:	40013800 	.word	0x40013800

0800045c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000470:	4b44      	ldr	r3, [pc, #272]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a43      	ldr	r2, [pc, #268]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b41      	ldr	r3, [pc, #260]	@ (8000584 <MX_GPIO_Init+0x128>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0310 	and.w	r3, r3, #16
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000488:	4b3e      	ldr	r3, [pc, #248]	@ (8000584 <MX_GPIO_Init+0x128>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a3d      	ldr	r2, [pc, #244]	@ (8000584 <MX_GPIO_Init+0x128>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b3b      	ldr	r3, [pc, #236]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0320 	and.w	r3, r3, #32
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	4b38      	ldr	r3, [pc, #224]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a37      	ldr	r2, [pc, #220]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004a6:	f043 0308 	orr.w	r3, r3, #8
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b35      	ldr	r3, [pc, #212]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0308 	and.w	r3, r3, #8
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b32      	ldr	r3, [pc, #200]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a31      	ldr	r2, [pc, #196]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d6:	482c      	ldr	r0, [pc, #176]	@ (8000588 <MX_GPIO_Init+0x12c>)
 80004d8:	f002 f843 	bl	8002562 <HAL_GPIO_WritePin>
#if DEBUG == 1
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin,
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80004e2:	482a      	ldr	r0, [pc, #168]	@ (800058c <MX_GPIO_Init+0x130>)
 80004e4:	f002 f83d 	bl	8002562 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
#endif
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004ee:	4828      	ldr	r0, [pc, #160]	@ (8000590 <MX_GPIO_Init+0x134>)
 80004f0:	f002 f837 	bl	8002562 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CAN_LED_Pin */
	GPIO_InitStruct.Pin = CAN_LED_Pin;
 80004f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2302      	movs	r3, #2
 8000504:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAN_LED_GPIO_Port, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	481e      	ldr	r0, [pc, #120]	@ (8000588 <MX_GPIO_Init+0x12c>)
 800050e:	f001 fe8d 	bl	800222c <HAL_GPIO_Init>
#if DEBUG == 1
	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin;
 8000512:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000516:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4818      	ldr	r0, [pc, #96]	@ (800058c <MX_GPIO_Init+0x130>)
 800052c:	f001 fe7e 	bl	800222c <HAL_GPIO_Init>
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
#endif
#endif
	/*Configure GPIO pin : BTN_6_Pin */
	GPIO_InitStruct.Pin = BTN_6_Pin;
 8000530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000534:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000536:	4b17      	ldr	r3, [pc, #92]	@ (8000594 <MX_GPIO_Init+0x138>)
 8000538:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_6_GPIO_Port, &GPIO_InitStruct);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	4812      	ldr	r0, [pc, #72]	@ (8000590 <MX_GPIO_Init+0x134>)
 8000546:	f001 fe71 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin | BTN_2_Pin | BTN_3_Pin | BTN_4_Pin;
 800054a:	2378      	movs	r3, #120	@ 0x78
 800054c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <MX_GPIO_Init+0x138>)
 8000550:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4619      	mov	r1, r3
 800055c:	480b      	ldr	r0, [pc, #44]	@ (800058c <MX_GPIO_Init+0x130>)
 800055e:	f001 fe65 	bl	800222c <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_5_Pin */
	GPIO_InitStruct.Pin = BTN_5_Pin;
 8000562:	2380      	movs	r3, #128	@ 0x80
 8000564:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <MX_GPIO_Init+0x138>)
 8000568:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_5_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	@ (800058c <MX_GPIO_Init+0x130>)
 8000576:	f001 fe59 	bl	800222c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40011000 	.word	0x40011000
 800058c:	40010c00 	.word	0x40010c00
 8000590:	40010800 	.word	0x40010800
 8000594:	10110000 	.word	0x10110000

08000598 <button_handler>:

/* USER CODE BEGIN 4 */
void button_handler() {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	static bool flag_btn3 = false;
	static bool flag_btn4 = false;
	static bool flag_btn5 = false;
	static bool flag_btn6 = false;  // Some flags for buttons
	static uint8_t page = 0;
	HAL_Delay(PILOT_FINGER_TAP_SPEED);
 800059c:	2096      	movs	r0, #150	@ 0x96
 800059e:	f000 fe8d 	bl	80012bc <HAL_Delay>
	/* NEUTRAL GEAR BUTTON COMBINATION HANDLER */
	if (HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 80005a2:	2120      	movs	r1, #32
 80005a4:	48ab      	ldr	r0, [pc, #684]	@ (8000854 <button_handler+0x2bc>)
 80005a6:	f001 ffc5 	bl	8002534 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d059      	beq.n	8000664 <button_handler+0xcc>
			&& HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 80005b0:	2140      	movs	r1, #64	@ 0x40
 80005b2:	48a8      	ldr	r0, [pc, #672]	@ (8000854 <button_handler+0x2bc>)
 80005b4:	f001 ffbe 	bl	8002534 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d052      	beq.n	8000664 <button_handler+0xcc>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn3 && !flag_btn4) {
 80005be:	f000 fe73 	bl	80012a8 <HAL_GetTick>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4ba4      	ldr	r3, [pc, #656]	@ (8000858 <button_handler+0x2c0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	2b96      	cmp	r3, #150	@ 0x96
 80005cc:	d94a      	bls.n	8000664 <button_handler+0xcc>
 80005ce:	4ba3      	ldr	r3, [pc, #652]	@ (800085c <button_handler+0x2c4>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d043      	beq.n	8000664 <button_handler+0xcc>
 80005dc:	4ba0      	ldr	r3, [pc, #640]	@ (8000860 <button_handler+0x2c8>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	f083 0301 	eor.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d03c      	beq.n	8000664 <button_handler+0xcc>
		flag_btn3 = !flag_btn3;
 80005ea:	4b9c      	ldr	r3, [pc, #624]	@ (800085c <button_handler+0x2c4>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	bf14      	ite	ne
 80005f2:	2301      	movne	r3, #1
 80005f4:	2300      	moveq	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f083 0301 	eor.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b95      	ldr	r3, [pc, #596]	@ (800085c <button_handler+0x2c4>)
 8000606:	701a      	strb	r2, [r3, #0]
		flag_btn4 = !flag_btn4;
 8000608:	4b95      	ldr	r3, [pc, #596]	@ (8000860 <button_handler+0x2c8>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	bf14      	ite	ne
 8000610:	2301      	movne	r3, #1
 8000612:	2300      	moveq	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f083 0301 	eor.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4b8f      	ldr	r3, [pc, #572]	@ (8000860 <button_handler+0x2c8>)
 8000624:	701a      	strb	r2, [r3, #0]
		msg_type = gear_neutral;
 8000626:	4b8f      	ldr	r3, [pc, #572]	@ (8000864 <button_handler+0x2cc>)
 8000628:	2204      	movs	r2, #4
 800062a:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 800062c:	4b8d      	ldr	r3, [pc, #564]	@ (8000864 <button_handler+0x2cc>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fa75 	bl	8000b20 <can_msg_handler>

		/* SEND CAN NEUTRAL GEAR MSG HERE */
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000636:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063a:	4886      	ldr	r0, [pc, #536]	@ (8000854 <button_handler+0x2bc>)
 800063c:	f001 ffa9 	bl	8002592 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000640:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000644:	4883      	ldr	r0, [pc, #524]	@ (8000854 <button_handler+0x2bc>)
 8000646:	f001 ffa4 	bl	8002592 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800064a:	2064      	movs	r0, #100	@ 0x64
 800064c:	f000 fe36 	bl	80012bc <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000650:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000654:	487f      	ldr	r0, [pc, #508]	@ (8000854 <button_handler+0x2bc>)
 8000656:	f001 ff9c 	bl	8002592 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800065a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800065e:	487d      	ldr	r0, [pc, #500]	@ (8000854 <button_handler+0x2bc>)
 8000660:	f001 ff97 	bl	8002592 <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 8000664:	2120      	movs	r1, #32
 8000666:	487b      	ldr	r0, [pc, #492]	@ (8000854 <button_handler+0x2bc>)
 8000668:	f001 ff64 	bl	8002534 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d12f      	bne.n	80006d2 <button_handler+0x13a>
			&& !HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && flag_btn3
 8000672:	2140      	movs	r1, #64	@ 0x40
 8000674:	4877      	ldr	r0, [pc, #476]	@ (8000854 <button_handler+0x2bc>)
 8000676:	f001 ff5d 	bl	8002534 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d128      	bne.n	80006d2 <button_handler+0x13a>
 8000680:	4b76      	ldr	r3, [pc, #472]	@ (800085c <button_handler+0x2c4>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d024      	beq.n	80006d2 <button_handler+0x13a>
			&& flag_btn4) {
 8000688:	4b75      	ldr	r3, [pc, #468]	@ (8000860 <button_handler+0x2c8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d020      	beq.n	80006d2 <button_handler+0x13a>
		flag_btn3 = !flag_btn3;
 8000690:	4b72      	ldr	r3, [pc, #456]	@ (800085c <button_handler+0x2c4>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	bf14      	ite	ne
 8000698:	2301      	movne	r3, #1
 800069a:	2300      	moveq	r3, #0
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b6c      	ldr	r3, [pc, #432]	@ (800085c <button_handler+0x2c4>)
 80006ac:	701a      	strb	r2, [r3, #0]
		flag_btn4 = !flag_btn4;
 80006ae:	4b6c      	ldr	r3, [pc, #432]	@ (8000860 <button_handler+0x2c8>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	bf14      	ite	ne
 80006b6:	2301      	movne	r3, #1
 80006b8:	2300      	moveq	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	f083 0301 	eor.w	r3, r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b65      	ldr	r3, [pc, #404]	@ (8000860 <button_handler+0x2c8>)
 80006ca:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80006cc:	2064      	movs	r0, #100	@ 0x64
 80006ce:	f000 fdf5 	bl	80012bc <HAL_Delay>
	}
	/* GEAR UP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 80006d2:	2120      	movs	r1, #32
 80006d4:	485f      	ldr	r0, [pc, #380]	@ (8000854 <button_handler+0x2bc>)
 80006d6:	f001 ff2d 	bl	8002534 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d039      	beq.n	8000754 <button_handler+0x1bc>
			&& !HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 80006e0:	2140      	movs	r1, #64	@ 0x40
 80006e2:	485c      	ldr	r0, [pc, #368]	@ (8000854 <button_handler+0x2bc>)
 80006e4:	f001 ff26 	bl	8002534 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d132      	bne.n	8000754 <button_handler+0x1bc>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn3) {
 80006ee:	f000 fddb 	bl	80012a8 <HAL_GetTick>
 80006f2:	4602      	mov	r2, r0
 80006f4:	4b58      	ldr	r3, [pc, #352]	@ (8000858 <button_handler+0x2c0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	2b96      	cmp	r3, #150	@ 0x96
 80006fc:	d92a      	bls.n	8000754 <button_handler+0x1bc>
 80006fe:	4b57      	ldr	r3, [pc, #348]	@ (800085c <button_handler+0x2c4>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	f083 0301 	eor.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d023      	beq.n	8000754 <button_handler+0x1bc>
		flag_btn3 = !flag_btn3;
 800070c:	4b53      	ldr	r3, [pc, #332]	@ (800085c <button_handler+0x2c4>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	bf14      	ite	ne
 8000714:	2301      	movne	r3, #1
 8000716:	2300      	moveq	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	f083 0301 	eor.w	r3, r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b4d      	ldr	r3, [pc, #308]	@ (800085c <button_handler+0x2c4>)
 8000728:	701a      	strb	r2, [r3, #0]
		/* SEND CAN GEAR UP MSG HERE */
		msg_type = gear_up;
 800072a:	4b4e      	ldr	r3, [pc, #312]	@ (8000864 <button_handler+0x2cc>)
 800072c:	2202      	movs	r2, #2
 800072e:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 8000730:	4b4c      	ldr	r3, [pc, #304]	@ (8000864 <button_handler+0x2cc>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f9f3 	bl	8000b20 <can_msg_handler>
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800073a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073e:	4845      	ldr	r0, [pc, #276]	@ (8000854 <button_handler+0x2bc>)
 8000740:	f001 ff27 	bl	8002592 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000744:	2064      	movs	r0, #100	@ 0x64
 8000746:	f000 fdb9 	bl	80012bc <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800074a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800074e:	4841      	ldr	r0, [pc, #260]	@ (8000854 <button_handler+0x2bc>)
 8000750:	f001 ff1f 	bl	8002592 <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) && flag_btn3) {
 8000754:	2120      	movs	r1, #32
 8000756:	483f      	ldr	r0, [pc, #252]	@ (8000854 <button_handler+0x2bc>)
 8000758:	f001 feec 	bl	8002534 <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d109      	bne.n	8000776 <button_handler+0x1de>
 8000762:	4b3e      	ldr	r3, [pc, #248]	@ (800085c <button_handler+0x2c4>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d005      	beq.n	8000776 <button_handler+0x1de>
		flag_btn3 = 0;
 800076a:	4b3c      	ldr	r3, [pc, #240]	@ (800085c <button_handler+0x2c4>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000770:	2064      	movs	r0, #100	@ 0x64
 8000772:	f000 fda3 	bl	80012bc <HAL_Delay>
	}
	/* GEAR DOWN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 8000776:	2140      	movs	r1, #64	@ 0x40
 8000778:	4836      	ldr	r0, [pc, #216]	@ (8000854 <button_handler+0x2bc>)
 800077a:	f001 fedb 	bl	8002534 <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d039      	beq.n	80007f8 <button_handler+0x260>
			&& !HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 8000784:	2120      	movs	r1, #32
 8000786:	4833      	ldr	r0, [pc, #204]	@ (8000854 <button_handler+0x2bc>)
 8000788:	f001 fed4 	bl	8002534 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d132      	bne.n	80007f8 <button_handler+0x260>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn4) {
 8000792:	f000 fd89 	bl	80012a8 <HAL_GetTick>
 8000796:	4602      	mov	r2, r0
 8000798:	4b2f      	ldr	r3, [pc, #188]	@ (8000858 <button_handler+0x2c0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	2b96      	cmp	r3, #150	@ 0x96
 80007a0:	d92a      	bls.n	80007f8 <button_handler+0x260>
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <button_handler+0x2c8>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	f083 0301 	eor.w	r3, r3, #1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d023      	beq.n	80007f8 <button_handler+0x260>
		flag_btn4 = !flag_btn4;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <button_handler+0x2c8>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf14      	ite	ne
 80007b8:	2301      	movne	r3, #1
 80007ba:	2300      	moveq	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f083 0301 	eor.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <button_handler+0x2c8>)
 80007cc:	701a      	strb	r2, [r3, #0]
		/* SEND CAN GEAR DOWN MSG HERE */
		msg_type = gear_down;
 80007ce:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <button_handler+0x2cc>)
 80007d0:	2203      	movs	r2, #3
 80007d2:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 80007d4:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <button_handler+0x2cc>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f9a1 	bl	8000b20 <can_msg_handler>
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80007de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007e2:	481c      	ldr	r0, [pc, #112]	@ (8000854 <button_handler+0x2bc>)
 80007e4:	f001 fed5 	bl	8002592 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80007e8:	2064      	movs	r0, #100	@ 0x64
 80007ea:	f000 fd67 	bl	80012bc <HAL_Delay>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80007ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f2:	4818      	ldr	r0, [pc, #96]	@ (8000854 <button_handler+0x2bc>)
 80007f4:	f001 fecd 	bl	8002592 <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && flag_btn4) {
 80007f8:	2140      	movs	r1, #64	@ 0x40
 80007fa:	4816      	ldr	r0, [pc, #88]	@ (8000854 <button_handler+0x2bc>)
 80007fc:	f001 fe9a 	bl	8002534 <HAL_GPIO_ReadPin>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d115      	bne.n	8000832 <button_handler+0x29a>
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <button_handler+0x2c8>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d011      	beq.n	8000832 <button_handler+0x29a>
		flag_btn4 = !flag_btn4;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <button_handler+0x2c8>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf14      	ite	ne
 8000816:	2301      	movne	r3, #1
 8000818:	2300      	moveq	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	f083 0301 	eor.w	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <button_handler+0x2c8>)
 800082a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800082c:	2064      	movs	r0, #100	@ 0x64
 800082e:	f000 fd45 	bl	80012bc <HAL_Delay>
	}
	/* ENGINE STARTUP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)
 8000832:	2108      	movs	r1, #8
 8000834:	4807      	ldr	r0, [pc, #28]	@ (8000854 <button_handler+0x2bc>)
 8000836:	f001 fe7d 	bl	8002534 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d049      	beq.n	80008d4 <button_handler+0x33c>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn1) {
 8000840:	f000 fd32 	bl	80012a8 <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <button_handler+0x2c0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	2b96      	cmp	r3, #150	@ 0x96
 800084e:	d941      	bls.n	80008d4 <button_handler+0x33c>
 8000850:	e00a      	b.n	8000868 <button_handler+0x2d0>
 8000852:	bf00      	nop
 8000854:	40010c00 	.word	0x40010c00
 8000858:	2000012c 	.word	0x2000012c
 800085c:	20000176 	.word	0x20000176
 8000860:	20000177 	.word	0x20000177
 8000864:	20000003 	.word	0x20000003
 8000868:	4ba4      	ldr	r3, [pc, #656]	@ (8000afc <button_handler+0x564>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d02e      	beq.n	80008d4 <button_handler+0x33c>
		flag_btn1 = !flag_btn1;
 8000876:	4ba1      	ldr	r3, [pc, #644]	@ (8000afc <button_handler+0x564>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f083 0301 	eor.w	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b9a      	ldr	r3, [pc, #616]	@ (8000afc <button_handler+0x564>)
 8000892:	701a      	strb	r2, [r3, #0]
		while (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)) {
 8000894:	e017      	b.n	80008c6 <button_handler+0x32e>
			/* SEND CAN MSG ENGINE STARTUP HERE */
			msg_type = engn_start;
 8000896:	4b9a      	ldr	r3, [pc, #616]	@ (8000b00 <button_handler+0x568>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
			can_msg_handler(msg_type);
 800089c:	4b98      	ldr	r3, [pc, #608]	@ (8000b00 <button_handler+0x568>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f93d 	bl	8000b20 <can_msg_handler>
			HAL_Delay(1);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f000 fd08 	bl	80012bc <HAL_Delay>
			/* ENGINE STARTUP SWITCH IS NOT LATCHING ! */
#if DEBUG == 1
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008b0:	4894      	ldr	r0, [pc, #592]	@ (8000b04 <button_handler+0x56c>)
 80008b2:	f001 fe6e 	bl	8002592 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80008b6:	2064      	movs	r0, #100	@ 0x64
 80008b8:	f000 fd00 	bl	80012bc <HAL_Delay>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008c0:	4890      	ldr	r0, [pc, #576]	@ (8000b04 <button_handler+0x56c>)
 80008c2:	f001 fe66 	bl	8002592 <HAL_GPIO_TogglePin>
		while (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)) {
 80008c6:	2108      	movs	r1, #8
 80008c8:	488e      	ldr	r0, [pc, #568]	@ (8000b04 <button_handler+0x56c>)
 80008ca:	f001 fe33 	bl	8002534 <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1e0      	bne.n	8000896 <button_handler+0x2fe>
#endif
		}
	}
	if (!HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) && flag_btn1) {
 80008d4:	2108      	movs	r1, #8
 80008d6:	488b      	ldr	r0, [pc, #556]	@ (8000b04 <button_handler+0x56c>)
 80008d8:	f001 fe2c 	bl	8002534 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d115      	bne.n	800090e <button_handler+0x376>
 80008e2:	4b86      	ldr	r3, [pc, #536]	@ (8000afc <button_handler+0x564>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d011      	beq.n	800090e <button_handler+0x376>
		flag_btn1 = !flag_btn1;
 80008ea:	4b84      	ldr	r3, [pc, #528]	@ (8000afc <button_handler+0x564>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf14      	ite	ne
 80008f2:	2301      	movne	r3, #1
 80008f4:	2300      	moveq	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f083 0301 	eor.w	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b7d      	ldr	r3, [pc, #500]	@ (8000afc <button_handler+0x564>)
 8000906:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000908:	2064      	movs	r0, #100	@ 0x64
 800090a:	f000 fcd7 	bl	80012bc <HAL_Delay>
	}
	/* ENGINE STOP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin)
 800090e:	2110      	movs	r1, #16
 8000910:	487c      	ldr	r0, [pc, #496]	@ (8000b04 <button_handler+0x56c>)
 8000912:	f001 fe0f 	bl	8002534 <HAL_GPIO_ReadPin>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d032      	beq.n	8000982 <button_handler+0x3ea>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn2) {
 800091c:	f000 fcc4 	bl	80012a8 <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	4b79      	ldr	r3, [pc, #484]	@ (8000b08 <button_handler+0x570>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	2b96      	cmp	r3, #150	@ 0x96
 800092a:	d92a      	bls.n	8000982 <button_handler+0x3ea>
 800092c:	4b77      	ldr	r3, [pc, #476]	@ (8000b0c <button_handler+0x574>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f083 0301 	eor.w	r3, r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d023      	beq.n	8000982 <button_handler+0x3ea>
		flag_btn2 = !flag_btn2;
 800093a:	4b74      	ldr	r3, [pc, #464]	@ (8000b0c <button_handler+0x574>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	bf14      	ite	ne
 8000942:	2301      	movne	r3, #1
 8000944:	2300      	moveq	r3, #0
 8000946:	b2db      	uxtb	r3, r3
 8000948:	f083 0301 	eor.w	r3, r3, #1
 800094c:	b2db      	uxtb	r3, r3
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b6d      	ldr	r3, [pc, #436]	@ (8000b0c <button_handler+0x574>)
 8000956:	701a      	strb	r2, [r3, #0]
		/* SEND CAN STOP ENGINE MSG HERE */
		msg_type = engn_stop;
 8000958:	4b69      	ldr	r3, [pc, #420]	@ (8000b00 <button_handler+0x568>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 800095e:	4b68      	ldr	r3, [pc, #416]	@ (8000b00 <button_handler+0x568>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f8dc 	bl	8000b20 <can_msg_handler>
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000968:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096c:	4865      	ldr	r0, [pc, #404]	@ (8000b04 <button_handler+0x56c>)
 800096e:	f001 fe10 	bl	8002592 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000972:	2064      	movs	r0, #100	@ 0x64
 8000974:	f000 fca2 	bl	80012bc <HAL_Delay>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000978:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800097c:	4861      	ldr	r0, [pc, #388]	@ (8000b04 <button_handler+0x56c>)
 800097e:	f001 fe08 	bl	8002592 <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) && flag_btn2) {
 8000982:	2110      	movs	r1, #16
 8000984:	485f      	ldr	r0, [pc, #380]	@ (8000b04 <button_handler+0x56c>)
 8000986:	f001 fdd5 	bl	8002534 <HAL_GPIO_ReadPin>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d115      	bne.n	80009bc <button_handler+0x424>
 8000990:	4b5e      	ldr	r3, [pc, #376]	@ (8000b0c <button_handler+0x574>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d011      	beq.n	80009bc <button_handler+0x424>
		flag_btn2 = !flag_btn2;
 8000998:	4b5c      	ldr	r3, [pc, #368]	@ (8000b0c <button_handler+0x574>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	f083 0301 	eor.w	r3, r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b56      	ldr	r3, [pc, #344]	@ (8000b0c <button_handler+0x574>)
 80009b4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80009b6:	2064      	movs	r0, #100	@ 0x64
 80009b8:	f000 fc80 	bl	80012bc <HAL_Delay>
	}
	/* NEXT SCREEN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_5_GPIO_Port, BTN_5_Pin)
 80009bc:	2180      	movs	r1, #128	@ 0x80
 80009be:	4851      	ldr	r0, [pc, #324]	@ (8000b04 <button_handler+0x56c>)
 80009c0:	f001 fdb8 	bl	8002534 <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d026      	beq.n	8000a18 <button_handler+0x480>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn5) {
 80009ca:	f000 fc6d 	bl	80012a8 <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	4b4d      	ldr	r3, [pc, #308]	@ (8000b08 <button_handler+0x570>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2b96      	cmp	r3, #150	@ 0x96
 80009d8:	d91e      	bls.n	8000a18 <button_handler+0x480>
 80009da:	4b4d      	ldr	r3, [pc, #308]	@ (8000b10 <button_handler+0x578>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	f083 0301 	eor.w	r3, r3, #1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d017      	beq.n	8000a18 <button_handler+0x480>
		flag_btn5 = !flag_btn5;
 80009e8:	4b49      	ldr	r3, [pc, #292]	@ (8000b10 <button_handler+0x578>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf14      	ite	ne
 80009f0:	2301      	movne	r3, #1
 80009f2:	2300      	moveq	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f083 0301 	eor.w	r3, r3, #1
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b43      	ldr	r3, [pc, #268]	@ (8000b10 <button_handler+0x578>)
 8000a04:	701a      	strb	r2, [r3, #0]
		/* SEND USART NEXT SCREEN MSG HERE */
		page = page + 1;
 8000a06:	4b43      	ldr	r3, [pc, #268]	@ (8000b14 <button_handler+0x57c>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	b2da      	uxtb	r2, r3
 8000a0e:	4b41      	ldr	r3, [pc, #260]	@ (8000b14 <button_handler+0x57c>)
 8000a10:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000a12:	2064      	movs	r0, #100	@ 0x64
 8000a14:	f000 fc52 	bl	80012bc <HAL_Delay>
	}
	if (!HAL_GPIO_ReadPin(BTN_5_GPIO_Port, BTN_5_Pin) && flag_btn5) {
 8000a18:	2180      	movs	r1, #128	@ 0x80
 8000a1a:	483a      	ldr	r0, [pc, #232]	@ (8000b04 <button_handler+0x56c>)
 8000a1c:	f001 fd8a 	bl	8002534 <HAL_GPIO_ReadPin>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d112      	bne.n	8000a4c <button_handler+0x4b4>
 8000a26:	4b3a      	ldr	r3, [pc, #232]	@ (8000b10 <button_handler+0x578>)
 8000a28:	781b      	ldrb	r3, [r3, #0]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00e      	beq.n	8000a4c <button_handler+0x4b4>
		flag_btn5 = !flag_btn5;
 8000a2e:	4b38      	ldr	r3, [pc, #224]	@ (8000b10 <button_handler+0x578>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	bf14      	ite	ne
 8000a36:	2301      	movne	r3, #1
 8000a38:	2300      	moveq	r3, #0
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	f083 0301 	eor.w	r3, r3, #1
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	b2da      	uxtb	r2, r3
 8000a48:	4b31      	ldr	r3, [pc, #196]	@ (8000b10 <button_handler+0x578>)
 8000a4a:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(100);
	}
	/* PREVIOUS SCREEN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_6_GPIO_Port, BTN_6_Pin)
 8000a4c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a50:	4831      	ldr	r0, [pc, #196]	@ (8000b18 <button_handler+0x580>)
 8000a52:	f001 fd6f 	bl	8002534 <HAL_GPIO_ReadPin>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d026      	beq.n	8000aaa <button_handler+0x512>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn6) {
 8000a5c:	f000 fc24 	bl	80012a8 <HAL_GetTick>
 8000a60:	4602      	mov	r2, r0
 8000a62:	4b29      	ldr	r3, [pc, #164]	@ (8000b08 <button_handler+0x570>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	1ad3      	subs	r3, r2, r3
 8000a68:	2b96      	cmp	r3, #150	@ 0x96
 8000a6a:	d91e      	bls.n	8000aaa <button_handler+0x512>
 8000a6c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b1c <button_handler+0x584>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	f083 0301 	eor.w	r3, r3, #1
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d017      	beq.n	8000aaa <button_handler+0x512>
		flag_btn6 = !flag_btn6;
 8000a7a:	4b28      	ldr	r3, [pc, #160]	@ (8000b1c <button_handler+0x584>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	bf14      	ite	ne
 8000a82:	2301      	movne	r3, #1
 8000a84:	2300      	moveq	r3, #0
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	f083 0301 	eor.w	r3, r3, #1
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	f003 0301 	and.w	r3, r3, #1
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	4b21      	ldr	r3, [pc, #132]	@ (8000b1c <button_handler+0x584>)
 8000a96:	701a      	strb	r2, [r3, #0]
		/* SEND USART PREVIOUS SCREEN MSG HERE */
		page = page - 1;
 8000a98:	4b1e      	ldr	r3, [pc, #120]	@ (8000b14 <button_handler+0x57c>)
 8000a9a:	781b      	ldrb	r3, [r3, #0]
 8000a9c:	3b01      	subs	r3, #1
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b14 <button_handler+0x57c>)
 8000aa2:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000aa4:	2064      	movs	r0, #100	@ 0x64
 8000aa6:	f000 fc09 	bl	80012bc <HAL_Delay>
	}
	if (!HAL_GPIO_ReadPin(BTN_6_GPIO_Port, BTN_6_Pin) && flag_btn6) {
 8000aaa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000aae:	481a      	ldr	r0, [pc, #104]	@ (8000b18 <button_handler+0x580>)
 8000ab0:	f001 fd40 	bl	8002534 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d112      	bne.n	8000ae0 <button_handler+0x548>
 8000aba:	4b18      	ldr	r3, [pc, #96]	@ (8000b1c <button_handler+0x584>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d00e      	beq.n	8000ae0 <button_handler+0x548>
		flag_btn6 = !flag_btn6;
 8000ac2:	4b16      	ldr	r3, [pc, #88]	@ (8000b1c <button_handler+0x584>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	bf14      	ite	ne
 8000aca:	2301      	movne	r3, #1
 8000acc:	2300      	moveq	r3, #0
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	f083 0301 	eor.w	r3, r3, #1
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	4b0f      	ldr	r3, [pc, #60]	@ (8000b1c <button_handler+0x584>)
 8000ade:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(100);
	}
	if (page > 5 || page < 1){
 8000ae0:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <button_handler+0x57c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b05      	cmp	r3, #5
 8000ae6:	d803      	bhi.n	8000af0 <button_handler+0x558>
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b14 <button_handler+0x57c>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d102      	bne.n	8000af6 <button_handler+0x55e>
		page = 1;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <button_handler+0x57c>)
 8000af2:	2201      	movs	r2, #1
 8000af4:	701a      	strb	r2, [r3, #0]
	}

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000178 	.word	0x20000178
 8000b00:	20000003 	.word	0x20000003
 8000b04:	40010c00 	.word	0x40010c00
 8000b08:	2000012c 	.word	0x2000012c
 8000b0c:	20000179 	.word	0x20000179
 8000b10:	2000017a 	.word	0x2000017a
 8000b14:	2000017b 	.word	0x2000017b
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	2000017c 	.word	0x2000017c

08000b20 <can_msg_handler>:
int can_msg_handler(uint8_t typemsg) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	switch (typemsg) {
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b04      	cmp	r3, #4
 8000b2e:	f200 8085 	bhi.w	8000c3c <can_msg_handler+0x11c>
 8000b32:	a201      	add	r2, pc, #4	@ (adr r2, 8000b38 <can_msg_handler+0x18>)
 8000b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b38:	08000b4d 	.word	0x08000b4d
 8000b3c:	08000b7d 	.word	0x08000b7d
 8000b40:	08000bad 	.word	0x08000bad
 8000b44:	08000bdd 	.word	0x08000bdd
 8000b48:	08000c0d 	.word	0x08000c0d
	case engn_start:
		/* MSG START ENGINE */
		TxHeader.StdId = 0x643;
 8000b4c:	4b40      	ldr	r3, [pc, #256]	@ (8000c50 <can_msg_handler+0x130>)
 8000b4e:	f240 6243 	movw	r2, #1603	@ 0x643
 8000b52:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000001; //using binary system to make bit set more clear
 8000b54:	4b3f      	ldr	r3, [pc, #252]	@ (8000c54 <can_msg_handler+0x134>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000b5a:	bf00      	nop
 8000b5c:	483e      	ldr	r0, [pc, #248]	@ (8000c58 <can_msg_handler+0x138>)
 8000b5e:	f000 fea8 	bl	80018b2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d0f9      	beq.n	8000b5c <can_msg_handler+0x3c>
			; //CAN SW#0
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000b68:	4b3c      	ldr	r3, [pc, #240]	@ (8000c5c <can_msg_handler+0x13c>)
 8000b6a:	4a3a      	ldr	r2, [pc, #232]	@ (8000c54 <can_msg_handler+0x134>)
 8000b6c:	4938      	ldr	r1, [pc, #224]	@ (8000c50 <can_msg_handler+0x130>)
 8000b6e:	483a      	ldr	r0, [pc, #232]	@ (8000c58 <can_msg_handler+0x138>)
 8000b70:	f000 fdd0 	bl	8001714 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000b74:	4b37      	ldr	r3, [pc, #220]	@ (8000c54 <can_msg_handler+0x134>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	711a      	strb	r2, [r3, #4]
		break;
 8000b7a:	e060      	b.n	8000c3e <can_msg_handler+0x11e>
	case engn_stop:
		/* MSG STOP ENGINE */
		TxHeader.StdId = 0x642;
 8000b7c:	4b34      	ldr	r3, [pc, #208]	@ (8000c50 <can_msg_handler+0x130>)
 8000b7e:	f240 6242 	movw	r2, #1602	@ 0x642
 8000b82:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000010; //CAN SW#1
 8000b84:	4b33      	ldr	r3, [pc, #204]	@ (8000c54 <can_msg_handler+0x134>)
 8000b86:	2202      	movs	r2, #2
 8000b88:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000b8a:	bf00      	nop
 8000b8c:	4832      	ldr	r0, [pc, #200]	@ (8000c58 <can_msg_handler+0x138>)
 8000b8e:	f000 fe90 	bl	80018b2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d0f9      	beq.n	8000b8c <can_msg_handler+0x6c>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000b98:	4b30      	ldr	r3, [pc, #192]	@ (8000c5c <can_msg_handler+0x13c>)
 8000b9a:	4a2e      	ldr	r2, [pc, #184]	@ (8000c54 <can_msg_handler+0x134>)
 8000b9c:	492c      	ldr	r1, [pc, #176]	@ (8000c50 <can_msg_handler+0x130>)
 8000b9e:	482e      	ldr	r0, [pc, #184]	@ (8000c58 <can_msg_handler+0x138>)
 8000ba0:	f000 fdb8 	bl	8001714 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8000c54 <can_msg_handler+0x134>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	711a      	strb	r2, [r3, #4]
		break;
 8000baa:	e048      	b.n	8000c3e <can_msg_handler+0x11e>
	case gear_up:
		/* MSG GEAR UP */
		TxHeader.StdId = 0x642;
 8000bac:	4b28      	ldr	r3, [pc, #160]	@ (8000c50 <can_msg_handler+0x130>)
 8000bae:	f240 6242 	movw	r2, #1602	@ 0x642
 8000bb2:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000100; //CAN SW#2
 8000bb4:	4b27      	ldr	r3, [pc, #156]	@ (8000c54 <can_msg_handler+0x134>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000bba:	bf00      	nop
 8000bbc:	4826      	ldr	r0, [pc, #152]	@ (8000c58 <can_msg_handler+0x138>)
 8000bbe:	f000 fe78 	bl	80018b2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d0f9      	beq.n	8000bbc <can_msg_handler+0x9c>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000bc8:	4b24      	ldr	r3, [pc, #144]	@ (8000c5c <can_msg_handler+0x13c>)
 8000bca:	4a22      	ldr	r2, [pc, #136]	@ (8000c54 <can_msg_handler+0x134>)
 8000bcc:	4920      	ldr	r1, [pc, #128]	@ (8000c50 <can_msg_handler+0x130>)
 8000bce:	4822      	ldr	r0, [pc, #136]	@ (8000c58 <can_msg_handler+0x138>)
 8000bd0:	f000 fda0 	bl	8001714 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000bd4:	4b1f      	ldr	r3, [pc, #124]	@ (8000c54 <can_msg_handler+0x134>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	711a      	strb	r2, [r3, #4]
		break;
 8000bda:	e030      	b.n	8000c3e <can_msg_handler+0x11e>
	case gear_down:
		/* MSG GEAR DOWN */
		TxHeader.StdId = 0x642;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000c50 <can_msg_handler+0x130>)
 8000bde:	f240 6242 	movw	r2, #1602	@ 0x642
 8000be2:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00001000; //CAN SW #3
 8000be4:	4b1b      	ldr	r3, [pc, #108]	@ (8000c54 <can_msg_handler+0x134>)
 8000be6:	2208      	movs	r2, #8
 8000be8:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000bea:	bf00      	nop
 8000bec:	481a      	ldr	r0, [pc, #104]	@ (8000c58 <can_msg_handler+0x138>)
 8000bee:	f000 fe60 	bl	80018b2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d0f9      	beq.n	8000bec <can_msg_handler+0xcc>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000bf8:	4b18      	ldr	r3, [pc, #96]	@ (8000c5c <can_msg_handler+0x13c>)
 8000bfa:	4a16      	ldr	r2, [pc, #88]	@ (8000c54 <can_msg_handler+0x134>)
 8000bfc:	4914      	ldr	r1, [pc, #80]	@ (8000c50 <can_msg_handler+0x130>)
 8000bfe:	4816      	ldr	r0, [pc, #88]	@ (8000c58 <can_msg_handler+0x138>)
 8000c00:	f000 fd88 	bl	8001714 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000c04:	4b13      	ldr	r3, [pc, #76]	@ (8000c54 <can_msg_handler+0x134>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	711a      	strb	r2, [r3, #4]
		break;
 8000c0a:	e018      	b.n	8000c3e <can_msg_handler+0x11e>
	case gear_neutral:
		/* MSG GEAR NEUTRAL */
		TxHeader.StdId = 0x642;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	@ (8000c50 <can_msg_handler+0x130>)
 8000c0e:	f240 6242 	movw	r2, #1602	@ 0x642
 8000c12:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00010000; //CAN SW#4
 8000c14:	4b0f      	ldr	r3, [pc, #60]	@ (8000c54 <can_msg_handler+0x134>)
 8000c16:	2210      	movs	r2, #16
 8000c18:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000c1a:	bf00      	nop
 8000c1c:	480e      	ldr	r0, [pc, #56]	@ (8000c58 <can_msg_handler+0x138>)
 8000c1e:	f000 fe48 	bl	80018b2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d0f9      	beq.n	8000c1c <can_msg_handler+0xfc>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000c28:	4b0c      	ldr	r3, [pc, #48]	@ (8000c5c <can_msg_handler+0x13c>)
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8000c54 <can_msg_handler+0x134>)
 8000c2c:	4908      	ldr	r1, [pc, #32]	@ (8000c50 <can_msg_handler+0x130>)
 8000c2e:	480a      	ldr	r0, [pc, #40]	@ (8000c58 <can_msg_handler+0x138>)
 8000c30:	f000 fd70 	bl	8001714 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <can_msg_handler+0x134>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	711a      	strb	r2, [r3, #4]
		break;
 8000c3a:	e000      	b.n	8000c3e <can_msg_handler+0x11e>
	default:
		/* MSG NONE */
		break;
 8000c3c:	bf00      	nop
	}
	msg_type = msg_none; // SET NONE TYPE MSG
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <can_msg_handler+0x140>)
 8000c40:	2205      	movs	r2, #5
 8000c42:	701a      	strb	r2, [r3, #0]
	return 0; // return OK value to prevent endless loop
 8000c44:	2300      	movs	r3, #0
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3708      	adds	r7, #8
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200000ec 	.word	0x200000ec
 8000c54:	20000120 	.word	0x20000120
 8000c58:	2000007c 	.word	0x2000007c
 8000c5c:	20000128 	.word	0x20000128
 8000c60:	20000003 	.word	0x20000003

08000c64 <data_update_handler>:
void data_update_handler() {
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
	ECU.RPM = RxData.x600[1];
 8000c68:	4b3b      	ldr	r3, [pc, #236]	@ (8000d58 <data_update_handler+0xf4>)
 8000c6a:	7a5b      	ldrb	r3, [r3, #9]
 8000c6c:	461a      	mov	r2, r3
 8000c6e:	4b3b      	ldr	r3, [pc, #236]	@ (8000d5c <data_update_handler+0xf8>)
 8000c70:	801a      	strh	r2, [r3, #0]
	ECU.RPM = ECU.RPM << 7;
 8000c72:	4b3a      	ldr	r3, [pc, #232]	@ (8000d5c <data_update_handler+0xf8>)
 8000c74:	881b      	ldrh	r3, [r3, #0]
 8000c76:	01db      	lsls	r3, r3, #7
 8000c78:	b29a      	uxth	r2, r3
 8000c7a:	4b38      	ldr	r3, [pc, #224]	@ (8000d5c <data_update_handler+0xf8>)
 8000c7c:	801a      	strh	r2, [r3, #0]
	ECU.RPM = ECU.RPM + RxData.x600[0];
 8000c7e:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <data_update_handler+0xf8>)
 8000c80:	881b      	ldrh	r3, [r3, #0]
 8000c82:	4a35      	ldr	r2, [pc, #212]	@ (8000d58 <data_update_handler+0xf4>)
 8000c84:	7a12      	ldrb	r2, [r2, #8]
 8000c86:	4413      	add	r3, r2
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	4b34      	ldr	r3, [pc, #208]	@ (8000d5c <data_update_handler+0xf8>)
 8000c8c:	801a      	strh	r2, [r3, #0]
	//TODO: fix 2 byte variables (as below)
	ECU.TPS = RxData.x600[2];
 8000c8e:	4b32      	ldr	r3, [pc, #200]	@ (8000d58 <data_update_handler+0xf4>)
 8000c90:	7a9a      	ldrb	r2, [r3, #10]
 8000c92:	4b32      	ldr	r3, [pc, #200]	@ (8000d5c <data_update_handler+0xf8>)
 8000c94:	759a      	strb	r2, [r3, #22]
	ECU.MAP = RxData.x600[3] + RxData.x600[4];
 8000c96:	4b30      	ldr	r3, [pc, #192]	@ (8000d58 <data_update_handler+0xf4>)
 8000c98:	7adb      	ldrb	r3, [r3, #11]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	4b2e      	ldr	r3, [pc, #184]	@ (8000d58 <data_update_handler+0xf4>)
 8000c9e:	7b1b      	ldrb	r3, [r3, #12]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <data_update_handler+0xf8>)
 8000ca6:	805a      	strh	r2, [r3, #2]
	//0x600 {0_RPM, 1_RPM, 2_TPS, 3_IAT, 4_MAP, 5_MAP, 6_INJPW, 7_INJPW}
	ECU.AIN1 = RxData.x601[0] + RxData.x601[1];
 8000ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d58 <data_update_handler+0xf4>)
 8000caa:	7c1b      	ldrb	r3, [r3, #16]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b2a      	ldr	r3, [pc, #168]	@ (8000d58 <data_update_handler+0xf4>)
 8000cb0:	7c5b      	ldrb	r3, [r3, #17]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b29      	ldr	r3, [pc, #164]	@ (8000d5c <data_update_handler+0xf8>)
 8000cb8:	80da      	strh	r2, [r3, #6]
	ECU.AIN2 = RxData.x601[2] + RxData.x601[3];
 8000cba:	4b27      	ldr	r3, [pc, #156]	@ (8000d58 <data_update_handler+0xf4>)
 8000cbc:	7c9b      	ldrb	r3, [r3, #18]
 8000cbe:	461a      	mov	r2, r3
 8000cc0:	4b25      	ldr	r3, [pc, #148]	@ (8000d58 <data_update_handler+0xf4>)
 8000cc2:	7cdb      	ldrb	r3, [r3, #19]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	b29a      	uxth	r2, r3
 8000cc8:	4b24      	ldr	r3, [pc, #144]	@ (8000d5c <data_update_handler+0xf8>)
 8000cca:	811a      	strh	r2, [r3, #8]
	ECU.AIN3 = RxData.x601[4] + RxData.x601[5];
 8000ccc:	4b22      	ldr	r3, [pc, #136]	@ (8000d58 <data_update_handler+0xf4>)
 8000cce:	7d1b      	ldrb	r3, [r3, #20]
 8000cd0:	461a      	mov	r2, r3
 8000cd2:	4b21      	ldr	r3, [pc, #132]	@ (8000d58 <data_update_handler+0xf4>)
 8000cd4:	7d5b      	ldrb	r3, [r3, #21]
 8000cd6:	4413      	add	r3, r2
 8000cd8:	b29a      	uxth	r2, r3
 8000cda:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <data_update_handler+0xf8>)
 8000cdc:	815a      	strh	r2, [r3, #10]
	ECU.AIN4 = RxData.x601[6] + RxData.x601[7];
 8000cde:	4b1e      	ldr	r3, [pc, #120]	@ (8000d58 <data_update_handler+0xf4>)
 8000ce0:	7d9b      	ldrb	r3, [r3, #22]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <data_update_handler+0xf4>)
 8000ce6:	7ddb      	ldrb	r3, [r3, #23]
 8000ce8:	4413      	add	r3, r2
 8000cea:	b29a      	uxth	r2, r3
 8000cec:	4b1b      	ldr	r3, [pc, #108]	@ (8000d5c <data_update_handler+0xf8>)
 8000cee:	819a      	strh	r2, [r3, #12]
	//0x601 {0_AIN1, 1_AIN1, 2_AIN2, 3_AIN2, 4_AIN3, 5_AIN3,6_AIN4, 7_AIN4}
	ECU.VSPD = RxData.x602[0] + RxData.x602[1];
 8000cf0:	4b19      	ldr	r3, [pc, #100]	@ (8000d58 <data_update_handler+0xf4>)
 8000cf2:	7e1b      	ldrb	r3, [r3, #24]
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4b18      	ldr	r3, [pc, #96]	@ (8000d58 <data_update_handler+0xf4>)
 8000cf8:	7e5b      	ldrb	r3, [r3, #25]
 8000cfa:	4413      	add	r3, r2
 8000cfc:	b29a      	uxth	r2, r3
 8000cfe:	4b17      	ldr	r3, [pc, #92]	@ (8000d5c <data_update_handler+0xf8>)
 8000d00:	81da      	strh	r2, [r3, #14]
	ECU.BARO = RxData.x602[3];
 8000d02:	4b15      	ldr	r3, [pc, #84]	@ (8000d58 <data_update_handler+0xf4>)
 8000d04:	7eda      	ldrb	r2, [r3, #27]
 8000d06:	4b15      	ldr	r3, [pc, #84]	@ (8000d5c <data_update_handler+0xf8>)
 8000d08:	75da      	strb	r2, [r3, #23]
	ECU.OILT = RxData.x602[4];
 8000d0a:	4b13      	ldr	r3, [pc, #76]	@ (8000d58 <data_update_handler+0xf4>)
 8000d0c:	7f1a      	ldrb	r2, [r3, #28]
 8000d0e:	4b13      	ldr	r3, [pc, #76]	@ (8000d5c <data_update_handler+0xf8>)
 8000d10:	761a      	strb	r2, [r3, #24]
	ECU.FUELP = RxData.x602[5];
 8000d12:	4b11      	ldr	r3, [pc, #68]	@ (8000d58 <data_update_handler+0xf4>)
 8000d14:	7f5a      	ldrb	r2, [r3, #29]
 8000d16:	4b11      	ldr	r3, [pc, #68]	@ (8000d5c <data_update_handler+0xf8>)
 8000d18:	769a      	strb	r2, [r3, #26]
	ECU.CLT = RxData.x602[6] + RxData.x602[7];
 8000d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <data_update_handler+0xf4>)
 8000d1c:	7f9b      	ldrb	r3, [r3, #30]
 8000d1e:	461a      	mov	r2, r3
 8000d20:	4b0d      	ldr	r3, [pc, #52]	@ (8000d58 <data_update_handler+0xf4>)
 8000d22:	7fdb      	ldrb	r3, [r3, #31]
 8000d24:	4413      	add	r3, r2
 8000d26:	b29b      	uxth	r3, r3
 8000d28:	b21a      	sxth	r2, r3
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d5c <data_update_handler+0xf8>)
 8000d2c:	829a      	strh	r2, [r3, #20]
	//0x602 {0_VSPD, 1_VSPD, 2_BARO, 3_OILT, 4_OILP, 5_FUELP, 6_CLT, 7_CLT}
	ECU.GEAR = RxData.x604[0];
 8000d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000d58 <data_update_handler+0xf4>)
 8000d30:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000d34:	4b09      	ldr	r3, [pc, #36]	@ (8000d5c <data_update_handler+0xf8>)
 8000d36:	76da      	strb	r2, [r3, #27]
	ECU.BATT = RxData.x604[2] + RxData.x604[3];
 8000d38:	4b07      	ldr	r3, [pc, #28]	@ (8000d58 <data_update_handler+0xf4>)
 8000d3a:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000d3e:	461a      	mov	r2, r3
 8000d40:	4b05      	ldr	r3, [pc, #20]	@ (8000d58 <data_update_handler+0xf4>)
 8000d42:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000d46:	4413      	add	r3, r2
 8000d48:	b29a      	uxth	r2, r3
 8000d4a:	4b04      	ldr	r3, [pc, #16]	@ (8000d5c <data_update_handler+0xf8>)
 8000d4c:	821a      	strh	r2, [r3, #16]
	//0x604 {0_GEAR, 1_ECUTEMP, 2_BATT, 3_BATT, 4_ERRFLAG, 5_ERRFLAG, 6_FLAGS1, 7_ETHANOL}
}
 8000d4e:	bf00      	nop
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000130 	.word	0x20000130
 8000d5c:	20000158 	.word	0x20000158

08000d60 <data_send_handler>:
void data_send_handler(void) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
	//TODO: Add cmd send for last variables
	static char cmd[50] = { 0 };
	sprintf(cmd, "RP.txt=\"%d\"", ECU.RPM);
 8000d64:	4b1f      	ldr	r3, [pc, #124]	@ (8000de4 <data_send_handler+0x84>)
 8000d66:	881b      	ldrh	r3, [r3, #0]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	491f      	ldr	r1, [pc, #124]	@ (8000de8 <data_send_handler+0x88>)
 8000d6c:	481f      	ldr	r0, [pc, #124]	@ (8000dec <data_send_handler+0x8c>)
 8000d6e:	f002 fa5d 	bl	800322c <siprintf>
	nextion_send(cmd);
 8000d72:	481e      	ldr	r0, [pc, #120]	@ (8000dec <data_send_handler+0x8c>)
 8000d74:	f7ff f9f2 	bl	800015c <nextion_send>
	sprintf(cmd, "GE.txt=\"%d\"", ECU.GEAR);
 8000d78:	4b1a      	ldr	r3, [pc, #104]	@ (8000de4 <data_send_handler+0x84>)
 8000d7a:	7edb      	ldrb	r3, [r3, #27]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	491c      	ldr	r1, [pc, #112]	@ (8000df0 <data_send_handler+0x90>)
 8000d80:	481a      	ldr	r0, [pc, #104]	@ (8000dec <data_send_handler+0x8c>)
 8000d82:	f002 fa53 	bl	800322c <siprintf>
	nextion_send(cmd);
 8000d86:	4819      	ldr	r0, [pc, #100]	@ (8000dec <data_send_handler+0x8c>)
 8000d88:	f7ff f9e8 	bl	800015c <nextion_send>
	sprintf(cmd, "SP.txt=\"%d\"", ECU.VSPD);
 8000d8c:	4b15      	ldr	r3, [pc, #84]	@ (8000de4 <data_send_handler+0x84>)
 8000d8e:	89db      	ldrh	r3, [r3, #14]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4918      	ldr	r1, [pc, #96]	@ (8000df4 <data_send_handler+0x94>)
 8000d94:	4815      	ldr	r0, [pc, #84]	@ (8000dec <data_send_handler+0x8c>)
 8000d96:	f002 fa49 	bl	800322c <siprintf>
	nextion_send(cmd);
 8000d9a:	4814      	ldr	r0, [pc, #80]	@ (8000dec <data_send_handler+0x8c>)
 8000d9c:	f7ff f9de 	bl	800015c <nextion_send>
	sprintf(cmd, "VO.txt=\"%d\"", ECU.BATT);
 8000da0:	4b10      	ldr	r3, [pc, #64]	@ (8000de4 <data_send_handler+0x84>)
 8000da2:	8a1b      	ldrh	r3, [r3, #16]
 8000da4:	461a      	mov	r2, r3
 8000da6:	4914      	ldr	r1, [pc, #80]	@ (8000df8 <data_send_handler+0x98>)
 8000da8:	4810      	ldr	r0, [pc, #64]	@ (8000dec <data_send_handler+0x8c>)
 8000daa:	f002 fa3f 	bl	800322c <siprintf>
	nextion_send(cmd);
 8000dae:	480f      	ldr	r0, [pc, #60]	@ (8000dec <data_send_handler+0x8c>)
 8000db0:	f7ff f9d4 	bl	800015c <nextion_send>
	sprintf(cmd, "OI.txt=\"%d\"", ECU.OILT);
 8000db4:	4b0b      	ldr	r3, [pc, #44]	@ (8000de4 <data_send_handler+0x84>)
 8000db6:	7e1b      	ldrb	r3, [r3, #24]
 8000db8:	461a      	mov	r2, r3
 8000dba:	4910      	ldr	r1, [pc, #64]	@ (8000dfc <data_send_handler+0x9c>)
 8000dbc:	480b      	ldr	r0, [pc, #44]	@ (8000dec <data_send_handler+0x8c>)
 8000dbe:	f002 fa35 	bl	800322c <siprintf>
	nextion_send(cmd);
 8000dc2:	480a      	ldr	r0, [pc, #40]	@ (8000dec <data_send_handler+0x8c>)
 8000dc4:	f7ff f9ca 	bl	800015c <nextion_send>
	sprintf(cmd, "WA.txt=\"%d\"", ECU.CLT);
 8000dc8:	4b06      	ldr	r3, [pc, #24]	@ (8000de4 <data_send_handler+0x84>)
 8000dca:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000dce:	461a      	mov	r2, r3
 8000dd0:	490b      	ldr	r1, [pc, #44]	@ (8000e00 <data_send_handler+0xa0>)
 8000dd2:	4806      	ldr	r0, [pc, #24]	@ (8000dec <data_send_handler+0x8c>)
 8000dd4:	f002 fa2a 	bl	800322c <siprintf>
	nextion_send(cmd);
 8000dd8:	4804      	ldr	r0, [pc, #16]	@ (8000dec <data_send_handler+0x8c>)
 8000dda:	f7ff f9bf 	bl	800015c <nextion_send>
	//add fan ECU stream msg
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000158 	.word	0x20000158
 8000de8:	08003ba4 	.word	0x08003ba4
 8000dec:	20000180 	.word	0x20000180
 8000df0:	08003bb0 	.word	0x08003bb0
 8000df4:	08003bbc 	.word	0x08003bbc
 8000df8:	08003bc8 	.word	0x08003bc8
 8000dfc:	08003bd4 	.word	0x08003bd4
 8000e00:	08003be0 	.word	0x08003be0

08000e04 <startup>:
void startup() {
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e0e:	4823      	ldr	r0, [pc, #140]	@ (8000e9c <startup+0x98>)
 8000e10:	f001 fba7 	bl	8002562 <HAL_GPIO_WritePin>
	TxHeader.StdId = 0x642;
 8000e14:	4b22      	ldr	r3, [pc, #136]	@ (8000ea0 <startup+0x9c>)
 8000e16:	f240 6242 	movw	r2, #1602	@ 0x642
 8000e1a:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8000e1c:	4b20      	ldr	r3, [pc, #128]	@ (8000ea0 <startup+0x9c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA; // CAN_RTR_REMOTE
 8000e22:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea0 <startup+0x9c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;   // USE STANDART ID
 8000e28:	4b1d      	ldr	r3, [pc, #116]	@ (8000ea0 <startup+0x9c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000e2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea0 <startup+0x9c>)
 8000e30:	2208      	movs	r2, #8
 8000e32:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = 0;
 8000e34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ea0 <startup+0x9c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	751a      	strb	r2, [r3, #20]
	while (HAL_CAN_Start(&hcan) == HAL_ERROR)
 8000e3a:	bf00      	nop
 8000e3c:	4819      	ldr	r0, [pc, #100]	@ (8000ea4 <startup+0xa0>)
 8000e3e:	f000 fc25 	bl	800168c <HAL_CAN_Start>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	d0f9      	beq.n	8000e3c <startup+0x38>
		;
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000e48:	2102      	movs	r1, #2
 8000e4a:	4816      	ldr	r0, [pc, #88]	@ (8000ea4 <startup+0xa0>)
 8000e4c:	f000 fe86 	bl	8001b5c <HAL_CAN_ActivateNotification>
	/* SOME LED BLINK FOR SUCCESSFUL STARTUP*/
#if DEBUG == 1
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin, 1);
 8000e50:	2201      	movs	r2, #1
 8000e52:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000e56:	4814      	ldr	r0, [pc, #80]	@ (8000ea8 <startup+0xa4>)
 8000e58:	f001 fb83 	bl	8002562 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000e5c:	20c8      	movs	r0, #200	@ 0xc8
 8000e5e:	f000 fa2d 	bl	80012bc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin, 0);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000e68:	480f      	ldr	r0, [pc, #60]	@ (8000ea8 <startup+0xa4>)
 8000e6a:	f001 fb7a 	bl	8002562 <HAL_GPIO_WritePin>
#endif
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000e6e:	2201      	movs	r2, #1
 8000e70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e74:	4809      	ldr	r0, [pc, #36]	@ (8000e9c <startup+0x98>)
 8000e76:	f001 fb74 	bl	8002562 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000e7a:	20c8      	movs	r0, #200	@ 0xc8
 8000e7c:	f000 fa1e 	bl	80012bc <HAL_Delay>
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e86:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <startup+0x98>)
 8000e88:	f001 fb6b 	bl	8002562 <HAL_GPIO_WritePin>
	time_ms = HAL_GetTick();
 8000e8c:	f000 fa0c 	bl	80012a8 <HAL_GetTick>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a06      	ldr	r2, [pc, #24]	@ (8000eac <startup+0xa8>)
 8000e94:	6013      	str	r3, [r2, #0]
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	40011000 	.word	0x40011000
 8000ea0:	200000ec 	.word	0x200000ec
 8000ea4:	2000007c 	.word	0x2000007c
 8000ea8:	40010c00 	.word	0x40010c00
 8000eac:	2000012c 	.word	0x2000012c

08000eb0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ebe:	4805      	ldr	r0, [pc, #20]	@ (8000ed4 <Error_Handler+0x24>)
 8000ec0:	f001 fb4f 	bl	8002562 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8000ec4:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000ec8:	f000 f9f8 	bl	80012bc <HAL_Delay>
		HAL_NVIC_SystemReset();
 8000ecc:	f001 f99d 	bl	800220a <HAL_NVIC_SystemReset>
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000ed0:	bf00      	nop
 8000ed2:	e7f1      	b.n	8000eb8 <Error_Handler+0x8>
 8000ed4:	40011000 	.word	0x40011000

08000ed8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ede:	4b15      	ldr	r3, [pc, #84]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000ee0:	699b      	ldr	r3, [r3, #24]
 8000ee2:	4a14      	ldr	r2, [pc, #80]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000ee4:	f043 0301 	orr.w	r3, r3, #1
 8000ee8:	6193      	str	r3, [r2, #24]
 8000eea:	4b12      	ldr	r3, [pc, #72]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000eec:	699b      	ldr	r3, [r3, #24]
 8000eee:	f003 0301 	and.w	r3, r3, #1
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000ef8:	69db      	ldr	r3, [r3, #28]
 8000efa:	4a0e      	ldr	r2, [pc, #56]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000efc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f00:	61d3      	str	r3, [r2, #28]
 8000f02:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <HAL_MspInit+0x5c>)
 8000f04:	69db      	ldr	r3, [r3, #28]
 8000f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_MspInit+0x60>)
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f22:	60fb      	str	r3, [r7, #12]
 8000f24:	4a04      	ldr	r2, [pc, #16]	@ (8000f38 <HAL_MspInit+0x60>)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	40021000 	.word	0x40021000
 8000f38:	40010000 	.word	0x40010000

08000f3c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b08a      	sub	sp, #40	@ 0x28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a2d      	ldr	r2, [pc, #180]	@ (800100c <HAL_CAN_MspInit+0xd0>)
 8000f58:	4293      	cmp	r3, r2
 8000f5a:	d153      	bne.n	8001004 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000f5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001010 <HAL_CAN_MspInit+0xd4>)
 8000f5e:	69db      	ldr	r3, [r3, #28]
 8000f60:	4a2b      	ldr	r2, [pc, #172]	@ (8001010 <HAL_CAN_MspInit+0xd4>)
 8000f62:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f66:	61d3      	str	r3, [r2, #28]
 8000f68:	4b29      	ldr	r3, [pc, #164]	@ (8001010 <HAL_CAN_MspInit+0xd4>)
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f74:	4b26      	ldr	r3, [pc, #152]	@ (8001010 <HAL_CAN_MspInit+0xd4>)
 8000f76:	699b      	ldr	r3, [r3, #24]
 8000f78:	4a25      	ldr	r2, [pc, #148]	@ (8001010 <HAL_CAN_MspInit+0xd4>)
 8000f7a:	f043 0308 	orr.w	r3, r3, #8
 8000f7e:	6193      	str	r3, [r2, #24]
 8000f80:	4b23      	ldr	r3, [pc, #140]	@ (8001010 <HAL_CAN_MspInit+0xd4>)
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	f003 0308 	and.w	r3, r3, #8
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	2300      	movs	r3, #0
 8000f98:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	481c      	ldr	r0, [pc, #112]	@ (8001014 <HAL_CAN_MspInit+0xd8>)
 8000fa2:	f001 f943 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fa6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fac:	2302      	movs	r3, #2
 8000fae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb4:	f107 0314 	add.w	r3, r7, #20
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4816      	ldr	r0, [pc, #88]	@ (8001014 <HAL_CAN_MspInit+0xd8>)
 8000fbc:	f001 f936 	bl	800222c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000fc0:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_CAN_MspInit+0xdc>)
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fc8:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000fcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fde:	4a0e      	ldr	r2, [pc, #56]	@ (8001018 <HAL_CAN_MspInit+0xdc>)
 8000fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe2:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	2101      	movs	r1, #1
 8000fe8:	2014      	movs	r0, #20
 8000fea:	f001 f8e4 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000fee:	2014      	movs	r0, #20
 8000ff0:	f001 f8fd 	bl	80021ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2102      	movs	r1, #2
 8000ff8:	2015      	movs	r0, #21
 8000ffa:	f001 f8dc 	bl	80021b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000ffe:	2015      	movs	r0, #21
 8001000:	f001 f8f5 	bl	80021ee <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001004:	bf00      	nop
 8001006:	3728      	adds	r7, #40	@ 0x28
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40006400 	.word	0x40006400
 8001010:	40021000 	.word	0x40021000
 8001014:	40010c00 	.word	0x40010c00
 8001018:	40010000 	.word	0x40010000

0800101c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b088      	sub	sp, #32
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 0310 	add.w	r3, r7, #16
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4a1c      	ldr	r2, [pc, #112]	@ (80010a8 <HAL_UART_MspInit+0x8c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d131      	bne.n	80010a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800103c:	4b1b      	ldr	r3, [pc, #108]	@ (80010ac <HAL_UART_MspInit+0x90>)
 800103e:	699b      	ldr	r3, [r3, #24]
 8001040:	4a1a      	ldr	r2, [pc, #104]	@ (80010ac <HAL_UART_MspInit+0x90>)
 8001042:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001046:	6193      	str	r3, [r2, #24]
 8001048:	4b18      	ldr	r3, [pc, #96]	@ (80010ac <HAL_UART_MspInit+0x90>)
 800104a:	699b      	ldr	r3, [r3, #24]
 800104c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001054:	4b15      	ldr	r3, [pc, #84]	@ (80010ac <HAL_UART_MspInit+0x90>)
 8001056:	699b      	ldr	r3, [r3, #24]
 8001058:	4a14      	ldr	r2, [pc, #80]	@ (80010ac <HAL_UART_MspInit+0x90>)
 800105a:	f043 0304 	orr.w	r3, r3, #4
 800105e:	6193      	str	r3, [r2, #24]
 8001060:	4b12      	ldr	r3, [pc, #72]	@ (80010ac <HAL_UART_MspInit+0x90>)
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f003 0304 	and.w	r3, r3, #4
 8001068:	60bb      	str	r3, [r7, #8]
 800106a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800106c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001070:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001072:	2302      	movs	r3, #2
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001076:	2303      	movs	r3, #3
 8001078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 0310 	add.w	r3, r7, #16
 800107e:	4619      	mov	r1, r3
 8001080:	480b      	ldr	r0, [pc, #44]	@ (80010b0 <HAL_UART_MspInit+0x94>)
 8001082:	f001 f8d3 	bl	800222c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001086:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800108a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001090:	2300      	movs	r3, #0
 8001092:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 0310 	add.w	r3, r7, #16
 8001098:	4619      	mov	r1, r3
 800109a:	4805      	ldr	r0, [pc, #20]	@ (80010b0 <HAL_UART_MspInit+0x94>)
 800109c:	f001 f8c6 	bl	800222c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80010a0:	bf00      	nop
 80010a2:	3720      	adds	r7, #32
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40013800 	.word	0x40013800
 80010ac:	40021000 	.word	0x40021000
 80010b0:	40010800 	.word	0x40010800

080010b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <NMI_Handler+0x4>

080010bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <HardFault_Handler+0x4>

080010c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <MemManage_Handler+0x4>

080010cc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <BusFault_Handler+0x4>

080010d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <UsageFault_Handler+0x4>

080010dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bc80      	pop	{r7}
 80010fe:	4770      	bx	lr

08001100 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001104:	f000 f8be 	bl	8001284 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	bd80      	pop	{r7, pc}

0800110c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001112:	f000 fd48 	bl	8001ba6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2000007c 	.word	0x2000007c

08001120 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <CAN1_RX1_IRQHandler+0x10>)
 8001126:	f000 fd3e 	bl	8001ba6 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	2000007c 	.word	0x2000007c

08001134 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b086      	sub	sp, #24
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800113c:	4a14      	ldr	r2, [pc, #80]	@ (8001190 <_sbrk+0x5c>)
 800113e:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <_sbrk+0x60>)
 8001140:	1ad3      	subs	r3, r2, r3
 8001142:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001148:	4b13      	ldr	r3, [pc, #76]	@ (8001198 <_sbrk+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d102      	bne.n	8001156 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001150:	4b11      	ldr	r3, [pc, #68]	@ (8001198 <_sbrk+0x64>)
 8001152:	4a12      	ldr	r2, [pc, #72]	@ (800119c <_sbrk+0x68>)
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001156:	4b10      	ldr	r3, [pc, #64]	@ (8001198 <_sbrk+0x64>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	4413      	add	r3, r2
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	429a      	cmp	r2, r3
 8001162:	d207      	bcs.n	8001174 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001164:	f002 f88a 	bl	800327c <__errno>
 8001168:	4603      	mov	r3, r0
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116e:	f04f 33ff 	mov.w	r3, #4294967295
 8001172:	e009      	b.n	8001188 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001174:	4b08      	ldr	r3, [pc, #32]	@ (8001198 <_sbrk+0x64>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800117a:	4b07      	ldr	r3, [pc, #28]	@ (8001198 <_sbrk+0x64>)
 800117c:	681a      	ldr	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4413      	add	r3, r2
 8001182:	4a05      	ldr	r2, [pc, #20]	@ (8001198 <_sbrk+0x64>)
 8001184:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	20005000 	.word	0x20005000
 8001194:	00000400 	.word	0x00000400
 8001198:	200001b4 	.word	0x200001b4
 800119c:	20000308 	.word	0x20000308

080011a0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bc80      	pop	{r7}
 80011aa:	4770      	bx	lr

080011ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011ac:	f7ff fff8 	bl	80011a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011b0:	480b      	ldr	r0, [pc, #44]	@ (80011e0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011b2:	490c      	ldr	r1, [pc, #48]	@ (80011e4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011b4:	4a0c      	ldr	r2, [pc, #48]	@ (80011e8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b8:	e002      	b.n	80011c0 <LoopCopyDataInit>

080011ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011be:	3304      	adds	r3, #4

080011c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c4:	d3f9      	bcc.n	80011ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c6:	4a09      	ldr	r2, [pc, #36]	@ (80011ec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011c8:	4c09      	ldr	r4, [pc, #36]	@ (80011f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011cc:	e001      	b.n	80011d2 <LoopFillZerobss>

080011ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011d0:	3204      	adds	r2, #4

080011d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d4:	d3fb      	bcc.n	80011ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d6:	f002 f857 	bl	8003288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011da:	f7ff f863 	bl	80002a4 <main>
  bx lr
 80011de:	4770      	bx	lr
  ldr r0, =_sdata
 80011e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80011e8:	08003c5c 	.word	0x08003c5c
  ldr r2, =_sbss
 80011ec:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80011f0:	20000304 	.word	0x20000304

080011f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f4:	e7fe      	b.n	80011f4 <ADC1_2_IRQHandler>
	...

080011f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011fc:	4b08      	ldr	r3, [pc, #32]	@ (8001220 <HAL_Init+0x28>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a07      	ldr	r2, [pc, #28]	@ (8001220 <HAL_Init+0x28>)
 8001202:	f043 0310 	orr.w	r3, r3, #16
 8001206:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001208:	2003      	movs	r0, #3
 800120a:	f000 ffc9 	bl	80021a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120e:	200f      	movs	r0, #15
 8001210:	f000 f808 	bl	8001224 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001214:	f7ff fe60 	bl	8000ed8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40022000 	.word	0x40022000

08001224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_InitTick+0x54>)
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4b12      	ldr	r3, [pc, #72]	@ (800127c <HAL_InitTick+0x58>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	4619      	mov	r1, r3
 8001236:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123a:	fbb3 f3f1 	udiv	r3, r3, r1
 800123e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001242:	4618      	mov	r0, r3
 8001244:	f000 ffe5 	bl	8002212 <HAL_SYSTICK_Config>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e00e      	b.n	8001270 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b0f      	cmp	r3, #15
 8001256:	d80a      	bhi.n	800126e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001258:	2200      	movs	r2, #0
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	f04f 30ff 	mov.w	r0, #4294967295
 8001260:	f000 ffa9 	bl	80021b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001264:	4a06      	ldr	r2, [pc, #24]	@ (8001280 <HAL_InitTick+0x5c>)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800126a:	2300      	movs	r3, #0
 800126c:	e000      	b.n	8001270 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	20000004 	.word	0x20000004
 800127c:	2000000c 	.word	0x2000000c
 8001280:	20000008 	.word	0x20000008

08001284 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001288:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_IncTick+0x1c>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	461a      	mov	r2, r3
 800128e:	4b05      	ldr	r3, [pc, #20]	@ (80012a4 <HAL_IncTick+0x20>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4413      	add	r3, r2
 8001294:	4a03      	ldr	r2, [pc, #12]	@ (80012a4 <HAL_IncTick+0x20>)
 8001296:	6013      	str	r3, [r2, #0]
}
 8001298:	bf00      	nop
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr
 80012a0:	2000000c 	.word	0x2000000c
 80012a4:	200001b8 	.word	0x200001b8

080012a8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0
  return uwTick;
 80012ac:	4b02      	ldr	r3, [pc, #8]	@ (80012b8 <HAL_GetTick+0x10>)
 80012ae:	681b      	ldr	r3, [r3, #0]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	200001b8 	.word	0x200001b8

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff fff0 	bl	80012a8 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffe0 	bl	80012a8 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000000c 	.word	0x2000000c

08001304 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d101      	bne.n	8001316 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e0ed      	b.n	80014f2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	f893 3020 	ldrb.w	r3, [r3, #32]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b00      	cmp	r3, #0
 8001320:	d102      	bne.n	8001328 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fe0a 	bl	8000f3c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f042 0201 	orr.w	r2, r2, #1
 8001336:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001338:	f7ff ffb6 	bl	80012a8 <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800133e:	e012      	b.n	8001366 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001340:	f7ff ffb2 	bl	80012a8 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b0a      	cmp	r3, #10
 800134c:	d90b      	bls.n	8001366 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001352:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2205      	movs	r2, #5
 800135e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e0c5      	b.n	80014f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f003 0301 	and.w	r3, r3, #1
 8001370:	2b00      	cmp	r3, #0
 8001372:	d0e5      	beq.n	8001340 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0202 	bic.w	r2, r2, #2
 8001382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001384:	f7ff ff90 	bl	80012a8 <HAL_GetTick>
 8001388:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800138a:	e012      	b.n	80013b2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800138c:	f7ff ff8c 	bl	80012a8 <HAL_GetTick>
 8001390:	4602      	mov	r2, r0
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1ad3      	subs	r3, r2, r3
 8001396:	2b0a      	cmp	r3, #10
 8001398:	d90b      	bls.n	80013b2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2205      	movs	r2, #5
 80013aa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e09f      	b.n	80014f2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1e5      	bne.n	800138c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	7e1b      	ldrb	r3, [r3, #24]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d108      	bne.n	80013da <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	e007      	b.n	80013ea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80013e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	7e5b      	ldrb	r3, [r3, #25]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d108      	bne.n	8001404 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e007      	b.n	8001414 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001412:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	7e9b      	ldrb	r3, [r3, #26]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d108      	bne.n	800142e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681a      	ldr	r2, [r3, #0]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f042 0220 	orr.w	r2, r2, #32
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	e007      	b.n	800143e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f022 0220 	bic.w	r2, r2, #32
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	7edb      	ldrb	r3, [r3, #27]
 8001442:	2b01      	cmp	r3, #1
 8001444:	d108      	bne.n	8001458 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f022 0210 	bic.w	r2, r2, #16
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e007      	b.n	8001468 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f042 0210 	orr.w	r2, r2, #16
 8001466:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	7f1b      	ldrb	r3, [r3, #28]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d108      	bne.n	8001482 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	681a      	ldr	r2, [r3, #0]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f042 0208 	orr.w	r2, r2, #8
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	e007      	b.n	8001492 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 0208 	bic.w	r2, r2, #8
 8001490:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	7f5b      	ldrb	r3, [r3, #29]
 8001496:	2b01      	cmp	r3, #1
 8001498:	d108      	bne.n	80014ac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f042 0204 	orr.w	r2, r2, #4
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	e007      	b.n	80014bc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0204 	bic.w	r2, r2, #4
 80014ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689a      	ldr	r2, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	431a      	orrs	r2, r3
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	691b      	ldr	r3, [r3, #16]
 80014ca:	431a      	orrs	r2, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	695b      	ldr	r3, [r3, #20]
 80014d0:	ea42 0103 	orr.w	r1, r2, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	2200      	movs	r2, #0
 80014e6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2201      	movs	r2, #1
 80014ec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80014f0:	2300      	movs	r3, #0
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80014fa:	b480      	push	{r7}
 80014fc:	b087      	sub	sp, #28
 80014fe:	af00      	add	r7, sp, #0
 8001500:	6078      	str	r0, [r7, #4]
 8001502:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001510:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001512:	7cfb      	ldrb	r3, [r7, #19]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d003      	beq.n	8001520 <HAL_CAN_ConfigFilter+0x26>
 8001518:	7cfb      	ldrb	r3, [r7, #19]
 800151a:	2b02      	cmp	r3, #2
 800151c:	f040 80aa 	bne.w	8001674 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001526:	f043 0201 	orr.w	r2, r3, #1
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	695b      	ldr	r3, [r3, #20]
 8001534:	f003 031f 	and.w	r3, r3, #31
 8001538:	2201      	movs	r2, #1
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	43db      	mvns	r3, r3
 800154a:	401a      	ands	r2, r3
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	69db      	ldr	r3, [r3, #28]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d123      	bne.n	80015a2 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43db      	mvns	r3, r3
 8001564:	401a      	ands	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800157c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	3248      	adds	r2, #72	@ 0x48
 8001582:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001596:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001598:	6979      	ldr	r1, [r7, #20]
 800159a:	3348      	adds	r3, #72	@ 0x48
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d122      	bne.n	80015f0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	431a      	orrs	r2, r3
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80015ca:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	3248      	adds	r2, #72	@ 0x48
 80015d0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80015e4:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80015e6:	6979      	ldr	r1, [r7, #20]
 80015e8:	3348      	adds	r3, #72	@ 0x48
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d109      	bne.n	800160c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	43db      	mvns	r3, r3
 8001602:	401a      	ands	r2, r3
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800160a:	e007      	b.n	800161c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	431a      	orrs	r2, r3
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d109      	bne.n	8001638 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	43db      	mvns	r3, r3
 800162e:	401a      	ands	r2, r3
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001636:	e007      	b.n	8001648 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	431a      	orrs	r2, r3
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	2b01      	cmp	r3, #1
 800164e:	d107      	bne.n	8001660 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	431a      	orrs	r2, r3
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001666:	f023 0201 	bic.w	r2, r3, #1
 800166a:	697b      	ldr	r3, [r7, #20]
 800166c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001670:	2300      	movs	r3, #0
 8001672:	e006      	b.n	8001682 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001678:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
  }
}
 8001682:	4618      	mov	r0, r3
 8001684:	371c      	adds	r7, #28
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr

0800168c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169a:	b2db      	uxtb	r3, r3
 800169c:	2b01      	cmp	r3, #1
 800169e:	d12e      	bne.n	80016fe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f022 0201 	bic.w	r2, r2, #1
 80016b6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80016b8:	f7ff fdf6 	bl	80012a8 <HAL_GetTick>
 80016bc:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016be:	e012      	b.n	80016e6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016c0:	f7ff fdf2 	bl	80012a8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b0a      	cmp	r3, #10
 80016cc:	d90b      	bls.n	80016e6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2205      	movs	r2, #5
 80016de:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e012      	b.n	800170c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 0301 	and.w	r3, r3, #1
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e5      	bne.n	80016c0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80016fa:	2300      	movs	r3, #0
 80016fc:	e006      	b.n	800170c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001702:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
  }
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	@ 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
 8001720:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001728:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001732:	7ffb      	ldrb	r3, [r7, #31]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d003      	beq.n	8001740 <HAL_CAN_AddTxMessage+0x2c>
 8001738:	7ffb      	ldrb	r3, [r7, #31]
 800173a:	2b02      	cmp	r3, #2
 800173c:	f040 80ad 	bne.w	800189a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001740:	69bb      	ldr	r3, [r7, #24]
 8001742:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10a      	bne.n	8001760 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001750:	2b00      	cmp	r3, #0
 8001752:	d105      	bne.n	8001760 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 8095 	beq.w	800188a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	0e1b      	lsrs	r3, r3, #24
 8001764:	f003 0303 	and.w	r3, r3, #3
 8001768:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800176a:	2201      	movs	r2, #1
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	409a      	lsls	r2, r3
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d10d      	bne.n	8001798 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001786:	68f9      	ldr	r1, [r7, #12]
 8001788:	6809      	ldr	r1, [r1, #0]
 800178a:	431a      	orrs	r2, r3
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	3318      	adds	r3, #24
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	440b      	add	r3, r1
 8001794:	601a      	str	r2, [r3, #0]
 8001796:	e00f      	b.n	80017b8 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017a2:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017a8:	68f9      	ldr	r1, [r7, #12]
 80017aa:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80017ac:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	3318      	adds	r3, #24
 80017b2:	011b      	lsls	r3, r3, #4
 80017b4:	440b      	add	r3, r1
 80017b6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	6819      	ldr	r1, [r3, #0]
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	3318      	adds	r3, #24
 80017c4:	011b      	lsls	r3, r3, #4
 80017c6:	440b      	add	r3, r1
 80017c8:	3304      	adds	r3, #4
 80017ca:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	7d1b      	ldrb	r3, [r3, #20]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d111      	bne.n	80017f8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	3318      	adds	r3, #24
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	4413      	add	r3, r2
 80017e0:	3304      	adds	r3, #4
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	6811      	ldr	r1, [r2, #0]
 80017e8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3318      	adds	r3, #24
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	440b      	add	r3, r1
 80017f4:	3304      	adds	r3, #4
 80017f6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3307      	adds	r3, #7
 80017fc:	781b      	ldrb	r3, [r3, #0]
 80017fe:	061a      	lsls	r2, r3, #24
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3306      	adds	r3, #6
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	431a      	orrs	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	3305      	adds	r3, #5
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	021b      	lsls	r3, r3, #8
 8001812:	4313      	orrs	r3, r2
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	3204      	adds	r2, #4
 8001818:	7812      	ldrb	r2, [r2, #0]
 800181a:	4610      	mov	r0, r2
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	6811      	ldr	r1, [r2, #0]
 8001820:	ea43 0200 	orr.w	r2, r3, r0
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	011b      	lsls	r3, r3, #4
 8001828:	440b      	add	r3, r1
 800182a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800182e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	3303      	adds	r3, #3
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	061a      	lsls	r2, r3, #24
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	3302      	adds	r3, #2
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	041b      	lsls	r3, r3, #16
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3301      	adds	r3, #1
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	4313      	orrs	r3, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	7812      	ldrb	r2, [r2, #0]
 8001850:	4610      	mov	r0, r2
 8001852:	68fa      	ldr	r2, [r7, #12]
 8001854:	6811      	ldr	r1, [r2, #0]
 8001856:	ea43 0200 	orr.w	r2, r3, r0
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	440b      	add	r3, r1
 8001860:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001864:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	3318      	adds	r3, #24
 800186e:	011b      	lsls	r3, r3, #4
 8001870:	4413      	add	r3, r2
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	68fa      	ldr	r2, [r7, #12]
 8001876:	6811      	ldr	r1, [r2, #0]
 8001878:	f043 0201 	orr.w	r2, r3, #1
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	3318      	adds	r3, #24
 8001880:	011b      	lsls	r3, r3, #4
 8001882:	440b      	add	r3, r1
 8001884:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	e00e      	b.n	80018a8 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800188e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e006      	b.n	80018a8 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800189e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
  }
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3724      	adds	r7, #36	@ 0x24
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b085      	sub	sp, #20
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80018ba:	2300      	movs	r3, #0
 80018bc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018c4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d002      	beq.n	80018d2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d11d      	bne.n	800190e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d002      	beq.n	80018e6 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	3301      	adds	r3, #1
 80018e4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d002      	beq.n	80018fa <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d002      	beq.n	800190e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3301      	adds	r3, #1
 800190c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800190e:	68fb      	ldr	r3, [r7, #12]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800191a:	b480      	push	{r7}
 800191c:	b087      	sub	sp, #28
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800192e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001930:	7dfb      	ldrb	r3, [r7, #23]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d003      	beq.n	800193e <HAL_CAN_GetRxMessage+0x24>
 8001936:	7dfb      	ldrb	r3, [r7, #23]
 8001938:	2b02      	cmp	r3, #2
 800193a:	f040 8103 	bne.w	8001b44 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d10e      	bne.n	8001962 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	68db      	ldr	r3, [r3, #12]
 800194a:	f003 0303 	and.w	r3, r3, #3
 800194e:	2b00      	cmp	r3, #0
 8001950:	d116      	bne.n	8001980 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001956:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e0f7      	b.n	8001b52 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	691b      	ldr	r3, [r3, #16]
 8001968:	f003 0303 	and.w	r3, r3, #3
 800196c:	2b00      	cmp	r3, #0
 800196e:	d107      	bne.n	8001980 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001974:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800197c:	2301      	movs	r3, #1
 800197e:	e0e8      	b.n	8001b52 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	331b      	adds	r3, #27
 8001988:	011b      	lsls	r3, r3, #4
 800198a:	4413      	add	r3, r2
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0204 	and.w	r2, r3, #4
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d10c      	bne.n	80019b8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	331b      	adds	r3, #27
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4413      	add	r3, r2
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	0d5b      	lsrs	r3, r3, #21
 80019ae:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	e00b      	b.n	80019d0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	331b      	adds	r3, #27
 80019c0:	011b      	lsls	r3, r3, #4
 80019c2:	4413      	add	r3, r2
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	08db      	lsrs	r3, r3, #3
 80019c8:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	331b      	adds	r3, #27
 80019d8:	011b      	lsls	r3, r3, #4
 80019da:	4413      	add	r3, r2
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0202 	and.w	r2, r3, #2
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	331b      	adds	r3, #27
 80019ee:	011b      	lsls	r3, r3, #4
 80019f0:	4413      	add	r3, r2
 80019f2:	3304      	adds	r3, #4
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2208      	movs	r2, #8
 8001a02:	611a      	str	r2, [r3, #16]
 8001a04:	e00b      	b.n	8001a1e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	331b      	adds	r3, #27
 8001a0e:	011b      	lsls	r3, r3, #4
 8001a10:	4413      	add	r3, r2
 8001a12:	3304      	adds	r3, #4
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 020f 	and.w	r2, r3, #15
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	331b      	adds	r3, #27
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	0a1b      	lsrs	r3, r3, #8
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	331b      	adds	r3, #27
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	4413      	add	r3, r2
 8001a42:	3304      	adds	r3, #4
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	0c1b      	lsrs	r3, r3, #16
 8001a48:	b29a      	uxth	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	68bb      	ldr	r3, [r7, #8]
 8001a54:	011b      	lsls	r3, r3, #4
 8001a56:	4413      	add	r3, r2
 8001a58:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0a1a      	lsrs	r2, r3, #8
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0c1a      	lsrs	r2, r3, #16
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	3302      	adds	r3, #2
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	011b      	lsls	r3, r3, #4
 8001aa0:	4413      	add	r3, r2
 8001aa2:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	0e1a      	lsrs	r2, r3, #24
 8001aaa:	683b      	ldr	r3, [r7, #0]
 8001aac:	3303      	adds	r3, #3
 8001aae:	b2d2      	uxtb	r2, r2
 8001ab0:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	3304      	adds	r3, #4
 8001ac6:	b2d2      	uxtb	r2, r2
 8001ac8:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	011b      	lsls	r3, r3, #4
 8001ad2:	4413      	add	r3, r2
 8001ad4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	0a1a      	lsrs	r2, r3, #8
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	3305      	adds	r3, #5
 8001ae0:	b2d2      	uxtb	r2, r2
 8001ae2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	4413      	add	r3, r2
 8001aee:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	0c1a      	lsrs	r2, r3, #16
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	3306      	adds	r3, #6
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	011b      	lsls	r3, r3, #4
 8001b06:	4413      	add	r3, r2
 8001b08:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	0e1a      	lsrs	r2, r3, #24
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	3307      	adds	r3, #7
 8001b14:	b2d2      	uxtb	r2, r2
 8001b16:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d108      	bne.n	8001b30 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f042 0220 	orr.w	r2, r2, #32
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	e007      	b.n	8001b40 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	691a      	ldr	r2, [r3, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0220 	orr.w	r2, r2, #32
 8001b3e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001b40:	2300      	movs	r3, #0
 8001b42:	e006      	b.n	8001b52 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b48:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
  }
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	371c      	adds	r7, #28
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bc80      	pop	{r7}
 8001b5a:	4770      	bx	lr

08001b5c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b6c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b6e:	7bfb      	ldrb	r3, [r7, #15]
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d002      	beq.n	8001b7a <HAL_CAN_ActivateNotification+0x1e>
 8001b74:	7bfb      	ldrb	r3, [r7, #15]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d109      	bne.n	8001b8e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	6959      	ldr	r1, [r3, #20]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	683a      	ldr	r2, [r7, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	e006      	b.n	8001b9c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b9a:	2301      	movs	r3, #1
  }
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3714      	adds	r7, #20
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b08a      	sub	sp, #40	@ 0x28
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	695b      	ldr	r3, [r3, #20]
 8001bb8:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	691b      	ldr	r3, [r3, #16]
 8001bd8:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d07c      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d023      	beq.n	8001c3e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	2201      	movs	r2, #1
 8001bfc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f000 f983 	bl	8001f14 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c0e:	e016      	b.n	8001c3e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	f003 0304 	and.w	r3, r3, #4
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d004      	beq.n	8001c24 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c1c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c20:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c22:	e00c      	b.n	8001c3e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	f003 0308 	and.w	r3, r3, #8
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d004      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c36:	e002      	b.n	8001c3e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f986 	bl	8001f4a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d024      	beq.n	8001c92 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f962 	bl	8001f26 <HAL_CAN_TxMailbox1CompleteCallback>
 8001c62:	e016      	b.n	8001c92 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c76:	e00c      	b.n	8001c92 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d004      	beq.n	8001c8c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c8a:	e002      	b.n	8001c92 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f965 	bl	8001f5c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d024      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ca4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f941 	bl	8001f38 <HAL_CAN_TxMailbox2CompleteCallback>
 8001cb6:	e016      	b.n	8001ce6 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d004      	beq.n	8001ccc <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cca:	e00c      	b.n	8001ce6 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cde:	e002      	b.n	8001ce6 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f944 	bl	8001f6e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ce6:	6a3b      	ldr	r3, [r7, #32]
 8001ce8:	f003 0308 	and.w	r3, r3, #8
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d00c      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f003 0310 	and.w	r3, r3, #16
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d00:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2210      	movs	r2, #16
 8001d08:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d0a:	6a3b      	ldr	r3, [r7, #32]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d00b      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d006      	beq.n	8001d2c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2208      	movs	r2, #8
 8001d24:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f000 f92a 	bl	8001f80 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	f003 0302 	and.w	r3, r3, #2
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d009      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	f003 0303 	and.w	r3, r3, #3
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d002      	beq.n	8001d4a <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f7fe fa25 	bl	8000194 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d4a:	6a3b      	ldr	r3, [r7, #32]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d00c      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001d54:	693b      	ldr	r3, [r7, #16]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d60:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d64:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2210      	movs	r2, #16
 8001d6c:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d6e:	6a3b      	ldr	r3, [r7, #32]
 8001d70:	f003 0320 	and.w	r3, r3, #32
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d00b      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2208      	movs	r2, #8
 8001d88:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f90a 	bl	8001fa4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	f003 0310 	and.w	r3, r3, #16
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d009      	beq.n	8001dae <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	691b      	ldr	r3, [r3, #16]
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001da8:	6878      	ldr	r0, [r7, #4]
 8001daa:	f000 f8f2 	bl	8001f92 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001dae:	6a3b      	ldr	r3, [r7, #32]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d00b      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001db8:	69fb      	ldr	r3, [r7, #28]
 8001dba:	f003 0310 	and.w	r3, r3, #16
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d006      	beq.n	8001dd0 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2210      	movs	r2, #16
 8001dc8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f000 f8f3 	bl	8001fb6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001dd0:	6a3b      	ldr	r3, [r7, #32]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d00b      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	f003 0308 	and.w	r3, r3, #8
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d006      	beq.n	8001df2 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2208      	movs	r2, #8
 8001dea:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f000 f8eb 	bl	8001fc8 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001df2:	6a3b      	ldr	r3, [r7, #32]
 8001df4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d07b      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d072      	beq.n	8001eec <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d008      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e1c:	f043 0301 	orr.w	r3, r3, #1
 8001e20:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e22:	6a3b      	ldr	r3, [r7, #32]
 8001e24:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e38:	f043 0302 	orr.w	r3, r3, #2
 8001e3c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e3e:	6a3b      	ldr	r3, [r7, #32]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d008      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	f043 0304 	orr.w	r3, r3, #4
 8001e58:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d043      	beq.n	8001eec <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d03e      	beq.n	8001eec <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e74:	2b60      	cmp	r3, #96	@ 0x60
 8001e76:	d02b      	beq.n	8001ed0 <HAL_CAN_IRQHandler+0x32a>
 8001e78:	2b60      	cmp	r3, #96	@ 0x60
 8001e7a:	d82e      	bhi.n	8001eda <HAL_CAN_IRQHandler+0x334>
 8001e7c:	2b50      	cmp	r3, #80	@ 0x50
 8001e7e:	d022      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x320>
 8001e80:	2b50      	cmp	r3, #80	@ 0x50
 8001e82:	d82a      	bhi.n	8001eda <HAL_CAN_IRQHandler+0x334>
 8001e84:	2b40      	cmp	r3, #64	@ 0x40
 8001e86:	d019      	beq.n	8001ebc <HAL_CAN_IRQHandler+0x316>
 8001e88:	2b40      	cmp	r3, #64	@ 0x40
 8001e8a:	d826      	bhi.n	8001eda <HAL_CAN_IRQHandler+0x334>
 8001e8c:	2b30      	cmp	r3, #48	@ 0x30
 8001e8e:	d010      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x30c>
 8001e90:	2b30      	cmp	r3, #48	@ 0x30
 8001e92:	d822      	bhi.n	8001eda <HAL_CAN_IRQHandler+0x334>
 8001e94:	2b10      	cmp	r3, #16
 8001e96:	d002      	beq.n	8001e9e <HAL_CAN_IRQHandler+0x2f8>
 8001e98:	2b20      	cmp	r3, #32
 8001e9a:	d005      	beq.n	8001ea8 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e9c:	e01d      	b.n	8001eda <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea0:	f043 0308 	orr.w	r3, r3, #8
 8001ea4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ea6:	e019      	b.n	8001edc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eaa:	f043 0310 	orr.w	r3, r3, #16
 8001eae:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eb0:	e014      	b.n	8001edc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb4:	f043 0320 	orr.w	r3, r3, #32
 8001eb8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001eba:	e00f      	b.n	8001edc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ec2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ec4:	e00a      	b.n	8001edc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001ecc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ece:	e005      	b.n	8001edc <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001ed8:	e000      	b.n	8001edc <HAL_CAN_IRQHandler+0x336>
            break;
 8001eda:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001eea:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2204      	movs	r2, #4
 8001ef2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d008      	beq.n	8001f0c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f00:	431a      	orrs	r2, r3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7fe f9c2 	bl	8000290 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3728      	adds	r7, #40	@ 0x28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}

08001f14 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f1c:	bf00      	nop
 8001f1e:	370c      	adds	r7, #12
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bc80      	pop	{r7}
 8001f24:	4770      	bx	lr

08001f26 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f26:	b480      	push	{r7}
 8001f28:	b083      	sub	sp, #12
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f2e:	bf00      	nop
 8001f30:	370c      	adds	r7, #12
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bc80      	pop	{r7}
 8001f36:	4770      	bx	lr

08001f38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bc80      	pop	{r7}
 8001f48:	4770      	bx	lr

08001f4a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f4a:	b480      	push	{r7}
 8001f4c:	b083      	sub	sp, #12
 8001f4e:	af00      	add	r7, sp, #0
 8001f50:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bc80      	pop	{r7}
 8001f5a:	4770      	bx	lr

08001f5c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f64:	bf00      	nop
 8001f66:	370c      	adds	r7, #12
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bc80      	pop	{r7}
 8001f6c:	4770      	bx	lr

08001f6e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr

08001f80 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f88:	bf00      	nop
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bc80      	pop	{r7}
 8001f90:	4770      	bx	lr

08001f92 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f92:	b480      	push	{r7}
 8001f94:	b083      	sub	sp, #12
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f9a:	bf00      	nop
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bc80      	pop	{r7}
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc80      	pop	{r7}
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001fbe:	bf00      	nop
 8001fc0:	370c      	adds	r7, #12
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr

08001fc8 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b083      	sub	sp, #12
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bc80      	pop	{r7}
 8001fd8:	4770      	bx	lr
	...

08001fdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fec:	4b0c      	ldr	r3, [pc, #48]	@ (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002004:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002008:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800200c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800200e:	4a04      	ldr	r2, [pc, #16]	@ (8002020 <__NVIC_SetPriorityGrouping+0x44>)
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	60d3      	str	r3, [r2, #12]
}
 8002014:	bf00      	nop
 8002016:	3714      	adds	r7, #20
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	e000ed00 	.word	0xe000ed00

08002024 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002024:	b480      	push	{r7}
 8002026:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002028:	4b04      	ldr	r3, [pc, #16]	@ (800203c <__NVIC_GetPriorityGrouping+0x18>)
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	0a1b      	lsrs	r3, r3, #8
 800202e:	f003 0307 	and.w	r3, r3, #7
}
 8002032:	4618      	mov	r0, r3
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	4603      	mov	r3, r0
 8002048:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db0b      	blt.n	800206a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002052:	79fb      	ldrb	r3, [r7, #7]
 8002054:	f003 021f 	and.w	r2, r3, #31
 8002058:	4906      	ldr	r1, [pc, #24]	@ (8002074 <__NVIC_EnableIRQ+0x34>)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	095b      	lsrs	r3, r3, #5
 8002060:	2001      	movs	r0, #1
 8002062:	fa00 f202 	lsl.w	r2, r0, r2
 8002066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	bc80      	pop	{r7}
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100

08002078 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002078:	b480      	push	{r7}
 800207a:	b083      	sub	sp, #12
 800207c:	af00      	add	r7, sp, #0
 800207e:	4603      	mov	r3, r0
 8002080:	6039      	str	r1, [r7, #0]
 8002082:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002088:	2b00      	cmp	r3, #0
 800208a:	db0a      	blt.n	80020a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b2da      	uxtb	r2, r3
 8002090:	490c      	ldr	r1, [pc, #48]	@ (80020c4 <__NVIC_SetPriority+0x4c>)
 8002092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002096:	0112      	lsls	r2, r2, #4
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	440b      	add	r3, r1
 800209c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020a0:	e00a      	b.n	80020b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	b2da      	uxtb	r2, r3
 80020a6:	4908      	ldr	r1, [pc, #32]	@ (80020c8 <__NVIC_SetPriority+0x50>)
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	3b04      	subs	r3, #4
 80020b0:	0112      	lsls	r2, r2, #4
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	440b      	add	r3, r1
 80020b6:	761a      	strb	r2, [r3, #24]
}
 80020b8:	bf00      	nop
 80020ba:	370c      	adds	r7, #12
 80020bc:	46bd      	mov	sp, r7
 80020be:	bc80      	pop	{r7}
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	e000e100 	.word	0xe000e100
 80020c8:	e000ed00 	.word	0xe000ed00

080020cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020cc:	b480      	push	{r7}
 80020ce:	b089      	sub	sp, #36	@ 0x24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	60f8      	str	r0, [r7, #12]
 80020d4:	60b9      	str	r1, [r7, #8]
 80020d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f003 0307 	and.w	r3, r3, #7
 80020de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f1c3 0307 	rsb	r3, r3, #7
 80020e6:	2b04      	cmp	r3, #4
 80020e8:	bf28      	it	cs
 80020ea:	2304      	movcs	r3, #4
 80020ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ee:	69fb      	ldr	r3, [r7, #28]
 80020f0:	3304      	adds	r3, #4
 80020f2:	2b06      	cmp	r3, #6
 80020f4:	d902      	bls.n	80020fc <NVIC_EncodePriority+0x30>
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	3b03      	subs	r3, #3
 80020fa:	e000      	b.n	80020fe <NVIC_EncodePriority+0x32>
 80020fc:	2300      	movs	r3, #0
 80020fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002100:	f04f 32ff 	mov.w	r2, #4294967295
 8002104:	69bb      	ldr	r3, [r7, #24]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43da      	mvns	r2, r3
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	401a      	ands	r2, r3
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002114:	f04f 31ff 	mov.w	r1, #4294967295
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	fa01 f303 	lsl.w	r3, r1, r3
 800211e:	43d9      	mvns	r1, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002124:	4313      	orrs	r3, r2
         );
}
 8002126:	4618      	mov	r0, r3
 8002128:	3724      	adds	r7, #36	@ 0x24
 800212a:	46bd      	mov	sp, r7
 800212c:	bc80      	pop	{r7}
 800212e:	4770      	bx	lr

08002130 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002134:	f3bf 8f4f 	dsb	sy
}
 8002138:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800213a:	4b06      	ldr	r3, [pc, #24]	@ (8002154 <__NVIC_SystemReset+0x24>)
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002142:	4904      	ldr	r1, [pc, #16]	@ (8002154 <__NVIC_SystemReset+0x24>)
 8002144:	4b04      	ldr	r3, [pc, #16]	@ (8002158 <__NVIC_SystemReset+0x28>)
 8002146:	4313      	orrs	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800214a:	f3bf 8f4f 	dsb	sy
}
 800214e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <__NVIC_SystemReset+0x20>
 8002154:	e000ed00 	.word	0xe000ed00
 8002158:	05fa0004 	.word	0x05fa0004

0800215c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b082      	sub	sp, #8
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	3b01      	subs	r3, #1
 8002168:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800216c:	d301      	bcc.n	8002172 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800216e:	2301      	movs	r3, #1
 8002170:	e00f      	b.n	8002192 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002172:	4a0a      	ldr	r2, [pc, #40]	@ (800219c <SysTick_Config+0x40>)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	3b01      	subs	r3, #1
 8002178:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800217a:	210f      	movs	r1, #15
 800217c:	f04f 30ff 	mov.w	r0, #4294967295
 8002180:	f7ff ff7a 	bl	8002078 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002184:	4b05      	ldr	r3, [pc, #20]	@ (800219c <SysTick_Config+0x40>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800218a:	4b04      	ldr	r3, [pc, #16]	@ (800219c <SysTick_Config+0x40>)
 800218c:	2207      	movs	r2, #7
 800218e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002190:	2300      	movs	r3, #0
}
 8002192:	4618      	mov	r0, r3
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	e000e010 	.word	0xe000e010

080021a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7ff ff17 	bl	8001fdc <__NVIC_SetPriorityGrouping>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}

080021b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b086      	sub	sp, #24
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	4603      	mov	r3, r0
 80021be:	60b9      	str	r1, [r7, #8]
 80021c0:	607a      	str	r2, [r7, #4]
 80021c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c8:	f7ff ff2c 	bl	8002024 <__NVIC_GetPriorityGrouping>
 80021cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ce:	687a      	ldr	r2, [r7, #4]
 80021d0:	68b9      	ldr	r1, [r7, #8]
 80021d2:	6978      	ldr	r0, [r7, #20]
 80021d4:	f7ff ff7a 	bl	80020cc <NVIC_EncodePriority>
 80021d8:	4602      	mov	r2, r0
 80021da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021de:	4611      	mov	r1, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f7ff ff49 	bl	8002078 <__NVIC_SetPriority>
}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}

080021ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ee:	b580      	push	{r7, lr}
 80021f0:	b082      	sub	sp, #8
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	4603      	mov	r3, r0
 80021f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7ff ff1f 	bl	8002040 <__NVIC_EnableIRQ>
}
 8002202:	bf00      	nop
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800220e:	f7ff ff8f 	bl	8002130 <__NVIC_SystemReset>

08002212 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002212:	b580      	push	{r7, lr}
 8002214:	b082      	sub	sp, #8
 8002216:	af00      	add	r7, sp, #0
 8002218:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff ff9e 	bl	800215c <SysTick_Config>
 8002220:	4603      	mov	r3, r0
}
 8002222:	4618      	mov	r0, r3
 8002224:	3708      	adds	r7, #8
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
	...

0800222c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800222c:	b480      	push	{r7}
 800222e:	b08b      	sub	sp, #44	@ 0x2c
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002236:	2300      	movs	r3, #0
 8002238:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800223a:	2300      	movs	r3, #0
 800223c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800223e:	e169      	b.n	8002514 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002240:	2201      	movs	r2, #1
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	69fa      	ldr	r2, [r7, #28]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	429a      	cmp	r2, r3
 800225a:	f040 8158 	bne.w	800250e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	4a9a      	ldr	r2, [pc, #616]	@ (80024cc <HAL_GPIO_Init+0x2a0>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d05e      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
 8002268:	4a98      	ldr	r2, [pc, #608]	@ (80024cc <HAL_GPIO_Init+0x2a0>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d875      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 800226e:	4a98      	ldr	r2, [pc, #608]	@ (80024d0 <HAL_GPIO_Init+0x2a4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d058      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
 8002274:	4a96      	ldr	r2, [pc, #600]	@ (80024d0 <HAL_GPIO_Init+0x2a4>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d86f      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 800227a:	4a96      	ldr	r2, [pc, #600]	@ (80024d4 <HAL_GPIO_Init+0x2a8>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d052      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
 8002280:	4a94      	ldr	r2, [pc, #592]	@ (80024d4 <HAL_GPIO_Init+0x2a8>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d869      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 8002286:	4a94      	ldr	r2, [pc, #592]	@ (80024d8 <HAL_GPIO_Init+0x2ac>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d04c      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
 800228c:	4a92      	ldr	r2, [pc, #584]	@ (80024d8 <HAL_GPIO_Init+0x2ac>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d863      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 8002292:	4a92      	ldr	r2, [pc, #584]	@ (80024dc <HAL_GPIO_Init+0x2b0>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d046      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
 8002298:	4a90      	ldr	r2, [pc, #576]	@ (80024dc <HAL_GPIO_Init+0x2b0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d85d      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 800229e:	2b12      	cmp	r3, #18
 80022a0:	d82a      	bhi.n	80022f8 <HAL_GPIO_Init+0xcc>
 80022a2:	2b12      	cmp	r3, #18
 80022a4:	d859      	bhi.n	800235a <HAL_GPIO_Init+0x12e>
 80022a6:	a201      	add	r2, pc, #4	@ (adr r2, 80022ac <HAL_GPIO_Init+0x80>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	08002327 	.word	0x08002327
 80022b0:	08002301 	.word	0x08002301
 80022b4:	08002313 	.word	0x08002313
 80022b8:	08002355 	.word	0x08002355
 80022bc:	0800235b 	.word	0x0800235b
 80022c0:	0800235b 	.word	0x0800235b
 80022c4:	0800235b 	.word	0x0800235b
 80022c8:	0800235b 	.word	0x0800235b
 80022cc:	0800235b 	.word	0x0800235b
 80022d0:	0800235b 	.word	0x0800235b
 80022d4:	0800235b 	.word	0x0800235b
 80022d8:	0800235b 	.word	0x0800235b
 80022dc:	0800235b 	.word	0x0800235b
 80022e0:	0800235b 	.word	0x0800235b
 80022e4:	0800235b 	.word	0x0800235b
 80022e8:	0800235b 	.word	0x0800235b
 80022ec:	0800235b 	.word	0x0800235b
 80022f0:	08002309 	.word	0x08002309
 80022f4:	0800231d 	.word	0x0800231d
 80022f8:	4a79      	ldr	r2, [pc, #484]	@ (80024e0 <HAL_GPIO_Init+0x2b4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d013      	beq.n	8002326 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022fe:	e02c      	b.n	800235a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	623b      	str	r3, [r7, #32]
          break;
 8002306:	e029      	b.n	800235c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	3304      	adds	r3, #4
 800230e:	623b      	str	r3, [r7, #32]
          break;
 8002310:	e024      	b.n	800235c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	3308      	adds	r3, #8
 8002318:	623b      	str	r3, [r7, #32]
          break;
 800231a:	e01f      	b.n	800235c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	330c      	adds	r3, #12
 8002322:	623b      	str	r3, [r7, #32]
          break;
 8002324:	e01a      	b.n	800235c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d102      	bne.n	8002334 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800232e:	2304      	movs	r3, #4
 8002330:	623b      	str	r3, [r7, #32]
          break;
 8002332:	e013      	b.n	800235c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d105      	bne.n	8002348 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800233c:	2308      	movs	r3, #8
 800233e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69fa      	ldr	r2, [r7, #28]
 8002344:	611a      	str	r2, [r3, #16]
          break;
 8002346:	e009      	b.n	800235c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002348:	2308      	movs	r3, #8
 800234a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	69fa      	ldr	r2, [r7, #28]
 8002350:	615a      	str	r2, [r3, #20]
          break;
 8002352:	e003      	b.n	800235c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002354:	2300      	movs	r3, #0
 8002356:	623b      	str	r3, [r7, #32]
          break;
 8002358:	e000      	b.n	800235c <HAL_GPIO_Init+0x130>
          break;
 800235a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2bff      	cmp	r3, #255	@ 0xff
 8002360:	d801      	bhi.n	8002366 <HAL_GPIO_Init+0x13a>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	e001      	b.n	800236a <HAL_GPIO_Init+0x13e>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800236c:	69bb      	ldr	r3, [r7, #24]
 800236e:	2bff      	cmp	r3, #255	@ 0xff
 8002370:	d802      	bhi.n	8002378 <HAL_GPIO_Init+0x14c>
 8002372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	e002      	b.n	800237e <HAL_GPIO_Init+0x152>
 8002378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237a:	3b08      	subs	r3, #8
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	210f      	movs	r1, #15
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	fa01 f303 	lsl.w	r3, r1, r3
 800238c:	43db      	mvns	r3, r3
 800238e:	401a      	ands	r2, r3
 8002390:	6a39      	ldr	r1, [r7, #32]
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	fa01 f303 	lsl.w	r3, r1, r3
 8002398:	431a      	orrs	r2, r3
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 80b1 	beq.w	800250e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80023ac:	4b4d      	ldr	r3, [pc, #308]	@ (80024e4 <HAL_GPIO_Init+0x2b8>)
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	4a4c      	ldr	r2, [pc, #304]	@ (80024e4 <HAL_GPIO_Init+0x2b8>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6193      	str	r3, [r2, #24]
 80023b8:	4b4a      	ldr	r3, [pc, #296]	@ (80024e4 <HAL_GPIO_Init+0x2b8>)
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	60bb      	str	r3, [r7, #8]
 80023c2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80023c4:	4a48      	ldr	r2, [pc, #288]	@ (80024e8 <HAL_GPIO_Init+0x2bc>)
 80023c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c8:	089b      	lsrs	r3, r3, #2
 80023ca:	3302      	adds	r3, #2
 80023cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023d0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80023d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	220f      	movs	r2, #15
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	68fa      	ldr	r2, [r7, #12]
 80023e4:	4013      	ands	r3, r2
 80023e6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4a40      	ldr	r2, [pc, #256]	@ (80024ec <HAL_GPIO_Init+0x2c0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d013      	beq.n	8002418 <HAL_GPIO_Init+0x1ec>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	4a3f      	ldr	r2, [pc, #252]	@ (80024f0 <HAL_GPIO_Init+0x2c4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00d      	beq.n	8002414 <HAL_GPIO_Init+0x1e8>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4a3e      	ldr	r2, [pc, #248]	@ (80024f4 <HAL_GPIO_Init+0x2c8>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d007      	beq.n	8002410 <HAL_GPIO_Init+0x1e4>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4a3d      	ldr	r2, [pc, #244]	@ (80024f8 <HAL_GPIO_Init+0x2cc>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d101      	bne.n	800240c <HAL_GPIO_Init+0x1e0>
 8002408:	2303      	movs	r3, #3
 800240a:	e006      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 800240c:	2304      	movs	r3, #4
 800240e:	e004      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 8002410:	2302      	movs	r3, #2
 8002412:	e002      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_GPIO_Init+0x1ee>
 8002418:	2300      	movs	r3, #0
 800241a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800241c:	f002 0203 	and.w	r2, r2, #3
 8002420:	0092      	lsls	r2, r2, #2
 8002422:	4093      	lsls	r3, r2
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	4313      	orrs	r3, r2
 8002428:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800242a:	492f      	ldr	r1, [pc, #188]	@ (80024e8 <HAL_GPIO_Init+0x2bc>)
 800242c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002444:	4b2d      	ldr	r3, [pc, #180]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	492c      	ldr	r1, [pc, #176]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 800244a:	69bb      	ldr	r3, [r7, #24]
 800244c:	4313      	orrs	r3, r2
 800244e:	608b      	str	r3, [r1, #8]
 8002450:	e006      	b.n	8002460 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002452:	4b2a      	ldr	r3, [pc, #168]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	43db      	mvns	r3, r3
 800245a:	4928      	ldr	r1, [pc, #160]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 800245c:	4013      	ands	r3, r2
 800245e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d006      	beq.n	800247a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800246c:	4b23      	ldr	r3, [pc, #140]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	4922      	ldr	r1, [pc, #136]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	4313      	orrs	r3, r2
 8002476:	60cb      	str	r3, [r1, #12]
 8002478:	e006      	b.n	8002488 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800247a:	4b20      	ldr	r3, [pc, #128]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 800247c:	68da      	ldr	r2, [r3, #12]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	43db      	mvns	r3, r3
 8002482:	491e      	ldr	r1, [pc, #120]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 8002484:	4013      	ands	r3, r2
 8002486:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d006      	beq.n	80024a2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002494:	4b19      	ldr	r3, [pc, #100]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	4918      	ldr	r1, [pc, #96]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	4313      	orrs	r3, r2
 800249e:	604b      	str	r3, [r1, #4]
 80024a0:	e006      	b.n	80024b0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80024a2:	4b16      	ldr	r3, [pc, #88]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	69bb      	ldr	r3, [r7, #24]
 80024a8:	43db      	mvns	r3, r3
 80024aa:	4914      	ldr	r1, [pc, #80]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d021      	beq.n	8002500 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80024bc:	4b0f      	ldr	r3, [pc, #60]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	490e      	ldr	r1, [pc, #56]	@ (80024fc <HAL_GPIO_Init+0x2d0>)
 80024c2:	69bb      	ldr	r3, [r7, #24]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	600b      	str	r3, [r1, #0]
 80024c8:	e021      	b.n	800250e <HAL_GPIO_Init+0x2e2>
 80024ca:	bf00      	nop
 80024cc:	10320000 	.word	0x10320000
 80024d0:	10310000 	.word	0x10310000
 80024d4:	10220000 	.word	0x10220000
 80024d8:	10210000 	.word	0x10210000
 80024dc:	10120000 	.word	0x10120000
 80024e0:	10110000 	.word	0x10110000
 80024e4:	40021000 	.word	0x40021000
 80024e8:	40010000 	.word	0x40010000
 80024ec:	40010800 	.word	0x40010800
 80024f0:	40010c00 	.word	0x40010c00
 80024f4:	40011000 	.word	0x40011000
 80024f8:	40011400 	.word	0x40011400
 80024fc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002500:	4b0b      	ldr	r3, [pc, #44]	@ (8002530 <HAL_GPIO_Init+0x304>)
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	43db      	mvns	r3, r3
 8002508:	4909      	ldr	r1, [pc, #36]	@ (8002530 <HAL_GPIO_Init+0x304>)
 800250a:	4013      	ands	r3, r2
 800250c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	3301      	adds	r3, #1
 8002512:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251a:	fa22 f303 	lsr.w	r3, r2, r3
 800251e:	2b00      	cmp	r3, #0
 8002520:	f47f ae8e 	bne.w	8002240 <HAL_GPIO_Init+0x14>
  }
}
 8002524:	bf00      	nop
 8002526:	bf00      	nop
 8002528:	372c      	adds	r7, #44	@ 0x2c
 800252a:	46bd      	mov	sp, r7
 800252c:	bc80      	pop	{r7}
 800252e:	4770      	bx	lr
 8002530:	40010400 	.word	0x40010400

08002534 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
 800253c:	460b      	mov	r3, r1
 800253e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689a      	ldr	r2, [r3, #8]
 8002544:	887b      	ldrh	r3, [r7, #2]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
 8002550:	e001      	b.n	8002556 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002556:	7bfb      	ldrb	r3, [r7, #15]
}
 8002558:	4618      	mov	r0, r3
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr

08002562 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002562:	b480      	push	{r7}
 8002564:	b083      	sub	sp, #12
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	460b      	mov	r3, r1
 800256c:	807b      	strh	r3, [r7, #2]
 800256e:	4613      	mov	r3, r2
 8002570:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002572:	787b      	ldrb	r3, [r7, #1]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d003      	beq.n	8002580 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002578:	887a      	ldrh	r2, [r7, #2]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800257e:	e003      	b.n	8002588 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002580:	887b      	ldrh	r3, [r7, #2]
 8002582:	041a      	lsls	r2, r3, #16
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	611a      	str	r2, [r3, #16]
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bc80      	pop	{r7}
 8002590:	4770      	bx	lr

08002592 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002592:	b480      	push	{r7}
 8002594:	b085      	sub	sp, #20
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
 800259a:	460b      	mov	r3, r1
 800259c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80025a4:	887a      	ldrh	r2, [r7, #2]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4013      	ands	r3, r2
 80025aa:	041a      	lsls	r2, r3, #16
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	43d9      	mvns	r1, r3
 80025b0:	887b      	ldrh	r3, [r7, #2]
 80025b2:	400b      	ands	r3, r1
 80025b4:	431a      	orrs	r2, r3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	611a      	str	r2, [r3, #16]
}
 80025ba:	bf00      	nop
 80025bc:	3714      	adds	r7, #20
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc80      	pop	{r7}
 80025c2:	4770      	bx	lr

080025c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b086      	sub	sp, #24
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d101      	bne.n	80025d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e272      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f000 8087 	beq.w	80026f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025e4:	4b92      	ldr	r3, [pc, #584]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 030c 	and.w	r3, r3, #12
 80025ec:	2b04      	cmp	r3, #4
 80025ee:	d00c      	beq.n	800260a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b08      	cmp	r3, #8
 80025fa:	d112      	bne.n	8002622 <HAL_RCC_OscConfig+0x5e>
 80025fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002604:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002608:	d10b      	bne.n	8002622 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800260a:	4b89      	ldr	r3, [pc, #548]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d06c      	beq.n	80026f0 <HAL_RCC_OscConfig+0x12c>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d168      	bne.n	80026f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e24c      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800262a:	d106      	bne.n	800263a <HAL_RCC_OscConfig+0x76>
 800262c:	4b80      	ldr	r3, [pc, #512]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a7f      	ldr	r2, [pc, #508]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002636:	6013      	str	r3, [r2, #0]
 8002638:	e02e      	b.n	8002698 <HAL_RCC_OscConfig+0xd4>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10c      	bne.n	800265c <HAL_RCC_OscConfig+0x98>
 8002642:	4b7b      	ldr	r3, [pc, #492]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a7a      	ldr	r2, [pc, #488]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002648:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	4b78      	ldr	r3, [pc, #480]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a77      	ldr	r2, [pc, #476]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002654:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	e01d      	b.n	8002698 <HAL_RCC_OscConfig+0xd4>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002664:	d10c      	bne.n	8002680 <HAL_RCC_OscConfig+0xbc>
 8002666:	4b72      	ldr	r3, [pc, #456]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a71      	ldr	r2, [pc, #452]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 800266c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002670:	6013      	str	r3, [r2, #0]
 8002672:	4b6f      	ldr	r3, [pc, #444]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a6e      	ldr	r2, [pc, #440]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	e00b      	b.n	8002698 <HAL_RCC_OscConfig+0xd4>
 8002680:	4b6b      	ldr	r3, [pc, #428]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a6a      	ldr	r2, [pc, #424]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800268a:	6013      	str	r3, [r2, #0]
 800268c:	4b68      	ldr	r3, [pc, #416]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a67      	ldr	r2, [pc, #412]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002696:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d013      	beq.n	80026c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a0:	f7fe fe02 	bl	80012a8 <HAL_GetTick>
 80026a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026a6:	e008      	b.n	80026ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026a8:	f7fe fdfe 	bl	80012a8 <HAL_GetTick>
 80026ac:	4602      	mov	r2, r0
 80026ae:	693b      	ldr	r3, [r7, #16]
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	2b64      	cmp	r3, #100	@ 0x64
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e200      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0f0      	beq.n	80026a8 <HAL_RCC_OscConfig+0xe4>
 80026c6:	e014      	b.n	80026f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c8:	f7fe fdee 	bl	80012a8 <HAL_GetTick>
 80026cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026d0:	f7fe fdea 	bl	80012a8 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b64      	cmp	r3, #100	@ 0x64
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e1ec      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026e2:	4b53      	ldr	r3, [pc, #332]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1f0      	bne.n	80026d0 <HAL_RCC_OscConfig+0x10c>
 80026ee:	e000      	b.n	80026f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d063      	beq.n	80027c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80026fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 030c 	and.w	r3, r3, #12
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800270a:	4b49      	ldr	r3, [pc, #292]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b08      	cmp	r3, #8
 8002714:	d11c      	bne.n	8002750 <HAL_RCC_OscConfig+0x18c>
 8002716:	4b46      	ldr	r3, [pc, #280]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d116      	bne.n	8002750 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002722:	4b43      	ldr	r3, [pc, #268]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d005      	beq.n	800273a <HAL_RCC_OscConfig+0x176>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	2b01      	cmp	r3, #1
 8002734:	d001      	beq.n	800273a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e1c0      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273a:	4b3d      	ldr	r3, [pc, #244]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	4939      	ldr	r1, [pc, #228]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 800274a:	4313      	orrs	r3, r2
 800274c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800274e:	e03a      	b.n	80027c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	691b      	ldr	r3, [r3, #16]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002758:	4b36      	ldr	r3, [pc, #216]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800275a:	2201      	movs	r2, #1
 800275c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275e:	f7fe fda3 	bl	80012a8 <HAL_GetTick>
 8002762:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002764:	e008      	b.n	8002778 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002766:	f7fe fd9f 	bl	80012a8 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	693b      	ldr	r3, [r7, #16]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	2b02      	cmp	r3, #2
 8002772:	d901      	bls.n	8002778 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002774:	2303      	movs	r3, #3
 8002776:	e1a1      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002778:	4b2d      	ldr	r3, [pc, #180]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	2b00      	cmp	r3, #0
 8002782:	d0f0      	beq.n	8002766 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002784:	4b2a      	ldr	r3, [pc, #168]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	4927      	ldr	r1, [pc, #156]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 8002794:	4313      	orrs	r3, r2
 8002796:	600b      	str	r3, [r1, #0]
 8002798:	e015      	b.n	80027c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800279a:	4b26      	ldr	r3, [pc, #152]	@ (8002834 <HAL_RCC_OscConfig+0x270>)
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027a0:	f7fe fd82 	bl	80012a8 <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027a8:	f7fe fd7e 	bl	80012a8 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e180      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1f0      	bne.n	80027a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d03a      	beq.n	8002848 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d019      	beq.n	800280e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027da:	4b17      	ldr	r3, [pc, #92]	@ (8002838 <HAL_RCC_OscConfig+0x274>)
 80027dc:	2201      	movs	r2, #1
 80027de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e0:	f7fe fd62 	bl	80012a8 <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027e8:	f7fe fd5e 	bl	80012a8 <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e160      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002830 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b00      	cmp	r3, #0
 8002804:	d0f0      	beq.n	80027e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002806:	2001      	movs	r0, #1
 8002808:	f000 face 	bl	8002da8 <RCC_Delay>
 800280c:	e01c      	b.n	8002848 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800280e:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <HAL_RCC_OscConfig+0x274>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002814:	f7fe fd48 	bl	80012a8 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800281a:	e00f      	b.n	800283c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800281c:	f7fe fd44 	bl	80012a8 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d908      	bls.n	800283c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e146      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	42420000 	.word	0x42420000
 8002838:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	4b92      	ldr	r3, [pc, #584]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800283e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1e9      	bne.n	800281c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	f000 80a6 	beq.w	80029a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002856:	2300      	movs	r3, #0
 8002858:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800285a:	4b8b      	ldr	r3, [pc, #556]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800285c:	69db      	ldr	r3, [r3, #28]
 800285e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10d      	bne.n	8002882 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002866:	4b88      	ldr	r3, [pc, #544]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	4a87      	ldr	r2, [pc, #540]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002870:	61d3      	str	r3, [r2, #28]
 8002872:	4b85      	ldr	r3, [pc, #532]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800287a:	60bb      	str	r3, [r7, #8]
 800287c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800287e:	2301      	movs	r3, #1
 8002880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002882:	4b82      	ldr	r3, [pc, #520]	@ (8002a8c <HAL_RCC_OscConfig+0x4c8>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d118      	bne.n	80028c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800288e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a8c <HAL_RCC_OscConfig+0x4c8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a7e      	ldr	r2, [pc, #504]	@ (8002a8c <HAL_RCC_OscConfig+0x4c8>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800289a:	f7fe fd05 	bl	80012a8 <HAL_GetTick>
 800289e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028a0:	e008      	b.n	80028b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028a2:	f7fe fd01 	bl	80012a8 <HAL_GetTick>
 80028a6:	4602      	mov	r2, r0
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	2b64      	cmp	r3, #100	@ 0x64
 80028ae:	d901      	bls.n	80028b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028b0:	2303      	movs	r3, #3
 80028b2:	e103      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028b4:	4b75      	ldr	r3, [pc, #468]	@ (8002a8c <HAL_RCC_OscConfig+0x4c8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d0f0      	beq.n	80028a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d106      	bne.n	80028d6 <HAL_RCC_OscConfig+0x312>
 80028c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028ca:	6a1b      	ldr	r3, [r3, #32]
 80028cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028ce:	f043 0301 	orr.w	r3, r3, #1
 80028d2:	6213      	str	r3, [r2, #32]
 80028d4:	e02d      	b.n	8002932 <HAL_RCC_OscConfig+0x36e>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d10c      	bne.n	80028f8 <HAL_RCC_OscConfig+0x334>
 80028de:	4b6a      	ldr	r3, [pc, #424]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028e0:	6a1b      	ldr	r3, [r3, #32]
 80028e2:	4a69      	ldr	r2, [pc, #420]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028e4:	f023 0301 	bic.w	r3, r3, #1
 80028e8:	6213      	str	r3, [r2, #32]
 80028ea:	4b67      	ldr	r3, [pc, #412]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4a66      	ldr	r2, [pc, #408]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80028f0:	f023 0304 	bic.w	r3, r3, #4
 80028f4:	6213      	str	r3, [r2, #32]
 80028f6:	e01c      	b.n	8002932 <HAL_RCC_OscConfig+0x36e>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	2b05      	cmp	r3, #5
 80028fe:	d10c      	bne.n	800291a <HAL_RCC_OscConfig+0x356>
 8002900:	4b61      	ldr	r3, [pc, #388]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	4a60      	ldr	r2, [pc, #384]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002906:	f043 0304 	orr.w	r3, r3, #4
 800290a:	6213      	str	r3, [r2, #32]
 800290c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4a5d      	ldr	r2, [pc, #372]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	6213      	str	r3, [r2, #32]
 8002918:	e00b      	b.n	8002932 <HAL_RCC_OscConfig+0x36e>
 800291a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	6a1b      	ldr	r3, [r3, #32]
 800291e:	4a5a      	ldr	r2, [pc, #360]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002920:	f023 0301 	bic.w	r3, r3, #1
 8002924:	6213      	str	r3, [r2, #32]
 8002926:	4b58      	ldr	r3, [pc, #352]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4a57      	ldr	r2, [pc, #348]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800292c:	f023 0304 	bic.w	r3, r3, #4
 8002930:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d015      	beq.n	8002966 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800293a:	f7fe fcb5 	bl	80012a8 <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002940:	e00a      	b.n	8002958 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002942:	f7fe fcb1 	bl	80012a8 <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002950:	4293      	cmp	r3, r2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e0b1      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002958:	4b4b      	ldr	r3, [pc, #300]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0ee      	beq.n	8002942 <HAL_RCC_OscConfig+0x37e>
 8002964:	e014      	b.n	8002990 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002966:	f7fe fc9f 	bl	80012a8 <HAL_GetTick>
 800296a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800296c:	e00a      	b.n	8002984 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe fc9b 	bl	80012a8 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	693b      	ldr	r3, [r7, #16]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e09b      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002984:	4b40      	ldr	r3, [pc, #256]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	f003 0302 	and.w	r3, r3, #2
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1ee      	bne.n	800296e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002990:	7dfb      	ldrb	r3, [r7, #23]
 8002992:	2b01      	cmp	r3, #1
 8002994:	d105      	bne.n	80029a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002996:	4b3c      	ldr	r3, [pc, #240]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002998:	69db      	ldr	r3, [r3, #28]
 800299a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	f000 8087 	beq.w	8002aba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029ac:	4b36      	ldr	r3, [pc, #216]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 030c 	and.w	r3, r3, #12
 80029b4:	2b08      	cmp	r3, #8
 80029b6:	d061      	beq.n	8002a7c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	69db      	ldr	r3, [r3, #28]
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d146      	bne.n	8002a4e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029c0:	4b33      	ldr	r3, [pc, #204]	@ (8002a90 <HAL_RCC_OscConfig+0x4cc>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029c6:	f7fe fc6f 	bl	80012a8 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ce:	f7fe fc6b 	bl	80012a8 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e06d      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e0:	4b29      	ldr	r3, [pc, #164]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029f4:	d108      	bne.n	8002a08 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029f6:	4b24      	ldr	r3, [pc, #144]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4921      	ldr	r1, [pc, #132]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a08:	4b1f      	ldr	r3, [pc, #124]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a19      	ldr	r1, [r3, #32]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	491b      	ldr	r1, [pc, #108]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a20:	4b1b      	ldr	r3, [pc, #108]	@ (8002a90 <HAL_RCC_OscConfig+0x4cc>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe fc3f 	bl	80012a8 <HAL_GetTick>
 8002a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a2c:	e008      	b.n	8002a40 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a2e:	f7fe fc3b 	bl	80012a8 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	2b02      	cmp	r3, #2
 8002a3a:	d901      	bls.n	8002a40 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a3c:	2303      	movs	r3, #3
 8002a3e:	e03d      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a40:	4b11      	ldr	r3, [pc, #68]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d0f0      	beq.n	8002a2e <HAL_RCC_OscConfig+0x46a>
 8002a4c:	e035      	b.n	8002aba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a4e:	4b10      	ldr	r3, [pc, #64]	@ (8002a90 <HAL_RCC_OscConfig+0x4cc>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a54:	f7fe fc28 	bl	80012a8 <HAL_GetTick>
 8002a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a5a:	e008      	b.n	8002a6e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a5c:	f7fe fc24 	bl	80012a8 <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d901      	bls.n	8002a6e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a6a:	2303      	movs	r3, #3
 8002a6c:	e026      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6e:	4b06      	ldr	r3, [pc, #24]	@ (8002a88 <HAL_RCC_OscConfig+0x4c4>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d1f0      	bne.n	8002a5c <HAL_RCC_OscConfig+0x498>
 8002a7a:	e01e      	b.n	8002aba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	69db      	ldr	r3, [r3, #28]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e019      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40007000 	.word	0x40007000
 8002a90:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <HAL_RCC_OscConfig+0x500>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000

08002ac8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d101      	bne.n	8002adc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0d0      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002adc:	4b6a      	ldr	r3, [pc, #424]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0307 	and.w	r3, r3, #7
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d910      	bls.n	8002b0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aea:	4b67      	ldr	r3, [pc, #412]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f023 0207 	bic.w	r2, r3, #7
 8002af2:	4965      	ldr	r1, [pc, #404]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002afa:	4b63      	ldr	r3, [pc, #396]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0307 	and.w	r3, r3, #7
 8002b02:	683a      	ldr	r2, [r7, #0]
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d001      	beq.n	8002b0c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	e0b8      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 0302 	and.w	r3, r3, #2
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d020      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b24:	4b59      	ldr	r3, [pc, #356]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	4a58      	ldr	r2, [pc, #352]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002b2e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d005      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b3c:	4b53      	ldr	r3, [pc, #332]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	4a52      	ldr	r2, [pc, #328]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b42:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002b46:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b48:	4b50      	ldr	r3, [pc, #320]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	494d      	ldr	r1, [pc, #308]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d040      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d107      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b6e:	4b47      	ldr	r3, [pc, #284]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d115      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e07f      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d107      	bne.n	8002b96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b86:	4b41      	ldr	r3, [pc, #260]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d109      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e073      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b96:	4b3d      	ldr	r3, [pc, #244]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e06b      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba6:	4b39      	ldr	r3, [pc, #228]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f023 0203 	bic.w	r2, r3, #3
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	4936      	ldr	r1, [pc, #216]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bb8:	f7fe fb76 	bl	80012a8 <HAL_GetTick>
 8002bbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bbe:	e00a      	b.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc0:	f7fe fb72 	bl	80012a8 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d901      	bls.n	8002bd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e053      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bd6:	4b2d      	ldr	r3, [pc, #180]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	f003 020c 	and.w	r2, r3, #12
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d1eb      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002be8:	4b27      	ldr	r3, [pc, #156]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0307 	and.w	r3, r3, #7
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	d210      	bcs.n	8002c18 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bf6:	4b24      	ldr	r3, [pc, #144]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f023 0207 	bic.w	r2, r3, #7
 8002bfe:	4922      	ldr	r1, [pc, #136]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	4313      	orrs	r3, r2
 8002c04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c06:	4b20      	ldr	r3, [pc, #128]	@ (8002c88 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0307 	and.w	r3, r3, #7
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d001      	beq.n	8002c18 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e032      	b.n	8002c7e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d008      	beq.n	8002c36 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c24:	4b19      	ldr	r3, [pc, #100]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	4916      	ldr	r1, [pc, #88]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d009      	beq.n	8002c56 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c42:	4b12      	ldr	r3, [pc, #72]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	00db      	lsls	r3, r3, #3
 8002c50:	490e      	ldr	r1, [pc, #56]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c56:	f000 f821 	bl	8002c9c <HAL_RCC_GetSysClockFreq>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	4b0b      	ldr	r3, [pc, #44]	@ (8002c8c <HAL_RCC_ClockConfig+0x1c4>)
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	091b      	lsrs	r3, r3, #4
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	490a      	ldr	r1, [pc, #40]	@ (8002c90 <HAL_RCC_ClockConfig+0x1c8>)
 8002c68:	5ccb      	ldrb	r3, [r1, r3]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	4a09      	ldr	r2, [pc, #36]	@ (8002c94 <HAL_RCC_ClockConfig+0x1cc>)
 8002c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c72:	4b09      	ldr	r3, [pc, #36]	@ (8002c98 <HAL_RCC_ClockConfig+0x1d0>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4618      	mov	r0, r3
 8002c78:	f7fe fad4 	bl	8001224 <HAL_InitTick>

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40022000 	.word	0x40022000
 8002c8c:	40021000 	.word	0x40021000
 8002c90:	08003bec 	.word	0x08003bec
 8002c94:	20000004 	.word	0x20000004
 8002c98:	20000008 	.word	0x20000008

08002c9c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cb6:	4b1e      	ldr	r3, [pc, #120]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f003 030c 	and.w	r3, r3, #12
 8002cc2:	2b04      	cmp	r3, #4
 8002cc4:	d002      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0x30>
 8002cc6:	2b08      	cmp	r3, #8
 8002cc8:	d003      	beq.n	8002cd2 <HAL_RCC_GetSysClockFreq+0x36>
 8002cca:	e027      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cce:	613b      	str	r3, [r7, #16]
      break;
 8002cd0:	e027      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	0c9b      	lsrs	r3, r3, #18
 8002cd6:	f003 030f 	and.w	r3, r3, #15
 8002cda:	4a17      	ldr	r2, [pc, #92]	@ (8002d38 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d010      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002cea:	4b11      	ldr	r3, [pc, #68]	@ (8002d30 <HAL_RCC_GetSysClockFreq+0x94>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	0c5b      	lsrs	r3, r3, #17
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	4a11      	ldr	r2, [pc, #68]	@ (8002d3c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002cf6:	5cd3      	ldrb	r3, [r2, r3]
 8002cf8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002cfe:	fb03 f202 	mul.w	r2, r3, r2
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d08:	617b      	str	r3, [r7, #20]
 8002d0a:	e004      	b.n	8002d16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002d10:	fb02 f303 	mul.w	r3, r2, r3
 8002d14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	613b      	str	r3, [r7, #16]
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002d1e:	613b      	str	r3, [r7, #16]
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	693b      	ldr	r3, [r7, #16]
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	371c      	adds	r7, #28
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bc80      	pop	{r7}
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	40021000 	.word	0x40021000
 8002d34:	007a1200 	.word	0x007a1200
 8002d38:	08003c04 	.word	0x08003c04
 8002d3c:	08003c14 	.word	0x08003c14
 8002d40:	003d0900 	.word	0x003d0900

08002d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d48:	4b02      	ldr	r3, [pc, #8]	@ (8002d54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bc80      	pop	{r7}
 8002d52:	4770      	bx	lr
 8002d54:	20000004 	.word	0x20000004

08002d58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d5c:	f7ff fff2 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d60:	4602      	mov	r2, r0
 8002d62:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	4903      	ldr	r1, [pc, #12]	@ (8002d7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6e:	5ccb      	ldrb	r3, [r1, r3]
 8002d70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	08003bfc 	.word	0x08003bfc

08002d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d84:	f7ff ffde 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	4b05      	ldr	r3, [pc, #20]	@ (8002da0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	0adb      	lsrs	r3, r3, #11
 8002d90:	f003 0307 	and.w	r3, r3, #7
 8002d94:	4903      	ldr	r1, [pc, #12]	@ (8002da4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d96:	5ccb      	ldrb	r3, [r1, r3]
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000
 8002da4:	08003bfc 	.word	0x08003bfc

08002da8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b085      	sub	sp, #20
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002db0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ddc <RCC_Delay+0x34>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0a      	ldr	r2, [pc, #40]	@ (8002de0 <RCC_Delay+0x38>)
 8002db6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dba:	0a5b      	lsrs	r3, r3, #9
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	fb02 f303 	mul.w	r3, r2, r3
 8002dc2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dc4:	bf00      	nop
  }
  while (Delay --);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1e5a      	subs	r2, r3, #1
 8002dca:	60fa      	str	r2, [r7, #12]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1f9      	bne.n	8002dc4 <RCC_Delay+0x1c>
}
 8002dd0:	bf00      	nop
 8002dd2:	bf00      	nop
 8002dd4:	3714      	adds	r7, #20
 8002dd6:	46bd      	mov	sp, r7
 8002dd8:	bc80      	pop	{r7}
 8002dda:	4770      	bx	lr
 8002ddc:	20000004 	.word	0x20000004
 8002de0:	10624dd3 	.word	0x10624dd3

08002de4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d101      	bne.n	8002df6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e042      	b.n	8002e7c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f7fe f906 	bl	800101c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2224      	movs	r2, #36	@ 0x24
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002e26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f971 	bl	8003110 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	691a      	ldr	r2, [r3, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	695a      	ldr	r2, [r3, #20]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002e5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2200      	movs	r2, #0
 8002e62:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002e7a:	2300      	movs	r3, #0
}
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	@ 0x28
 8002e88:	af02      	add	r7, sp, #8
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	603b      	str	r3, [r7, #0]
 8002e90:	4613      	mov	r3, r2
 8002e92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	2b20      	cmp	r3, #32
 8002ea2:	d175      	bne.n	8002f90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d002      	beq.n	8002eb0 <HAL_UART_Transmit+0x2c>
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d101      	bne.n	8002eb4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e06e      	b.n	8002f92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2221      	movs	r2, #33	@ 0x21
 8002ebe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ec2:	f7fe f9f1 	bl	80012a8 <HAL_GetTick>
 8002ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	88fa      	ldrh	r2, [r7, #6]
 8002ecc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	88fa      	ldrh	r2, [r7, #6]
 8002ed2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002edc:	d108      	bne.n	8002ef0 <HAL_UART_Transmit+0x6c>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d104      	bne.n	8002ef0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	61bb      	str	r3, [r7, #24]
 8002eee:	e003      	b.n	8002ef8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ef8:	e02e      	b.n	8002f58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2200      	movs	r2, #0
 8002f02:	2180      	movs	r1, #128	@ 0x80
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f848 	bl	8002f9a <UART_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d005      	beq.n	8002f1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2220      	movs	r2, #32
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e03a      	b.n	8002f92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10b      	bne.n	8002f3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	461a      	mov	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	3302      	adds	r3, #2
 8002f36:	61bb      	str	r3, [r7, #24]
 8002f38:	e007      	b.n	8002f4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	3301      	adds	r3, #1
 8002f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1cb      	bne.n	8002efa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	2140      	movs	r1, #64	@ 0x40
 8002f6c:	68f8      	ldr	r0, [r7, #12]
 8002f6e:	f000 f814 	bl	8002f9a <UART_WaitOnFlagUntilTimeout>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2220      	movs	r2, #32
 8002f7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f80:	2303      	movs	r3, #3
 8002f82:	e006      	b.n	8002f92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	2220      	movs	r2, #32
 8002f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e000      	b.n	8002f92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f90:	2302      	movs	r3, #2
  }
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}

08002f9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f9a:	b580      	push	{r7, lr}
 8002f9c:	b086      	sub	sp, #24
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	60f8      	str	r0, [r7, #12]
 8002fa2:	60b9      	str	r1, [r7, #8]
 8002fa4:	603b      	str	r3, [r7, #0]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002faa:	e03b      	b.n	8003024 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fac:	6a3b      	ldr	r3, [r7, #32]
 8002fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb2:	d037      	beq.n	8003024 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb4:	f7fe f978 	bl	80012a8 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	6a3a      	ldr	r2, [r7, #32]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d302      	bcc.n	8002fca <UART_WaitOnFlagUntilTimeout+0x30>
 8002fc4:	6a3b      	ldr	r3, [r7, #32]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e03a      	b.n	8003044 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	f003 0304 	and.w	r3, r3, #4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d023      	beq.n	8003024 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	2b80      	cmp	r3, #128	@ 0x80
 8002fe0:	d020      	beq.n	8003024 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	2b40      	cmp	r3, #64	@ 0x40
 8002fe6:	d01d      	beq.n	8003024 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0308 	and.w	r3, r3, #8
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d116      	bne.n	8003024 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	617b      	str	r3, [r7, #20]
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800300c:	68f8      	ldr	r0, [r7, #12]
 800300e:	f000 f81d 	bl	800304c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2208      	movs	r2, #8
 8003016:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e00f      	b.n	8003044 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	4013      	ands	r3, r2
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	429a      	cmp	r2, r3
 8003032:	bf0c      	ite	eq
 8003034:	2301      	moveq	r3, #1
 8003036:	2300      	movne	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	461a      	mov	r2, r3
 800303c:	79fb      	ldrb	r3, [r7, #7]
 800303e:	429a      	cmp	r2, r3
 8003040:	d0b4      	beq.n	8002fac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003042:	2300      	movs	r3, #0
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800304c:	b480      	push	{r7}
 800304e:	b095      	sub	sp, #84	@ 0x54
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	330c      	adds	r3, #12
 800305a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800305c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800305e:	e853 3f00 	ldrex	r3, [r3]
 8003062:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003066:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800306a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	330c      	adds	r3, #12
 8003072:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003074:	643a      	str	r2, [r7, #64]	@ 0x40
 8003076:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003078:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800307a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800307c:	e841 2300 	strex	r3, r2, [r1]
 8003080:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1e5      	bne.n	8003054 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	3314      	adds	r3, #20
 800308e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	6a3b      	ldr	r3, [r7, #32]
 8003092:	e853 3f00 	ldrex	r3, [r3]
 8003096:	61fb      	str	r3, [r7, #28]
   return(result);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f023 0301 	bic.w	r3, r3, #1
 800309e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3314      	adds	r3, #20
 80030a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80030a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80030ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80030b0:	e841 2300 	strex	r3, r2, [r1]
 80030b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80030b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1e5      	bne.n	8003088 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030c0:	2b01      	cmp	r3, #1
 80030c2:	d119      	bne.n	80030f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	e853 3f00 	ldrex	r3, [r3]
 80030d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f023 0310 	bic.w	r3, r3, #16
 80030da:	647b      	str	r3, [r7, #68]	@ 0x44
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	330c      	adds	r3, #12
 80030e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80030e4:	61ba      	str	r2, [r7, #24]
 80030e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e8:	6979      	ldr	r1, [r7, #20]
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	e841 2300 	strex	r3, r2, [r1]
 80030f0:	613b      	str	r3, [r7, #16]
   return(result);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d1e5      	bne.n	80030c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003106:	bf00      	nop
 8003108:	3754      	adds	r7, #84	@ 0x54
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b084      	sub	sp, #16
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68da      	ldr	r2, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689a      	ldr	r2, [r3, #8]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	68db      	ldr	r3, [r3, #12]
 8003146:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800314a:	f023 030c 	bic.w	r3, r3, #12
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	6812      	ldr	r2, [r2, #0]
 8003152:	68b9      	ldr	r1, [r7, #8]
 8003154:	430b      	orrs	r3, r1
 8003156:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695b      	ldr	r3, [r3, #20]
 800315e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	699a      	ldr	r2, [r3, #24]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	430a      	orrs	r2, r1
 800316c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2c      	ldr	r2, [pc, #176]	@ (8003224 <UART_SetConfig+0x114>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d103      	bne.n	8003180 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003178:	f7ff fe02 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	e002      	b.n	8003186 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003180:	f7ff fdea 	bl	8002d58 <HAL_RCC_GetPCLK1Freq>
 8003184:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003186:	68fa      	ldr	r2, [r7, #12]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	009a      	lsls	r2, r3, #2
 8003190:	441a      	add	r2, r3
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	fbb2 f3f3 	udiv	r3, r2, r3
 800319c:	4a22      	ldr	r2, [pc, #136]	@ (8003228 <UART_SetConfig+0x118>)
 800319e:	fba2 2303 	umull	r2, r3, r2, r3
 80031a2:	095b      	lsrs	r3, r3, #5
 80031a4:	0119      	lsls	r1, r3, #4
 80031a6:	68fa      	ldr	r2, [r7, #12]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009a      	lsls	r2, r3, #2
 80031b0:	441a      	add	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031bc:	4b1a      	ldr	r3, [pc, #104]	@ (8003228 <UART_SetConfig+0x118>)
 80031be:	fba3 0302 	umull	r0, r3, r3, r2
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	2064      	movs	r0, #100	@ 0x64
 80031c6:	fb00 f303 	mul.w	r3, r0, r3
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	011b      	lsls	r3, r3, #4
 80031ce:	3332      	adds	r3, #50	@ 0x32
 80031d0:	4a15      	ldr	r2, [pc, #84]	@ (8003228 <UART_SetConfig+0x118>)
 80031d2:	fba2 2303 	umull	r2, r3, r2, r3
 80031d6:	095b      	lsrs	r3, r3, #5
 80031d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80031dc:	4419      	add	r1, r3
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	4613      	mov	r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	009a      	lsls	r2, r3, #2
 80031e8:	441a      	add	r2, r3
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	fbb2 f2f3 	udiv	r2, r2, r3
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <UART_SetConfig+0x118>)
 80031f6:	fba3 0302 	umull	r0, r3, r3, r2
 80031fa:	095b      	lsrs	r3, r3, #5
 80031fc:	2064      	movs	r0, #100	@ 0x64
 80031fe:	fb00 f303 	mul.w	r3, r0, r3
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	3332      	adds	r3, #50	@ 0x32
 8003208:	4a07      	ldr	r2, [pc, #28]	@ (8003228 <UART_SetConfig+0x118>)
 800320a:	fba2 2303 	umull	r2, r3, r2, r3
 800320e:	095b      	lsrs	r3, r3, #5
 8003210:	f003 020f 	and.w	r2, r3, #15
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	440a      	add	r2, r1
 800321a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800321c:	bf00      	nop
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40013800 	.word	0x40013800
 8003228:	51eb851f 	.word	0x51eb851f

0800322c <siprintf>:
 800322c:	b40e      	push	{r1, r2, r3}
 800322e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003232:	b500      	push	{lr}
 8003234:	b09c      	sub	sp, #112	@ 0x70
 8003236:	ab1d      	add	r3, sp, #116	@ 0x74
 8003238:	9002      	str	r0, [sp, #8]
 800323a:	9006      	str	r0, [sp, #24]
 800323c:	9107      	str	r1, [sp, #28]
 800323e:	9104      	str	r1, [sp, #16]
 8003240:	4808      	ldr	r0, [pc, #32]	@ (8003264 <siprintf+0x38>)
 8003242:	4909      	ldr	r1, [pc, #36]	@ (8003268 <siprintf+0x3c>)
 8003244:	f853 2b04 	ldr.w	r2, [r3], #4
 8003248:	9105      	str	r1, [sp, #20]
 800324a:	6800      	ldr	r0, [r0, #0]
 800324c:	a902      	add	r1, sp, #8
 800324e:	9301      	str	r3, [sp, #4]
 8003250:	f000 f992 	bl	8003578 <_svfiprintf_r>
 8003254:	2200      	movs	r2, #0
 8003256:	9b02      	ldr	r3, [sp, #8]
 8003258:	701a      	strb	r2, [r3, #0]
 800325a:	b01c      	add	sp, #112	@ 0x70
 800325c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003260:	b003      	add	sp, #12
 8003262:	4770      	bx	lr
 8003264:	20000010 	.word	0x20000010
 8003268:	ffff0208 	.word	0xffff0208

0800326c <memset>:
 800326c:	4603      	mov	r3, r0
 800326e:	4402      	add	r2, r0
 8003270:	4293      	cmp	r3, r2
 8003272:	d100      	bne.n	8003276 <memset+0xa>
 8003274:	4770      	bx	lr
 8003276:	f803 1b01 	strb.w	r1, [r3], #1
 800327a:	e7f9      	b.n	8003270 <memset+0x4>

0800327c <__errno>:
 800327c:	4b01      	ldr	r3, [pc, #4]	@ (8003284 <__errno+0x8>)
 800327e:	6818      	ldr	r0, [r3, #0]
 8003280:	4770      	bx	lr
 8003282:	bf00      	nop
 8003284:	20000010 	.word	0x20000010

08003288 <__libc_init_array>:
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	2600      	movs	r6, #0
 800328c:	4d0c      	ldr	r5, [pc, #48]	@ (80032c0 <__libc_init_array+0x38>)
 800328e:	4c0d      	ldr	r4, [pc, #52]	@ (80032c4 <__libc_init_array+0x3c>)
 8003290:	1b64      	subs	r4, r4, r5
 8003292:	10a4      	asrs	r4, r4, #2
 8003294:	42a6      	cmp	r6, r4
 8003296:	d109      	bne.n	80032ac <__libc_init_array+0x24>
 8003298:	f000 fc78 	bl	8003b8c <_init>
 800329c:	2600      	movs	r6, #0
 800329e:	4d0a      	ldr	r5, [pc, #40]	@ (80032c8 <__libc_init_array+0x40>)
 80032a0:	4c0a      	ldr	r4, [pc, #40]	@ (80032cc <__libc_init_array+0x44>)
 80032a2:	1b64      	subs	r4, r4, r5
 80032a4:	10a4      	asrs	r4, r4, #2
 80032a6:	42a6      	cmp	r6, r4
 80032a8:	d105      	bne.n	80032b6 <__libc_init_array+0x2e>
 80032aa:	bd70      	pop	{r4, r5, r6, pc}
 80032ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80032b0:	4798      	blx	r3
 80032b2:	3601      	adds	r6, #1
 80032b4:	e7ee      	b.n	8003294 <__libc_init_array+0xc>
 80032b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ba:	4798      	blx	r3
 80032bc:	3601      	adds	r6, #1
 80032be:	e7f2      	b.n	80032a6 <__libc_init_array+0x1e>
 80032c0:	08003c54 	.word	0x08003c54
 80032c4:	08003c54 	.word	0x08003c54
 80032c8:	08003c54 	.word	0x08003c54
 80032cc:	08003c58 	.word	0x08003c58

080032d0 <__retarget_lock_acquire_recursive>:
 80032d0:	4770      	bx	lr

080032d2 <__retarget_lock_release_recursive>:
 80032d2:	4770      	bx	lr

080032d4 <_free_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4605      	mov	r5, r0
 80032d8:	2900      	cmp	r1, #0
 80032da:	d040      	beq.n	800335e <_free_r+0x8a>
 80032dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80032e0:	1f0c      	subs	r4, r1, #4
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	bfb8      	it	lt
 80032e6:	18e4      	addlt	r4, r4, r3
 80032e8:	f000 f8de 	bl	80034a8 <__malloc_lock>
 80032ec:	4a1c      	ldr	r2, [pc, #112]	@ (8003360 <_free_r+0x8c>)
 80032ee:	6813      	ldr	r3, [r2, #0]
 80032f0:	b933      	cbnz	r3, 8003300 <_free_r+0x2c>
 80032f2:	6063      	str	r3, [r4, #4]
 80032f4:	6014      	str	r4, [r2, #0]
 80032f6:	4628      	mov	r0, r5
 80032f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80032fc:	f000 b8da 	b.w	80034b4 <__malloc_unlock>
 8003300:	42a3      	cmp	r3, r4
 8003302:	d908      	bls.n	8003316 <_free_r+0x42>
 8003304:	6820      	ldr	r0, [r4, #0]
 8003306:	1821      	adds	r1, r4, r0
 8003308:	428b      	cmp	r3, r1
 800330a:	bf01      	itttt	eq
 800330c:	6819      	ldreq	r1, [r3, #0]
 800330e:	685b      	ldreq	r3, [r3, #4]
 8003310:	1809      	addeq	r1, r1, r0
 8003312:	6021      	streq	r1, [r4, #0]
 8003314:	e7ed      	b.n	80032f2 <_free_r+0x1e>
 8003316:	461a      	mov	r2, r3
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	b10b      	cbz	r3, 8003320 <_free_r+0x4c>
 800331c:	42a3      	cmp	r3, r4
 800331e:	d9fa      	bls.n	8003316 <_free_r+0x42>
 8003320:	6811      	ldr	r1, [r2, #0]
 8003322:	1850      	adds	r0, r2, r1
 8003324:	42a0      	cmp	r0, r4
 8003326:	d10b      	bne.n	8003340 <_free_r+0x6c>
 8003328:	6820      	ldr	r0, [r4, #0]
 800332a:	4401      	add	r1, r0
 800332c:	1850      	adds	r0, r2, r1
 800332e:	4283      	cmp	r3, r0
 8003330:	6011      	str	r1, [r2, #0]
 8003332:	d1e0      	bne.n	80032f6 <_free_r+0x22>
 8003334:	6818      	ldr	r0, [r3, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	4408      	add	r0, r1
 800333a:	6010      	str	r0, [r2, #0]
 800333c:	6053      	str	r3, [r2, #4]
 800333e:	e7da      	b.n	80032f6 <_free_r+0x22>
 8003340:	d902      	bls.n	8003348 <_free_r+0x74>
 8003342:	230c      	movs	r3, #12
 8003344:	602b      	str	r3, [r5, #0]
 8003346:	e7d6      	b.n	80032f6 <_free_r+0x22>
 8003348:	6820      	ldr	r0, [r4, #0]
 800334a:	1821      	adds	r1, r4, r0
 800334c:	428b      	cmp	r3, r1
 800334e:	bf01      	itttt	eq
 8003350:	6819      	ldreq	r1, [r3, #0]
 8003352:	685b      	ldreq	r3, [r3, #4]
 8003354:	1809      	addeq	r1, r1, r0
 8003356:	6021      	streq	r1, [r4, #0]
 8003358:	6063      	str	r3, [r4, #4]
 800335a:	6054      	str	r4, [r2, #4]
 800335c:	e7cb      	b.n	80032f6 <_free_r+0x22>
 800335e:	bd38      	pop	{r3, r4, r5, pc}
 8003360:	20000300 	.word	0x20000300

08003364 <sbrk_aligned>:
 8003364:	b570      	push	{r4, r5, r6, lr}
 8003366:	4e0f      	ldr	r6, [pc, #60]	@ (80033a4 <sbrk_aligned+0x40>)
 8003368:	460c      	mov	r4, r1
 800336a:	6831      	ldr	r1, [r6, #0]
 800336c:	4605      	mov	r5, r0
 800336e:	b911      	cbnz	r1, 8003376 <sbrk_aligned+0x12>
 8003370:	f000 fbaa 	bl	8003ac8 <_sbrk_r>
 8003374:	6030      	str	r0, [r6, #0]
 8003376:	4621      	mov	r1, r4
 8003378:	4628      	mov	r0, r5
 800337a:	f000 fba5 	bl	8003ac8 <_sbrk_r>
 800337e:	1c43      	adds	r3, r0, #1
 8003380:	d103      	bne.n	800338a <sbrk_aligned+0x26>
 8003382:	f04f 34ff 	mov.w	r4, #4294967295
 8003386:	4620      	mov	r0, r4
 8003388:	bd70      	pop	{r4, r5, r6, pc}
 800338a:	1cc4      	adds	r4, r0, #3
 800338c:	f024 0403 	bic.w	r4, r4, #3
 8003390:	42a0      	cmp	r0, r4
 8003392:	d0f8      	beq.n	8003386 <sbrk_aligned+0x22>
 8003394:	1a21      	subs	r1, r4, r0
 8003396:	4628      	mov	r0, r5
 8003398:	f000 fb96 	bl	8003ac8 <_sbrk_r>
 800339c:	3001      	adds	r0, #1
 800339e:	d1f2      	bne.n	8003386 <sbrk_aligned+0x22>
 80033a0:	e7ef      	b.n	8003382 <sbrk_aligned+0x1e>
 80033a2:	bf00      	nop
 80033a4:	200002fc 	.word	0x200002fc

080033a8 <_malloc_r>:
 80033a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033ac:	1ccd      	adds	r5, r1, #3
 80033ae:	f025 0503 	bic.w	r5, r5, #3
 80033b2:	3508      	adds	r5, #8
 80033b4:	2d0c      	cmp	r5, #12
 80033b6:	bf38      	it	cc
 80033b8:	250c      	movcc	r5, #12
 80033ba:	2d00      	cmp	r5, #0
 80033bc:	4606      	mov	r6, r0
 80033be:	db01      	blt.n	80033c4 <_malloc_r+0x1c>
 80033c0:	42a9      	cmp	r1, r5
 80033c2:	d904      	bls.n	80033ce <_malloc_r+0x26>
 80033c4:	230c      	movs	r3, #12
 80033c6:	6033      	str	r3, [r6, #0]
 80033c8:	2000      	movs	r0, #0
 80033ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033ce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80034a4 <_malloc_r+0xfc>
 80033d2:	f000 f869 	bl	80034a8 <__malloc_lock>
 80033d6:	f8d8 3000 	ldr.w	r3, [r8]
 80033da:	461c      	mov	r4, r3
 80033dc:	bb44      	cbnz	r4, 8003430 <_malloc_r+0x88>
 80033de:	4629      	mov	r1, r5
 80033e0:	4630      	mov	r0, r6
 80033e2:	f7ff ffbf 	bl	8003364 <sbrk_aligned>
 80033e6:	1c43      	adds	r3, r0, #1
 80033e8:	4604      	mov	r4, r0
 80033ea:	d158      	bne.n	800349e <_malloc_r+0xf6>
 80033ec:	f8d8 4000 	ldr.w	r4, [r8]
 80033f0:	4627      	mov	r7, r4
 80033f2:	2f00      	cmp	r7, #0
 80033f4:	d143      	bne.n	800347e <_malloc_r+0xd6>
 80033f6:	2c00      	cmp	r4, #0
 80033f8:	d04b      	beq.n	8003492 <_malloc_r+0xea>
 80033fa:	6823      	ldr	r3, [r4, #0]
 80033fc:	4639      	mov	r1, r7
 80033fe:	4630      	mov	r0, r6
 8003400:	eb04 0903 	add.w	r9, r4, r3
 8003404:	f000 fb60 	bl	8003ac8 <_sbrk_r>
 8003408:	4581      	cmp	r9, r0
 800340a:	d142      	bne.n	8003492 <_malloc_r+0xea>
 800340c:	6821      	ldr	r1, [r4, #0]
 800340e:	4630      	mov	r0, r6
 8003410:	1a6d      	subs	r5, r5, r1
 8003412:	4629      	mov	r1, r5
 8003414:	f7ff ffa6 	bl	8003364 <sbrk_aligned>
 8003418:	3001      	adds	r0, #1
 800341a:	d03a      	beq.n	8003492 <_malloc_r+0xea>
 800341c:	6823      	ldr	r3, [r4, #0]
 800341e:	442b      	add	r3, r5
 8003420:	6023      	str	r3, [r4, #0]
 8003422:	f8d8 3000 	ldr.w	r3, [r8]
 8003426:	685a      	ldr	r2, [r3, #4]
 8003428:	bb62      	cbnz	r2, 8003484 <_malloc_r+0xdc>
 800342a:	f8c8 7000 	str.w	r7, [r8]
 800342e:	e00f      	b.n	8003450 <_malloc_r+0xa8>
 8003430:	6822      	ldr	r2, [r4, #0]
 8003432:	1b52      	subs	r2, r2, r5
 8003434:	d420      	bmi.n	8003478 <_malloc_r+0xd0>
 8003436:	2a0b      	cmp	r2, #11
 8003438:	d917      	bls.n	800346a <_malloc_r+0xc2>
 800343a:	1961      	adds	r1, r4, r5
 800343c:	42a3      	cmp	r3, r4
 800343e:	6025      	str	r5, [r4, #0]
 8003440:	bf18      	it	ne
 8003442:	6059      	strne	r1, [r3, #4]
 8003444:	6863      	ldr	r3, [r4, #4]
 8003446:	bf08      	it	eq
 8003448:	f8c8 1000 	streq.w	r1, [r8]
 800344c:	5162      	str	r2, [r4, r5]
 800344e:	604b      	str	r3, [r1, #4]
 8003450:	4630      	mov	r0, r6
 8003452:	f000 f82f 	bl	80034b4 <__malloc_unlock>
 8003456:	f104 000b 	add.w	r0, r4, #11
 800345a:	1d23      	adds	r3, r4, #4
 800345c:	f020 0007 	bic.w	r0, r0, #7
 8003460:	1ac2      	subs	r2, r0, r3
 8003462:	bf1c      	itt	ne
 8003464:	1a1b      	subne	r3, r3, r0
 8003466:	50a3      	strne	r3, [r4, r2]
 8003468:	e7af      	b.n	80033ca <_malloc_r+0x22>
 800346a:	6862      	ldr	r2, [r4, #4]
 800346c:	42a3      	cmp	r3, r4
 800346e:	bf0c      	ite	eq
 8003470:	f8c8 2000 	streq.w	r2, [r8]
 8003474:	605a      	strne	r2, [r3, #4]
 8003476:	e7eb      	b.n	8003450 <_malloc_r+0xa8>
 8003478:	4623      	mov	r3, r4
 800347a:	6864      	ldr	r4, [r4, #4]
 800347c:	e7ae      	b.n	80033dc <_malloc_r+0x34>
 800347e:	463c      	mov	r4, r7
 8003480:	687f      	ldr	r7, [r7, #4]
 8003482:	e7b6      	b.n	80033f2 <_malloc_r+0x4a>
 8003484:	461a      	mov	r2, r3
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	42a3      	cmp	r3, r4
 800348a:	d1fb      	bne.n	8003484 <_malloc_r+0xdc>
 800348c:	2300      	movs	r3, #0
 800348e:	6053      	str	r3, [r2, #4]
 8003490:	e7de      	b.n	8003450 <_malloc_r+0xa8>
 8003492:	230c      	movs	r3, #12
 8003494:	4630      	mov	r0, r6
 8003496:	6033      	str	r3, [r6, #0]
 8003498:	f000 f80c 	bl	80034b4 <__malloc_unlock>
 800349c:	e794      	b.n	80033c8 <_malloc_r+0x20>
 800349e:	6005      	str	r5, [r0, #0]
 80034a0:	e7d6      	b.n	8003450 <_malloc_r+0xa8>
 80034a2:	bf00      	nop
 80034a4:	20000300 	.word	0x20000300

080034a8 <__malloc_lock>:
 80034a8:	4801      	ldr	r0, [pc, #4]	@ (80034b0 <__malloc_lock+0x8>)
 80034aa:	f7ff bf11 	b.w	80032d0 <__retarget_lock_acquire_recursive>
 80034ae:	bf00      	nop
 80034b0:	200002f8 	.word	0x200002f8

080034b4 <__malloc_unlock>:
 80034b4:	4801      	ldr	r0, [pc, #4]	@ (80034bc <__malloc_unlock+0x8>)
 80034b6:	f7ff bf0c 	b.w	80032d2 <__retarget_lock_release_recursive>
 80034ba:	bf00      	nop
 80034bc:	200002f8 	.word	0x200002f8

080034c0 <__ssputs_r>:
 80034c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034c4:	461f      	mov	r7, r3
 80034c6:	688e      	ldr	r6, [r1, #8]
 80034c8:	4682      	mov	sl, r0
 80034ca:	42be      	cmp	r6, r7
 80034cc:	460c      	mov	r4, r1
 80034ce:	4690      	mov	r8, r2
 80034d0:	680b      	ldr	r3, [r1, #0]
 80034d2:	d82d      	bhi.n	8003530 <__ssputs_r+0x70>
 80034d4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80034d8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80034dc:	d026      	beq.n	800352c <__ssputs_r+0x6c>
 80034de:	6965      	ldr	r5, [r4, #20]
 80034e0:	6909      	ldr	r1, [r1, #16]
 80034e2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80034e6:	eba3 0901 	sub.w	r9, r3, r1
 80034ea:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80034ee:	1c7b      	adds	r3, r7, #1
 80034f0:	444b      	add	r3, r9
 80034f2:	106d      	asrs	r5, r5, #1
 80034f4:	429d      	cmp	r5, r3
 80034f6:	bf38      	it	cc
 80034f8:	461d      	movcc	r5, r3
 80034fa:	0553      	lsls	r3, r2, #21
 80034fc:	d527      	bpl.n	800354e <__ssputs_r+0x8e>
 80034fe:	4629      	mov	r1, r5
 8003500:	f7ff ff52 	bl	80033a8 <_malloc_r>
 8003504:	4606      	mov	r6, r0
 8003506:	b360      	cbz	r0, 8003562 <__ssputs_r+0xa2>
 8003508:	464a      	mov	r2, r9
 800350a:	6921      	ldr	r1, [r4, #16]
 800350c:	f000 fafa 	bl	8003b04 <memcpy>
 8003510:	89a3      	ldrh	r3, [r4, #12]
 8003512:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003516:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800351a:	81a3      	strh	r3, [r4, #12]
 800351c:	6126      	str	r6, [r4, #16]
 800351e:	444e      	add	r6, r9
 8003520:	6026      	str	r6, [r4, #0]
 8003522:	463e      	mov	r6, r7
 8003524:	6165      	str	r5, [r4, #20]
 8003526:	eba5 0509 	sub.w	r5, r5, r9
 800352a:	60a5      	str	r5, [r4, #8]
 800352c:	42be      	cmp	r6, r7
 800352e:	d900      	bls.n	8003532 <__ssputs_r+0x72>
 8003530:	463e      	mov	r6, r7
 8003532:	4632      	mov	r2, r6
 8003534:	4641      	mov	r1, r8
 8003536:	6820      	ldr	r0, [r4, #0]
 8003538:	f000 faac 	bl	8003a94 <memmove>
 800353c:	2000      	movs	r0, #0
 800353e:	68a3      	ldr	r3, [r4, #8]
 8003540:	1b9b      	subs	r3, r3, r6
 8003542:	60a3      	str	r3, [r4, #8]
 8003544:	6823      	ldr	r3, [r4, #0]
 8003546:	4433      	add	r3, r6
 8003548:	6023      	str	r3, [r4, #0]
 800354a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800354e:	462a      	mov	r2, r5
 8003550:	f000 fae6 	bl	8003b20 <_realloc_r>
 8003554:	4606      	mov	r6, r0
 8003556:	2800      	cmp	r0, #0
 8003558:	d1e0      	bne.n	800351c <__ssputs_r+0x5c>
 800355a:	4650      	mov	r0, sl
 800355c:	6921      	ldr	r1, [r4, #16]
 800355e:	f7ff feb9 	bl	80032d4 <_free_r>
 8003562:	230c      	movs	r3, #12
 8003564:	f8ca 3000 	str.w	r3, [sl]
 8003568:	89a3      	ldrh	r3, [r4, #12]
 800356a:	f04f 30ff 	mov.w	r0, #4294967295
 800356e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003572:	81a3      	strh	r3, [r4, #12]
 8003574:	e7e9      	b.n	800354a <__ssputs_r+0x8a>
	...

08003578 <_svfiprintf_r>:
 8003578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800357c:	4698      	mov	r8, r3
 800357e:	898b      	ldrh	r3, [r1, #12]
 8003580:	4607      	mov	r7, r0
 8003582:	061b      	lsls	r3, r3, #24
 8003584:	460d      	mov	r5, r1
 8003586:	4614      	mov	r4, r2
 8003588:	b09d      	sub	sp, #116	@ 0x74
 800358a:	d510      	bpl.n	80035ae <_svfiprintf_r+0x36>
 800358c:	690b      	ldr	r3, [r1, #16]
 800358e:	b973      	cbnz	r3, 80035ae <_svfiprintf_r+0x36>
 8003590:	2140      	movs	r1, #64	@ 0x40
 8003592:	f7ff ff09 	bl	80033a8 <_malloc_r>
 8003596:	6028      	str	r0, [r5, #0]
 8003598:	6128      	str	r0, [r5, #16]
 800359a:	b930      	cbnz	r0, 80035aa <_svfiprintf_r+0x32>
 800359c:	230c      	movs	r3, #12
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	f04f 30ff 	mov.w	r0, #4294967295
 80035a4:	b01d      	add	sp, #116	@ 0x74
 80035a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035aa:	2340      	movs	r3, #64	@ 0x40
 80035ac:	616b      	str	r3, [r5, #20]
 80035ae:	2300      	movs	r3, #0
 80035b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80035b2:	2320      	movs	r3, #32
 80035b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80035b8:	2330      	movs	r3, #48	@ 0x30
 80035ba:	f04f 0901 	mov.w	r9, #1
 80035be:	f8cd 800c 	str.w	r8, [sp, #12]
 80035c2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800375c <_svfiprintf_r+0x1e4>
 80035c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80035ca:	4623      	mov	r3, r4
 80035cc:	469a      	mov	sl, r3
 80035ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 80035d2:	b10a      	cbz	r2, 80035d8 <_svfiprintf_r+0x60>
 80035d4:	2a25      	cmp	r2, #37	@ 0x25
 80035d6:	d1f9      	bne.n	80035cc <_svfiprintf_r+0x54>
 80035d8:	ebba 0b04 	subs.w	fp, sl, r4
 80035dc:	d00b      	beq.n	80035f6 <_svfiprintf_r+0x7e>
 80035de:	465b      	mov	r3, fp
 80035e0:	4622      	mov	r2, r4
 80035e2:	4629      	mov	r1, r5
 80035e4:	4638      	mov	r0, r7
 80035e6:	f7ff ff6b 	bl	80034c0 <__ssputs_r>
 80035ea:	3001      	adds	r0, #1
 80035ec:	f000 80a7 	beq.w	800373e <_svfiprintf_r+0x1c6>
 80035f0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80035f2:	445a      	add	r2, fp
 80035f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80035f6:	f89a 3000 	ldrb.w	r3, [sl]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 809f 	beq.w	800373e <_svfiprintf_r+0x1c6>
 8003600:	2300      	movs	r3, #0
 8003602:	f04f 32ff 	mov.w	r2, #4294967295
 8003606:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800360a:	f10a 0a01 	add.w	sl, sl, #1
 800360e:	9304      	str	r3, [sp, #16]
 8003610:	9307      	str	r3, [sp, #28]
 8003612:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003616:	931a      	str	r3, [sp, #104]	@ 0x68
 8003618:	4654      	mov	r4, sl
 800361a:	2205      	movs	r2, #5
 800361c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003620:	484e      	ldr	r0, [pc, #312]	@ (800375c <_svfiprintf_r+0x1e4>)
 8003622:	f000 fa61 	bl	8003ae8 <memchr>
 8003626:	9a04      	ldr	r2, [sp, #16]
 8003628:	b9d8      	cbnz	r0, 8003662 <_svfiprintf_r+0xea>
 800362a:	06d0      	lsls	r0, r2, #27
 800362c:	bf44      	itt	mi
 800362e:	2320      	movmi	r3, #32
 8003630:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003634:	0711      	lsls	r1, r2, #28
 8003636:	bf44      	itt	mi
 8003638:	232b      	movmi	r3, #43	@ 0x2b
 800363a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800363e:	f89a 3000 	ldrb.w	r3, [sl]
 8003642:	2b2a      	cmp	r3, #42	@ 0x2a
 8003644:	d015      	beq.n	8003672 <_svfiprintf_r+0xfa>
 8003646:	4654      	mov	r4, sl
 8003648:	2000      	movs	r0, #0
 800364a:	f04f 0c0a 	mov.w	ip, #10
 800364e:	9a07      	ldr	r2, [sp, #28]
 8003650:	4621      	mov	r1, r4
 8003652:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003656:	3b30      	subs	r3, #48	@ 0x30
 8003658:	2b09      	cmp	r3, #9
 800365a:	d94b      	bls.n	80036f4 <_svfiprintf_r+0x17c>
 800365c:	b1b0      	cbz	r0, 800368c <_svfiprintf_r+0x114>
 800365e:	9207      	str	r2, [sp, #28]
 8003660:	e014      	b.n	800368c <_svfiprintf_r+0x114>
 8003662:	eba0 0308 	sub.w	r3, r0, r8
 8003666:	fa09 f303 	lsl.w	r3, r9, r3
 800366a:	4313      	orrs	r3, r2
 800366c:	46a2      	mov	sl, r4
 800366e:	9304      	str	r3, [sp, #16]
 8003670:	e7d2      	b.n	8003618 <_svfiprintf_r+0xa0>
 8003672:	9b03      	ldr	r3, [sp, #12]
 8003674:	1d19      	adds	r1, r3, #4
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	9103      	str	r1, [sp, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	bfbb      	ittet	lt
 800367e:	425b      	neglt	r3, r3
 8003680:	f042 0202 	orrlt.w	r2, r2, #2
 8003684:	9307      	strge	r3, [sp, #28]
 8003686:	9307      	strlt	r3, [sp, #28]
 8003688:	bfb8      	it	lt
 800368a:	9204      	strlt	r2, [sp, #16]
 800368c:	7823      	ldrb	r3, [r4, #0]
 800368e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003690:	d10a      	bne.n	80036a8 <_svfiprintf_r+0x130>
 8003692:	7863      	ldrb	r3, [r4, #1]
 8003694:	2b2a      	cmp	r3, #42	@ 0x2a
 8003696:	d132      	bne.n	80036fe <_svfiprintf_r+0x186>
 8003698:	9b03      	ldr	r3, [sp, #12]
 800369a:	3402      	adds	r4, #2
 800369c:	1d1a      	adds	r2, r3, #4
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	9203      	str	r2, [sp, #12]
 80036a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80036a6:	9305      	str	r3, [sp, #20]
 80036a8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003760 <_svfiprintf_r+0x1e8>
 80036ac:	2203      	movs	r2, #3
 80036ae:	4650      	mov	r0, sl
 80036b0:	7821      	ldrb	r1, [r4, #0]
 80036b2:	f000 fa19 	bl	8003ae8 <memchr>
 80036b6:	b138      	cbz	r0, 80036c8 <_svfiprintf_r+0x150>
 80036b8:	2240      	movs	r2, #64	@ 0x40
 80036ba:	9b04      	ldr	r3, [sp, #16]
 80036bc:	eba0 000a 	sub.w	r0, r0, sl
 80036c0:	4082      	lsls	r2, r0
 80036c2:	4313      	orrs	r3, r2
 80036c4:	3401      	adds	r4, #1
 80036c6:	9304      	str	r3, [sp, #16]
 80036c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036cc:	2206      	movs	r2, #6
 80036ce:	4825      	ldr	r0, [pc, #148]	@ (8003764 <_svfiprintf_r+0x1ec>)
 80036d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80036d4:	f000 fa08 	bl	8003ae8 <memchr>
 80036d8:	2800      	cmp	r0, #0
 80036da:	d036      	beq.n	800374a <_svfiprintf_r+0x1d2>
 80036dc:	4b22      	ldr	r3, [pc, #136]	@ (8003768 <_svfiprintf_r+0x1f0>)
 80036de:	bb1b      	cbnz	r3, 8003728 <_svfiprintf_r+0x1b0>
 80036e0:	9b03      	ldr	r3, [sp, #12]
 80036e2:	3307      	adds	r3, #7
 80036e4:	f023 0307 	bic.w	r3, r3, #7
 80036e8:	3308      	adds	r3, #8
 80036ea:	9303      	str	r3, [sp, #12]
 80036ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80036ee:	4433      	add	r3, r6
 80036f0:	9309      	str	r3, [sp, #36]	@ 0x24
 80036f2:	e76a      	b.n	80035ca <_svfiprintf_r+0x52>
 80036f4:	460c      	mov	r4, r1
 80036f6:	2001      	movs	r0, #1
 80036f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80036fc:	e7a8      	b.n	8003650 <_svfiprintf_r+0xd8>
 80036fe:	2300      	movs	r3, #0
 8003700:	f04f 0c0a 	mov.w	ip, #10
 8003704:	4619      	mov	r1, r3
 8003706:	3401      	adds	r4, #1
 8003708:	9305      	str	r3, [sp, #20]
 800370a:	4620      	mov	r0, r4
 800370c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003710:	3a30      	subs	r2, #48	@ 0x30
 8003712:	2a09      	cmp	r2, #9
 8003714:	d903      	bls.n	800371e <_svfiprintf_r+0x1a6>
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0c6      	beq.n	80036a8 <_svfiprintf_r+0x130>
 800371a:	9105      	str	r1, [sp, #20]
 800371c:	e7c4      	b.n	80036a8 <_svfiprintf_r+0x130>
 800371e:	4604      	mov	r4, r0
 8003720:	2301      	movs	r3, #1
 8003722:	fb0c 2101 	mla	r1, ip, r1, r2
 8003726:	e7f0      	b.n	800370a <_svfiprintf_r+0x192>
 8003728:	ab03      	add	r3, sp, #12
 800372a:	9300      	str	r3, [sp, #0]
 800372c:	462a      	mov	r2, r5
 800372e:	4638      	mov	r0, r7
 8003730:	4b0e      	ldr	r3, [pc, #56]	@ (800376c <_svfiprintf_r+0x1f4>)
 8003732:	a904      	add	r1, sp, #16
 8003734:	f3af 8000 	nop.w
 8003738:	1c42      	adds	r2, r0, #1
 800373a:	4606      	mov	r6, r0
 800373c:	d1d6      	bne.n	80036ec <_svfiprintf_r+0x174>
 800373e:	89ab      	ldrh	r3, [r5, #12]
 8003740:	065b      	lsls	r3, r3, #25
 8003742:	f53f af2d 	bmi.w	80035a0 <_svfiprintf_r+0x28>
 8003746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003748:	e72c      	b.n	80035a4 <_svfiprintf_r+0x2c>
 800374a:	ab03      	add	r3, sp, #12
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	462a      	mov	r2, r5
 8003750:	4638      	mov	r0, r7
 8003752:	4b06      	ldr	r3, [pc, #24]	@ (800376c <_svfiprintf_r+0x1f4>)
 8003754:	a904      	add	r1, sp, #16
 8003756:	f000 f87d 	bl	8003854 <_printf_i>
 800375a:	e7ed      	b.n	8003738 <_svfiprintf_r+0x1c0>
 800375c:	08003c16 	.word	0x08003c16
 8003760:	08003c1c 	.word	0x08003c1c
 8003764:	08003c20 	.word	0x08003c20
 8003768:	00000000 	.word	0x00000000
 800376c:	080034c1 	.word	0x080034c1

08003770 <_printf_common>:
 8003770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003774:	4616      	mov	r6, r2
 8003776:	4698      	mov	r8, r3
 8003778:	688a      	ldr	r2, [r1, #8]
 800377a:	690b      	ldr	r3, [r1, #16]
 800377c:	4607      	mov	r7, r0
 800377e:	4293      	cmp	r3, r2
 8003780:	bfb8      	it	lt
 8003782:	4613      	movlt	r3, r2
 8003784:	6033      	str	r3, [r6, #0]
 8003786:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800378a:	460c      	mov	r4, r1
 800378c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003790:	b10a      	cbz	r2, 8003796 <_printf_common+0x26>
 8003792:	3301      	adds	r3, #1
 8003794:	6033      	str	r3, [r6, #0]
 8003796:	6823      	ldr	r3, [r4, #0]
 8003798:	0699      	lsls	r1, r3, #26
 800379a:	bf42      	ittt	mi
 800379c:	6833      	ldrmi	r3, [r6, #0]
 800379e:	3302      	addmi	r3, #2
 80037a0:	6033      	strmi	r3, [r6, #0]
 80037a2:	6825      	ldr	r5, [r4, #0]
 80037a4:	f015 0506 	ands.w	r5, r5, #6
 80037a8:	d106      	bne.n	80037b8 <_printf_common+0x48>
 80037aa:	f104 0a19 	add.w	sl, r4, #25
 80037ae:	68e3      	ldr	r3, [r4, #12]
 80037b0:	6832      	ldr	r2, [r6, #0]
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	42ab      	cmp	r3, r5
 80037b6:	dc2b      	bgt.n	8003810 <_printf_common+0xa0>
 80037b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80037bc:	6822      	ldr	r2, [r4, #0]
 80037be:	3b00      	subs	r3, #0
 80037c0:	bf18      	it	ne
 80037c2:	2301      	movne	r3, #1
 80037c4:	0692      	lsls	r2, r2, #26
 80037c6:	d430      	bmi.n	800382a <_printf_common+0xba>
 80037c8:	4641      	mov	r1, r8
 80037ca:	4638      	mov	r0, r7
 80037cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80037d0:	47c8      	blx	r9
 80037d2:	3001      	adds	r0, #1
 80037d4:	d023      	beq.n	800381e <_printf_common+0xae>
 80037d6:	6823      	ldr	r3, [r4, #0]
 80037d8:	6922      	ldr	r2, [r4, #16]
 80037da:	f003 0306 	and.w	r3, r3, #6
 80037de:	2b04      	cmp	r3, #4
 80037e0:	bf14      	ite	ne
 80037e2:	2500      	movne	r5, #0
 80037e4:	6833      	ldreq	r3, [r6, #0]
 80037e6:	f04f 0600 	mov.w	r6, #0
 80037ea:	bf08      	it	eq
 80037ec:	68e5      	ldreq	r5, [r4, #12]
 80037ee:	f104 041a 	add.w	r4, r4, #26
 80037f2:	bf08      	it	eq
 80037f4:	1aed      	subeq	r5, r5, r3
 80037f6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80037fa:	bf08      	it	eq
 80037fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003800:	4293      	cmp	r3, r2
 8003802:	bfc4      	itt	gt
 8003804:	1a9b      	subgt	r3, r3, r2
 8003806:	18ed      	addgt	r5, r5, r3
 8003808:	42b5      	cmp	r5, r6
 800380a:	d11a      	bne.n	8003842 <_printf_common+0xd2>
 800380c:	2000      	movs	r0, #0
 800380e:	e008      	b.n	8003822 <_printf_common+0xb2>
 8003810:	2301      	movs	r3, #1
 8003812:	4652      	mov	r2, sl
 8003814:	4641      	mov	r1, r8
 8003816:	4638      	mov	r0, r7
 8003818:	47c8      	blx	r9
 800381a:	3001      	adds	r0, #1
 800381c:	d103      	bne.n	8003826 <_printf_common+0xb6>
 800381e:	f04f 30ff 	mov.w	r0, #4294967295
 8003822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003826:	3501      	adds	r5, #1
 8003828:	e7c1      	b.n	80037ae <_printf_common+0x3e>
 800382a:	2030      	movs	r0, #48	@ 0x30
 800382c:	18e1      	adds	r1, r4, r3
 800382e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003838:	4422      	add	r2, r4
 800383a:	3302      	adds	r3, #2
 800383c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003840:	e7c2      	b.n	80037c8 <_printf_common+0x58>
 8003842:	2301      	movs	r3, #1
 8003844:	4622      	mov	r2, r4
 8003846:	4641      	mov	r1, r8
 8003848:	4638      	mov	r0, r7
 800384a:	47c8      	blx	r9
 800384c:	3001      	adds	r0, #1
 800384e:	d0e6      	beq.n	800381e <_printf_common+0xae>
 8003850:	3601      	adds	r6, #1
 8003852:	e7d9      	b.n	8003808 <_printf_common+0x98>

08003854 <_printf_i>:
 8003854:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003858:	7e0f      	ldrb	r7, [r1, #24]
 800385a:	4691      	mov	r9, r2
 800385c:	2f78      	cmp	r7, #120	@ 0x78
 800385e:	4680      	mov	r8, r0
 8003860:	460c      	mov	r4, r1
 8003862:	469a      	mov	sl, r3
 8003864:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003866:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800386a:	d807      	bhi.n	800387c <_printf_i+0x28>
 800386c:	2f62      	cmp	r7, #98	@ 0x62
 800386e:	d80a      	bhi.n	8003886 <_printf_i+0x32>
 8003870:	2f00      	cmp	r7, #0
 8003872:	f000 80d3 	beq.w	8003a1c <_printf_i+0x1c8>
 8003876:	2f58      	cmp	r7, #88	@ 0x58
 8003878:	f000 80ba 	beq.w	80039f0 <_printf_i+0x19c>
 800387c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003880:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003884:	e03a      	b.n	80038fc <_printf_i+0xa8>
 8003886:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800388a:	2b15      	cmp	r3, #21
 800388c:	d8f6      	bhi.n	800387c <_printf_i+0x28>
 800388e:	a101      	add	r1, pc, #4	@ (adr r1, 8003894 <_printf_i+0x40>)
 8003890:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003894:	080038ed 	.word	0x080038ed
 8003898:	08003901 	.word	0x08003901
 800389c:	0800387d 	.word	0x0800387d
 80038a0:	0800387d 	.word	0x0800387d
 80038a4:	0800387d 	.word	0x0800387d
 80038a8:	0800387d 	.word	0x0800387d
 80038ac:	08003901 	.word	0x08003901
 80038b0:	0800387d 	.word	0x0800387d
 80038b4:	0800387d 	.word	0x0800387d
 80038b8:	0800387d 	.word	0x0800387d
 80038bc:	0800387d 	.word	0x0800387d
 80038c0:	08003a03 	.word	0x08003a03
 80038c4:	0800392b 	.word	0x0800392b
 80038c8:	080039bd 	.word	0x080039bd
 80038cc:	0800387d 	.word	0x0800387d
 80038d0:	0800387d 	.word	0x0800387d
 80038d4:	08003a25 	.word	0x08003a25
 80038d8:	0800387d 	.word	0x0800387d
 80038dc:	0800392b 	.word	0x0800392b
 80038e0:	0800387d 	.word	0x0800387d
 80038e4:	0800387d 	.word	0x0800387d
 80038e8:	080039c5 	.word	0x080039c5
 80038ec:	6833      	ldr	r3, [r6, #0]
 80038ee:	1d1a      	adds	r2, r3, #4
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6032      	str	r2, [r6, #0]
 80038f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80038f8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80038fc:	2301      	movs	r3, #1
 80038fe:	e09e      	b.n	8003a3e <_printf_i+0x1ea>
 8003900:	6833      	ldr	r3, [r6, #0]
 8003902:	6820      	ldr	r0, [r4, #0]
 8003904:	1d19      	adds	r1, r3, #4
 8003906:	6031      	str	r1, [r6, #0]
 8003908:	0606      	lsls	r6, r0, #24
 800390a:	d501      	bpl.n	8003910 <_printf_i+0xbc>
 800390c:	681d      	ldr	r5, [r3, #0]
 800390e:	e003      	b.n	8003918 <_printf_i+0xc4>
 8003910:	0645      	lsls	r5, r0, #25
 8003912:	d5fb      	bpl.n	800390c <_printf_i+0xb8>
 8003914:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003918:	2d00      	cmp	r5, #0
 800391a:	da03      	bge.n	8003924 <_printf_i+0xd0>
 800391c:	232d      	movs	r3, #45	@ 0x2d
 800391e:	426d      	negs	r5, r5
 8003920:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003924:	230a      	movs	r3, #10
 8003926:	4859      	ldr	r0, [pc, #356]	@ (8003a8c <_printf_i+0x238>)
 8003928:	e011      	b.n	800394e <_printf_i+0xfa>
 800392a:	6821      	ldr	r1, [r4, #0]
 800392c:	6833      	ldr	r3, [r6, #0]
 800392e:	0608      	lsls	r0, r1, #24
 8003930:	f853 5b04 	ldr.w	r5, [r3], #4
 8003934:	d402      	bmi.n	800393c <_printf_i+0xe8>
 8003936:	0649      	lsls	r1, r1, #25
 8003938:	bf48      	it	mi
 800393a:	b2ad      	uxthmi	r5, r5
 800393c:	2f6f      	cmp	r7, #111	@ 0x6f
 800393e:	6033      	str	r3, [r6, #0]
 8003940:	bf14      	ite	ne
 8003942:	230a      	movne	r3, #10
 8003944:	2308      	moveq	r3, #8
 8003946:	4851      	ldr	r0, [pc, #324]	@ (8003a8c <_printf_i+0x238>)
 8003948:	2100      	movs	r1, #0
 800394a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800394e:	6866      	ldr	r6, [r4, #4]
 8003950:	2e00      	cmp	r6, #0
 8003952:	bfa8      	it	ge
 8003954:	6821      	ldrge	r1, [r4, #0]
 8003956:	60a6      	str	r6, [r4, #8]
 8003958:	bfa4      	itt	ge
 800395a:	f021 0104 	bicge.w	r1, r1, #4
 800395e:	6021      	strge	r1, [r4, #0]
 8003960:	b90d      	cbnz	r5, 8003966 <_printf_i+0x112>
 8003962:	2e00      	cmp	r6, #0
 8003964:	d04b      	beq.n	80039fe <_printf_i+0x1aa>
 8003966:	4616      	mov	r6, r2
 8003968:	fbb5 f1f3 	udiv	r1, r5, r3
 800396c:	fb03 5711 	mls	r7, r3, r1, r5
 8003970:	5dc7      	ldrb	r7, [r0, r7]
 8003972:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003976:	462f      	mov	r7, r5
 8003978:	42bb      	cmp	r3, r7
 800397a:	460d      	mov	r5, r1
 800397c:	d9f4      	bls.n	8003968 <_printf_i+0x114>
 800397e:	2b08      	cmp	r3, #8
 8003980:	d10b      	bne.n	800399a <_printf_i+0x146>
 8003982:	6823      	ldr	r3, [r4, #0]
 8003984:	07df      	lsls	r7, r3, #31
 8003986:	d508      	bpl.n	800399a <_printf_i+0x146>
 8003988:	6923      	ldr	r3, [r4, #16]
 800398a:	6861      	ldr	r1, [r4, #4]
 800398c:	4299      	cmp	r1, r3
 800398e:	bfde      	ittt	le
 8003990:	2330      	movle	r3, #48	@ 0x30
 8003992:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003996:	f106 36ff 	addle.w	r6, r6, #4294967295
 800399a:	1b92      	subs	r2, r2, r6
 800399c:	6122      	str	r2, [r4, #16]
 800399e:	464b      	mov	r3, r9
 80039a0:	4621      	mov	r1, r4
 80039a2:	4640      	mov	r0, r8
 80039a4:	f8cd a000 	str.w	sl, [sp]
 80039a8:	aa03      	add	r2, sp, #12
 80039aa:	f7ff fee1 	bl	8003770 <_printf_common>
 80039ae:	3001      	adds	r0, #1
 80039b0:	d14a      	bne.n	8003a48 <_printf_i+0x1f4>
 80039b2:	f04f 30ff 	mov.w	r0, #4294967295
 80039b6:	b004      	add	sp, #16
 80039b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	f043 0320 	orr.w	r3, r3, #32
 80039c2:	6023      	str	r3, [r4, #0]
 80039c4:	2778      	movs	r7, #120	@ 0x78
 80039c6:	4832      	ldr	r0, [pc, #200]	@ (8003a90 <_printf_i+0x23c>)
 80039c8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	6831      	ldr	r1, [r6, #0]
 80039d0:	061f      	lsls	r7, r3, #24
 80039d2:	f851 5b04 	ldr.w	r5, [r1], #4
 80039d6:	d402      	bmi.n	80039de <_printf_i+0x18a>
 80039d8:	065f      	lsls	r7, r3, #25
 80039da:	bf48      	it	mi
 80039dc:	b2ad      	uxthmi	r5, r5
 80039de:	6031      	str	r1, [r6, #0]
 80039e0:	07d9      	lsls	r1, r3, #31
 80039e2:	bf44      	itt	mi
 80039e4:	f043 0320 	orrmi.w	r3, r3, #32
 80039e8:	6023      	strmi	r3, [r4, #0]
 80039ea:	b11d      	cbz	r5, 80039f4 <_printf_i+0x1a0>
 80039ec:	2310      	movs	r3, #16
 80039ee:	e7ab      	b.n	8003948 <_printf_i+0xf4>
 80039f0:	4826      	ldr	r0, [pc, #152]	@ (8003a8c <_printf_i+0x238>)
 80039f2:	e7e9      	b.n	80039c8 <_printf_i+0x174>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	f023 0320 	bic.w	r3, r3, #32
 80039fa:	6023      	str	r3, [r4, #0]
 80039fc:	e7f6      	b.n	80039ec <_printf_i+0x198>
 80039fe:	4616      	mov	r6, r2
 8003a00:	e7bd      	b.n	800397e <_printf_i+0x12a>
 8003a02:	6833      	ldr	r3, [r6, #0]
 8003a04:	6825      	ldr	r5, [r4, #0]
 8003a06:	1d18      	adds	r0, r3, #4
 8003a08:	6961      	ldr	r1, [r4, #20]
 8003a0a:	6030      	str	r0, [r6, #0]
 8003a0c:	062e      	lsls	r6, r5, #24
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	d501      	bpl.n	8003a16 <_printf_i+0x1c2>
 8003a12:	6019      	str	r1, [r3, #0]
 8003a14:	e002      	b.n	8003a1c <_printf_i+0x1c8>
 8003a16:	0668      	lsls	r0, r5, #25
 8003a18:	d5fb      	bpl.n	8003a12 <_printf_i+0x1be>
 8003a1a:	8019      	strh	r1, [r3, #0]
 8003a1c:	2300      	movs	r3, #0
 8003a1e:	4616      	mov	r6, r2
 8003a20:	6123      	str	r3, [r4, #16]
 8003a22:	e7bc      	b.n	800399e <_printf_i+0x14a>
 8003a24:	6833      	ldr	r3, [r6, #0]
 8003a26:	2100      	movs	r1, #0
 8003a28:	1d1a      	adds	r2, r3, #4
 8003a2a:	6032      	str	r2, [r6, #0]
 8003a2c:	681e      	ldr	r6, [r3, #0]
 8003a2e:	6862      	ldr	r2, [r4, #4]
 8003a30:	4630      	mov	r0, r6
 8003a32:	f000 f859 	bl	8003ae8 <memchr>
 8003a36:	b108      	cbz	r0, 8003a3c <_printf_i+0x1e8>
 8003a38:	1b80      	subs	r0, r0, r6
 8003a3a:	6060      	str	r0, [r4, #4]
 8003a3c:	6863      	ldr	r3, [r4, #4]
 8003a3e:	6123      	str	r3, [r4, #16]
 8003a40:	2300      	movs	r3, #0
 8003a42:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a46:	e7aa      	b.n	800399e <_printf_i+0x14a>
 8003a48:	4632      	mov	r2, r6
 8003a4a:	4649      	mov	r1, r9
 8003a4c:	4640      	mov	r0, r8
 8003a4e:	6923      	ldr	r3, [r4, #16]
 8003a50:	47d0      	blx	sl
 8003a52:	3001      	adds	r0, #1
 8003a54:	d0ad      	beq.n	80039b2 <_printf_i+0x15e>
 8003a56:	6823      	ldr	r3, [r4, #0]
 8003a58:	079b      	lsls	r3, r3, #30
 8003a5a:	d413      	bmi.n	8003a84 <_printf_i+0x230>
 8003a5c:	68e0      	ldr	r0, [r4, #12]
 8003a5e:	9b03      	ldr	r3, [sp, #12]
 8003a60:	4298      	cmp	r0, r3
 8003a62:	bfb8      	it	lt
 8003a64:	4618      	movlt	r0, r3
 8003a66:	e7a6      	b.n	80039b6 <_printf_i+0x162>
 8003a68:	2301      	movs	r3, #1
 8003a6a:	4632      	mov	r2, r6
 8003a6c:	4649      	mov	r1, r9
 8003a6e:	4640      	mov	r0, r8
 8003a70:	47d0      	blx	sl
 8003a72:	3001      	adds	r0, #1
 8003a74:	d09d      	beq.n	80039b2 <_printf_i+0x15e>
 8003a76:	3501      	adds	r5, #1
 8003a78:	68e3      	ldr	r3, [r4, #12]
 8003a7a:	9903      	ldr	r1, [sp, #12]
 8003a7c:	1a5b      	subs	r3, r3, r1
 8003a7e:	42ab      	cmp	r3, r5
 8003a80:	dcf2      	bgt.n	8003a68 <_printf_i+0x214>
 8003a82:	e7eb      	b.n	8003a5c <_printf_i+0x208>
 8003a84:	2500      	movs	r5, #0
 8003a86:	f104 0619 	add.w	r6, r4, #25
 8003a8a:	e7f5      	b.n	8003a78 <_printf_i+0x224>
 8003a8c:	08003c27 	.word	0x08003c27
 8003a90:	08003c38 	.word	0x08003c38

08003a94 <memmove>:
 8003a94:	4288      	cmp	r0, r1
 8003a96:	b510      	push	{r4, lr}
 8003a98:	eb01 0402 	add.w	r4, r1, r2
 8003a9c:	d902      	bls.n	8003aa4 <memmove+0x10>
 8003a9e:	4284      	cmp	r4, r0
 8003aa0:	4623      	mov	r3, r4
 8003aa2:	d807      	bhi.n	8003ab4 <memmove+0x20>
 8003aa4:	1e43      	subs	r3, r0, #1
 8003aa6:	42a1      	cmp	r1, r4
 8003aa8:	d008      	beq.n	8003abc <memmove+0x28>
 8003aaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003aae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003ab2:	e7f8      	b.n	8003aa6 <memmove+0x12>
 8003ab4:	4601      	mov	r1, r0
 8003ab6:	4402      	add	r2, r0
 8003ab8:	428a      	cmp	r2, r1
 8003aba:	d100      	bne.n	8003abe <memmove+0x2a>
 8003abc:	bd10      	pop	{r4, pc}
 8003abe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003ac2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003ac6:	e7f7      	b.n	8003ab8 <memmove+0x24>

08003ac8 <_sbrk_r>:
 8003ac8:	b538      	push	{r3, r4, r5, lr}
 8003aca:	2300      	movs	r3, #0
 8003acc:	4d05      	ldr	r5, [pc, #20]	@ (8003ae4 <_sbrk_r+0x1c>)
 8003ace:	4604      	mov	r4, r0
 8003ad0:	4608      	mov	r0, r1
 8003ad2:	602b      	str	r3, [r5, #0]
 8003ad4:	f7fd fb2e 	bl	8001134 <_sbrk>
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d102      	bne.n	8003ae2 <_sbrk_r+0x1a>
 8003adc:	682b      	ldr	r3, [r5, #0]
 8003ade:	b103      	cbz	r3, 8003ae2 <_sbrk_r+0x1a>
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	200002f4 	.word	0x200002f4

08003ae8 <memchr>:
 8003ae8:	4603      	mov	r3, r0
 8003aea:	b510      	push	{r4, lr}
 8003aec:	b2c9      	uxtb	r1, r1
 8003aee:	4402      	add	r2, r0
 8003af0:	4293      	cmp	r3, r2
 8003af2:	4618      	mov	r0, r3
 8003af4:	d101      	bne.n	8003afa <memchr+0x12>
 8003af6:	2000      	movs	r0, #0
 8003af8:	e003      	b.n	8003b02 <memchr+0x1a>
 8003afa:	7804      	ldrb	r4, [r0, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	428c      	cmp	r4, r1
 8003b00:	d1f6      	bne.n	8003af0 <memchr+0x8>
 8003b02:	bd10      	pop	{r4, pc}

08003b04 <memcpy>:
 8003b04:	440a      	add	r2, r1
 8003b06:	4291      	cmp	r1, r2
 8003b08:	f100 33ff 	add.w	r3, r0, #4294967295
 8003b0c:	d100      	bne.n	8003b10 <memcpy+0xc>
 8003b0e:	4770      	bx	lr
 8003b10:	b510      	push	{r4, lr}
 8003b12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b16:	4291      	cmp	r1, r2
 8003b18:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003b1c:	d1f9      	bne.n	8003b12 <memcpy+0xe>
 8003b1e:	bd10      	pop	{r4, pc}

08003b20 <_realloc_r>:
 8003b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b24:	4680      	mov	r8, r0
 8003b26:	4615      	mov	r5, r2
 8003b28:	460c      	mov	r4, r1
 8003b2a:	b921      	cbnz	r1, 8003b36 <_realloc_r+0x16>
 8003b2c:	4611      	mov	r1, r2
 8003b2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003b32:	f7ff bc39 	b.w	80033a8 <_malloc_r>
 8003b36:	b92a      	cbnz	r2, 8003b44 <_realloc_r+0x24>
 8003b38:	f7ff fbcc 	bl	80032d4 <_free_r>
 8003b3c:	2400      	movs	r4, #0
 8003b3e:	4620      	mov	r0, r4
 8003b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b44:	f000 f81a 	bl	8003b7c <_malloc_usable_size_r>
 8003b48:	4285      	cmp	r5, r0
 8003b4a:	4606      	mov	r6, r0
 8003b4c:	d802      	bhi.n	8003b54 <_realloc_r+0x34>
 8003b4e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003b52:	d8f4      	bhi.n	8003b3e <_realloc_r+0x1e>
 8003b54:	4629      	mov	r1, r5
 8003b56:	4640      	mov	r0, r8
 8003b58:	f7ff fc26 	bl	80033a8 <_malloc_r>
 8003b5c:	4607      	mov	r7, r0
 8003b5e:	2800      	cmp	r0, #0
 8003b60:	d0ec      	beq.n	8003b3c <_realloc_r+0x1c>
 8003b62:	42b5      	cmp	r5, r6
 8003b64:	462a      	mov	r2, r5
 8003b66:	4621      	mov	r1, r4
 8003b68:	bf28      	it	cs
 8003b6a:	4632      	movcs	r2, r6
 8003b6c:	f7ff ffca 	bl	8003b04 <memcpy>
 8003b70:	4621      	mov	r1, r4
 8003b72:	4640      	mov	r0, r8
 8003b74:	f7ff fbae 	bl	80032d4 <_free_r>
 8003b78:	463c      	mov	r4, r7
 8003b7a:	e7e0      	b.n	8003b3e <_realloc_r+0x1e>

08003b7c <_malloc_usable_size_r>:
 8003b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b80:	1f18      	subs	r0, r3, #4
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	bfbc      	itt	lt
 8003b86:	580b      	ldrlt	r3, [r1, r0]
 8003b88:	18c0      	addlt	r0, r0, r3
 8003b8a:	4770      	bx	lr

08003b8c <_init>:
 8003b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8e:	bf00      	nop
 8003b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b92:	bc08      	pop	{r3}
 8003b94:	469e      	mov	lr, r3
 8003b96:	4770      	bx	lr

08003b98 <_fini>:
 8003b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b9a:	bf00      	nop
 8003b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9e:	bc08      	pop	{r3}
 8003ba0:	469e      	mov	lr, r3
 8003ba2:	4770      	bx	lr
