
multisteering-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000243c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08002548  08002548  00003548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002594  08002594  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  08002594  08002594  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002594  08002594  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002594  08002594  00003594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002598  08002598  00003598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  0800259c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000010  080025ac  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080025ac  000040c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008581  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016e4  00000000  00000000  0000c5ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000dca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b6  00000000  00000000  0000e418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d0c  00000000  00000000  0000e9ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008b1b  00000000  00000000  000256da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000840ac  00000000  00000000  0002e1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b22a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dcc  00000000  00000000  000b22e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b40b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002530 	.word	0x08002530

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002530 	.word	0x08002530

0800014c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	//TODO: set correct callback (according to defined addresses)
}
 8000154:	bf00      	nop
 8000156:	370c      	adds	r7, #12
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr

0800015e <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 800015e:	b580      	push	{r7, lr}
 8000160:	b082      	sub	sp, #8
 8000162:	af00      	add	r7, sp, #0
 8000164:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8000166:	f000 fb99 	bl	800089c <Error_Handler>
}
 800016a:	bf00      	nop
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}
	...

08000174 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000174:	b5b0      	push	{r4, r5, r7, lr}
 8000176:	b090      	sub	sp, #64	@ 0x40
 8000178:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	struct ID_MSG_Array RxData = { { 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0,
 800017a:	4b0f      	ldr	r3, [pc, #60]	@ (80001b8 <main+0x44>)
 800017c:	f107 0420 	add.w	r4, r7, #32
 8000180:	461d      	mov	r5, r3
 8000182:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000184:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000186:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800018a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0 } };
	struct Nextion_values Nextion = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
 800018e:	463b      	mov	r3, r7
 8000190:	221e      	movs	r2, #30
 8000192:	2100      	movs	r1, #0
 8000194:	4618      	mov	r0, r3
 8000196:	f002 f99f 	bl	80024d8 <memset>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800019a:	f000 fced 	bl	8000b78 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800019e:	f000 f80d 	bl	80001bc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80001a2:	f000 f8d3 	bl	800034c <MX_GPIO_Init>
	MX_CAN_Init();
 80001a6:	f000 f84f 	bl	8000248 <MX_CAN_Init>
	MX_USART1_UART_Init();
 80001aa:	f000 f8a5 	bl	80002f8 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	startup();
 80001ae:	f000 fb1f 	bl	80007f0 <startup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		button_handler();
 80001b2:	f000 f969 	bl	8000488 <button_handler>
 80001b6:	e7fc      	b.n	80001b2 <main+0x3e>
 80001b8:	08002548 	.word	0x08002548

080001bc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b090      	sub	sp, #64	@ 0x40
 80001c0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80001c2:	f107 0318 	add.w	r3, r7, #24
 80001c6:	2228      	movs	r2, #40	@ 0x28
 80001c8:	2100      	movs	r1, #0
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 f984 	bl	80024d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80001d0:	1d3b      	adds	r3, r7, #4
 80001d2:	2200      	movs	r2, #0
 80001d4:	601a      	str	r2, [r3, #0]
 80001d6:	605a      	str	r2, [r3, #4]
 80001d8:	609a      	str	r2, [r3, #8]
 80001da:	60da      	str	r2, [r3, #12]
 80001dc:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001de:	2301      	movs	r3, #1
 80001e0:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001e2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001e6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001e8:	2300      	movs	r3, #0
 80001ea:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ec:	2301      	movs	r3, #1
 80001ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001f0:	2302      	movs	r3, #2
 80001f2:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001f4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001f8:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80001fa:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80001fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000200:	f107 0318 	add.w	r3, r7, #24
 8000204:	4618      	mov	r0, r3
 8000206:	f001 fc79 	bl	8001afc <HAL_RCC_OscConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x58>
		Error_Handler();
 8000210:	f000 fb44 	bl	800089c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000214:	230f      	movs	r3, #15
 8000216:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000218:	2302      	movs	r3, #2
 800021a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800021c:	2300      	movs	r3, #0
 800021e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000220:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000224:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000226:	2300      	movs	r3, #0
 8000228:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2102      	movs	r1, #2
 800022e:	4618      	mov	r0, r3
 8000230:	f001 fee6 	bl	8002000 <HAL_RCC_ClockConfig>
 8000234:	4603      	mov	r3, r0
 8000236:	2b00      	cmp	r3, #0
 8000238:	d001      	beq.n	800023e <SystemClock_Config+0x82>
		Error_Handler();
 800023a:	f000 fb2f 	bl	800089c <Error_Handler>
	}
}
 800023e:	bf00      	nop
 8000240:	3740      	adds	r7, #64	@ 0x40
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
	...

08000248 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b08a      	sub	sp, #40	@ 0x28
 800024c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800024e:	4b28      	ldr	r3, [pc, #160]	@ (80002f0 <MX_CAN_Init+0xa8>)
 8000250:	4a28      	ldr	r2, [pc, #160]	@ (80002f4 <MX_CAN_Init+0xac>)
 8000252:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 16;
 8000254:	4b26      	ldr	r3, [pc, #152]	@ (80002f0 <MX_CAN_Init+0xa8>)
 8000256:	2210      	movs	r2, #16
 8000258:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 800025a:	4b25      	ldr	r3, [pc, #148]	@ (80002f0 <MX_CAN_Init+0xa8>)
 800025c:	2200      	movs	r2, #0
 800025e:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000260:	4b23      	ldr	r3, [pc, #140]	@ (80002f0 <MX_CAN_Init+0xa8>)
 8000262:	2200      	movs	r2, #0
 8000264:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000266:	4b22      	ldr	r3, [pc, #136]	@ (80002f0 <MX_CAN_Init+0xa8>)
 8000268:	2200      	movs	r2, #0
 800026a:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800026c:	4b20      	ldr	r3, [pc, #128]	@ (80002f0 <MX_CAN_Init+0xa8>)
 800026e:	2200      	movs	r2, #0
 8000270:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000272:	4b1f      	ldr	r3, [pc, #124]	@ (80002f0 <MX_CAN_Init+0xa8>)
 8000274:	2200      	movs	r2, #0
 8000276:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000278:	4b1d      	ldr	r3, [pc, #116]	@ (80002f0 <MX_CAN_Init+0xa8>)
 800027a:	2200      	movs	r2, #0
 800027c:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800027e:	4b1c      	ldr	r3, [pc, #112]	@ (80002f0 <MX_CAN_Init+0xa8>)
 8000280:	2200      	movs	r2, #0
 8000282:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000284:	4b1a      	ldr	r3, [pc, #104]	@ (80002f0 <MX_CAN_Init+0xa8>)
 8000286:	2200      	movs	r2, #0
 8000288:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800028a:	4b19      	ldr	r3, [pc, #100]	@ (80002f0 <MX_CAN_Init+0xa8>)
 800028c:	2200      	movs	r2, #0
 800028e:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = DISABLE;
 8000290:	4b17      	ldr	r3, [pc, #92]	@ (80002f0 <MX_CAN_Init+0xa8>)
 8000292:	2200      	movs	r2, #0
 8000294:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000296:	4816      	ldr	r0, [pc, #88]	@ (80002f0 <MX_CAN_Init+0xa8>)
 8000298:	f000 fcf4 	bl	8000c84 <HAL_CAN_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_CAN_Init+0x5e>
		Error_Handler();
 80002a2:	f000 fafb 	bl	800089c <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	sFilterConfig.FilterBank = 0;
 80002a6:	2300      	movs	r3, #0
 80002a8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80002aa:	2300      	movs	r3, #0
 80002ac:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 80002ae:	2300      	movs	r3, #0
 80002b0:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x600;
 80002b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80002b6:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x600;
 80002b8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80002bc:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x7F8 << 5;
 80002be:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80002c2:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x7F8 << 5;
 80002c4:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80002c8:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80002ca:	2300      	movs	r3, #0
 80002cc:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80002ce:	2301      	movs	r3, #1
 80002d0:	623b      	str	r3, [r7, #32]
	//sFilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80002d2:	463b      	mov	r3, r7
 80002d4:	4619      	mov	r1, r3
 80002d6:	4806      	ldr	r0, [pc, #24]	@ (80002f0 <MX_CAN_Init+0xa8>)
 80002d8:	f000 fdcf 	bl	8000e7a <HAL_CAN_ConfigFilter>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_CAN_Init+0x9e>
		Error_Handler();
 80002e2:	f000 fadb 	bl	800089c <Error_Handler>
	}
	/* USER CODE END CAN_Init 2 */

}
 80002e6:	bf00      	nop
 80002e8:	3728      	adds	r7, #40	@ 0x28
 80002ea:	46bd      	mov	sp, r7
 80002ec:	bd80      	pop	{r7, pc}
 80002ee:	bf00      	nop
 80002f0:	2000002c 	.word	0x2000002c
 80002f4:	40006400 	.word	0x40006400

080002f8 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80002fc:	4b11      	ldr	r3, [pc, #68]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 80002fe:	4a12      	ldr	r2, [pc, #72]	@ (8000348 <MX_USART1_UART_Init+0x50>)
 8000300:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000302:	4b10      	ldr	r3, [pc, #64]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000304:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000308:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800030a:	4b0e      	ldr	r3, [pc, #56]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 800030c:	2200      	movs	r2, #0
 800030e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000310:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000312:	2200      	movs	r2, #0
 8000314:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000316:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000318:	2200      	movs	r2, #0
 800031a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800031c:	4b09      	ldr	r3, [pc, #36]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 800031e:	220c      	movs	r2, #12
 8000320:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000322:	4b08      	ldr	r3, [pc, #32]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000324:	2200      	movs	r2, #0
 8000326:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000328:	4b06      	ldr	r3, [pc, #24]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 800032a:	2200      	movs	r2, #0
 800032c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800032e:	4805      	ldr	r0, [pc, #20]	@ (8000344 <MX_USART1_UART_Init+0x4c>)
 8000330:	f001 fff4 	bl	800231c <HAL_UART_Init>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800033a:	f000 faaf 	bl	800089c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800033e:	bf00      	nop
 8000340:	bd80      	pop	{r7, pc}
 8000342:	bf00      	nop
 8000344:	20000054 	.word	0x20000054
 8000348:	40013800 	.word	0x40013800

0800034c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000352:	f107 0310 	add.w	r3, r7, #16
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
 800035e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000360:	4b44      	ldr	r3, [pc, #272]	@ (8000474 <MX_GPIO_Init+0x128>)
 8000362:	699b      	ldr	r3, [r3, #24]
 8000364:	4a43      	ldr	r2, [pc, #268]	@ (8000474 <MX_GPIO_Init+0x128>)
 8000366:	f043 0310 	orr.w	r3, r3, #16
 800036a:	6193      	str	r3, [r2, #24]
 800036c:	4b41      	ldr	r3, [pc, #260]	@ (8000474 <MX_GPIO_Init+0x128>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	f003 0310 	and.w	r3, r3, #16
 8000374:	60fb      	str	r3, [r7, #12]
 8000376:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000378:	4b3e      	ldr	r3, [pc, #248]	@ (8000474 <MX_GPIO_Init+0x128>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	4a3d      	ldr	r2, [pc, #244]	@ (8000474 <MX_GPIO_Init+0x128>)
 800037e:	f043 0320 	orr.w	r3, r3, #32
 8000382:	6193      	str	r3, [r2, #24]
 8000384:	4b3b      	ldr	r3, [pc, #236]	@ (8000474 <MX_GPIO_Init+0x128>)
 8000386:	699b      	ldr	r3, [r3, #24]
 8000388:	f003 0320 	and.w	r3, r3, #32
 800038c:	60bb      	str	r3, [r7, #8]
 800038e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000390:	4b38      	ldr	r3, [pc, #224]	@ (8000474 <MX_GPIO_Init+0x128>)
 8000392:	699b      	ldr	r3, [r3, #24]
 8000394:	4a37      	ldr	r2, [pc, #220]	@ (8000474 <MX_GPIO_Init+0x128>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6193      	str	r3, [r2, #24]
 800039c:	4b35      	ldr	r3, [pc, #212]	@ (8000474 <MX_GPIO_Init+0x128>)
 800039e:	699b      	ldr	r3, [r3, #24]
 80003a0:	f003 0308 	and.w	r3, r3, #8
 80003a4:	607b      	str	r3, [r7, #4]
 80003a6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80003a8:	4b32      	ldr	r3, [pc, #200]	@ (8000474 <MX_GPIO_Init+0x128>)
 80003aa:	699b      	ldr	r3, [r3, #24]
 80003ac:	4a31      	ldr	r2, [pc, #196]	@ (8000474 <MX_GPIO_Init+0x128>)
 80003ae:	f043 0304 	orr.w	r3, r3, #4
 80003b2:	6193      	str	r3, [r2, #24]
 80003b4:	4b2f      	ldr	r3, [pc, #188]	@ (8000474 <MX_GPIO_Init+0x128>)
 80003b6:	699b      	ldr	r3, [r3, #24]
 80003b8:	f003 0304 	and.w	r3, r3, #4
 80003bc:	603b      	str	r3, [r7, #0]
 80003be:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 80003c0:	2200      	movs	r2, #0
 80003c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003c6:	482c      	ldr	r0, [pc, #176]	@ (8000478 <MX_GPIO_Init+0x12c>)
 80003c8:	f001 fb67 	bl	8001a9a <HAL_GPIO_WritePin>
#if DEBUG == 1
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin,
 80003cc:	2200      	movs	r2, #0
 80003ce:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80003d2:	482a      	ldr	r0, [pc, #168]	@ (800047c <MX_GPIO_Init+0x130>)
 80003d4:	f001 fb61 	bl	8001a9a <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
#endif
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80003d8:	2200      	movs	r2, #0
 80003da:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003de:	4828      	ldr	r0, [pc, #160]	@ (8000480 <MX_GPIO_Init+0x134>)
 80003e0:	f001 fb5b 	bl	8001a9a <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CAN_LED_Pin */
	GPIO_InitStruct.Pin = CAN_LED_Pin;
 80003e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	2302      	movs	r3, #2
 80003f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAN_LED_GPIO_Port, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	481e      	ldr	r0, [pc, #120]	@ (8000478 <MX_GPIO_Init+0x12c>)
 80003fe:	f001 f9b1 	bl	8001764 <HAL_GPIO_Init>
#if DEBUG == 1
	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin;
 8000402:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000406:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000408:	2301      	movs	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040c:	2300      	movs	r3, #0
 800040e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000410:	2302      	movs	r3, #2
 8000412:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000414:	f107 0310 	add.w	r3, r7, #16
 8000418:	4619      	mov	r1, r3
 800041a:	4818      	ldr	r0, [pc, #96]	@ (800047c <MX_GPIO_Init+0x130>)
 800041c:	f001 f9a2 	bl	8001764 <HAL_GPIO_Init>
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
#endif
#endif
	/*Configure GPIO pin : BTN_6_Pin */
	GPIO_InitStruct.Pin = BTN_6_Pin;
 8000420:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000424:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <MX_GPIO_Init+0x138>)
 8000428:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042a:	2300      	movs	r3, #0
 800042c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_6_GPIO_Port, &GPIO_InitStruct);
 800042e:	f107 0310 	add.w	r3, r7, #16
 8000432:	4619      	mov	r1, r3
 8000434:	4812      	ldr	r0, [pc, #72]	@ (8000480 <MX_GPIO_Init+0x134>)
 8000436:	f001 f995 	bl	8001764 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin | BTN_2_Pin | BTN_3_Pin | BTN_4_Pin;
 800043a:	2378      	movs	r3, #120	@ 0x78
 800043c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800043e:	4b11      	ldr	r3, [pc, #68]	@ (8000484 <MX_GPIO_Init+0x138>)
 8000440:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000442:	2302      	movs	r3, #2
 8000444:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000446:	f107 0310 	add.w	r3, r7, #16
 800044a:	4619      	mov	r1, r3
 800044c:	480b      	ldr	r0, [pc, #44]	@ (800047c <MX_GPIO_Init+0x130>)
 800044e:	f001 f989 	bl	8001764 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_5_Pin */
	GPIO_InitStruct.Pin = BTN_5_Pin;
 8000452:	2380      	movs	r3, #128	@ 0x80
 8000454:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000456:	4b0b      	ldr	r3, [pc, #44]	@ (8000484 <MX_GPIO_Init+0x138>)
 8000458:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_5_GPIO_Port, &GPIO_InitStruct);
 800045e:	f107 0310 	add.w	r3, r7, #16
 8000462:	4619      	mov	r1, r3
 8000464:	4805      	ldr	r0, [pc, #20]	@ (800047c <MX_GPIO_Init+0x130>)
 8000466:	f001 f97d 	bl	8001764 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800046a:	bf00      	nop
 800046c:	3720      	adds	r7, #32
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40021000 	.word	0x40021000
 8000478:	40011000 	.word	0x40011000
 800047c:	40010c00 	.word	0x40010c00
 8000480:	40010800 	.word	0x40010800
 8000484:	10110000 	.word	0x10110000

08000488 <button_handler>:

/* USER CODE BEGIN 4 */
void button_handler() {
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	static uint8_t flag_btn1, flag_btn2, flag_btn3, flag_btn4, flag_btn5,
			flag_btn6 = 0; // Some flags for buttons
	HAL_Delay(PILOT_FINGER_TAP_SPEED);
 800048c:	2096      	movs	r0, #150	@ 0x96
 800048e:	f000 fbd5 	bl	8000c3c <HAL_Delay>
	/* NEUTRAL GEAR BUTTON COMBINATION HANDLER */
	if (HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 8000492:	2120      	movs	r1, #32
 8000494:	4872      	ldr	r0, [pc, #456]	@ (8000660 <button_handler+0x1d8>)
 8000496:	f001 fae9 	bl	8001a6c <HAL_GPIO_ReadPin>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d033      	beq.n	8000508 <button_handler+0x80>
			&& HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 80004a0:	2140      	movs	r1, #64	@ 0x40
 80004a2:	486f      	ldr	r0, [pc, #444]	@ (8000660 <button_handler+0x1d8>)
 80004a4:	f001 fae2 	bl	8001a6c <HAL_GPIO_ReadPin>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d02c      	beq.n	8000508 <button_handler+0x80>
			&& (HAL_GetTick() - time_ms > 150) && flag_btn3 == 0
 80004ae:	f000 fbbb 	bl	8000c28 <HAL_GetTick>
 80004b2:	4602      	mov	r2, r0
 80004b4:	4b6b      	ldr	r3, [pc, #428]	@ (8000664 <button_handler+0x1dc>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	1ad3      	subs	r3, r2, r3
 80004ba:	2b96      	cmp	r3, #150	@ 0x96
 80004bc:	d924      	bls.n	8000508 <button_handler+0x80>
 80004be:	4b6a      	ldr	r3, [pc, #424]	@ (8000668 <button_handler+0x1e0>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d120      	bne.n	8000508 <button_handler+0x80>
			&& flag_btn4 == 0) {
 80004c6:	4b69      	ldr	r3, [pc, #420]	@ (800066c <button_handler+0x1e4>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d11c      	bne.n	8000508 <button_handler+0x80>
		flag_btn3 = 1;
 80004ce:	4b66      	ldr	r3, [pc, #408]	@ (8000668 <button_handler+0x1e0>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	701a      	strb	r2, [r3, #0]
		flag_btn4 = 1;
 80004d4:	4b65      	ldr	r3, [pc, #404]	@ (800066c <button_handler+0x1e4>)
 80004d6:	2201      	movs	r2, #1
 80004d8:	701a      	strb	r2, [r3, #0]
		/* SEND CAN NEUTRAL GEAR MSG HERE */
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80004da:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004de:	4860      	ldr	r0, [pc, #384]	@ (8000660 <button_handler+0x1d8>)
 80004e0:	f001 faf3 	bl	8001aca <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80004e4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004e8:	485d      	ldr	r0, [pc, #372]	@ (8000660 <button_handler+0x1d8>)
 80004ea:	f001 faee 	bl	8001aca <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80004ee:	2064      	movs	r0, #100	@ 0x64
 80004f0:	f000 fba4 	bl	8000c3c <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80004f4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004f8:	4859      	ldr	r0, [pc, #356]	@ (8000660 <button_handler+0x1d8>)
 80004fa:	f001 fae6 	bl	8001aca <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80004fe:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000502:	4857      	ldr	r0, [pc, #348]	@ (8000660 <button_handler+0x1d8>)
 8000504:	f001 fae1 	bl	8001aca <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 8000508:	2120      	movs	r1, #32
 800050a:	4855      	ldr	r0, [pc, #340]	@ (8000660 <button_handler+0x1d8>)
 800050c:	f001 faae 	bl	8001a6c <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d117      	bne.n	8000546 <button_handler+0xbe>
			&& !HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && flag_btn3 == 1
 8000516:	2140      	movs	r1, #64	@ 0x40
 8000518:	4851      	ldr	r0, [pc, #324]	@ (8000660 <button_handler+0x1d8>)
 800051a:	f001 faa7 	bl	8001a6c <HAL_GPIO_ReadPin>
 800051e:	4603      	mov	r3, r0
 8000520:	2b00      	cmp	r3, #0
 8000522:	d110      	bne.n	8000546 <button_handler+0xbe>
 8000524:	4b50      	ldr	r3, [pc, #320]	@ (8000668 <button_handler+0x1e0>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	2b01      	cmp	r3, #1
 800052a:	d10c      	bne.n	8000546 <button_handler+0xbe>
			&& flag_btn4 == 1) {
 800052c:	4b4f      	ldr	r3, [pc, #316]	@ (800066c <button_handler+0x1e4>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2b01      	cmp	r3, #1
 8000532:	d108      	bne.n	8000546 <button_handler+0xbe>
		flag_btn3 = 0;
 8000534:	4b4c      	ldr	r3, [pc, #304]	@ (8000668 <button_handler+0x1e0>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
		flag_btn4 = 0;
 800053a:	4b4c      	ldr	r3, [pc, #304]	@ (800066c <button_handler+0x1e4>)
 800053c:	2200      	movs	r2, #0
 800053e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000540:	2064      	movs	r0, #100	@ 0x64
 8000542:	f000 fb7b 	bl	8000c3c <HAL_Delay>
	}
	/* GEAR UP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 8000546:	2120      	movs	r1, #32
 8000548:	4845      	ldr	r0, [pc, #276]	@ (8000660 <button_handler+0x1d8>)
 800054a:	f001 fa8f 	bl	8001a6c <HAL_GPIO_ReadPin>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d022      	beq.n	800059a <button_handler+0x112>
			&& !HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 8000554:	2140      	movs	r1, #64	@ 0x40
 8000556:	4842      	ldr	r0, [pc, #264]	@ (8000660 <button_handler+0x1d8>)
 8000558:	f001 fa88 	bl	8001a6c <HAL_GPIO_ReadPin>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d11b      	bne.n	800059a <button_handler+0x112>
			&& (HAL_GetTick() - time_ms > 150) && flag_btn3 == 0) {
 8000562:	f000 fb61 	bl	8000c28 <HAL_GetTick>
 8000566:	4602      	mov	r2, r0
 8000568:	4b3e      	ldr	r3, [pc, #248]	@ (8000664 <button_handler+0x1dc>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	2b96      	cmp	r3, #150	@ 0x96
 8000570:	d913      	bls.n	800059a <button_handler+0x112>
 8000572:	4b3d      	ldr	r3, [pc, #244]	@ (8000668 <button_handler+0x1e0>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d10f      	bne.n	800059a <button_handler+0x112>
		flag_btn3 = 1;
 800057a:	4b3b      	ldr	r3, [pc, #236]	@ (8000668 <button_handler+0x1e0>)
 800057c:	2201      	movs	r2, #1
 800057e:	701a      	strb	r2, [r3, #0]
		/* SEND CAN GEAR UP MSG HERE */
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000580:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000584:	4836      	ldr	r0, [pc, #216]	@ (8000660 <button_handler+0x1d8>)
 8000586:	f001 faa0 	bl	8001aca <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800058a:	2064      	movs	r0, #100	@ 0x64
 800058c:	f000 fb56 	bl	8000c3c <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000590:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000594:	4832      	ldr	r0, [pc, #200]	@ (8000660 <button_handler+0x1d8>)
 8000596:	f001 fa98 	bl	8001aca <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) && flag_btn3 == 1) {
 800059a:	2120      	movs	r1, #32
 800059c:	4830      	ldr	r0, [pc, #192]	@ (8000660 <button_handler+0x1d8>)
 800059e:	f001 fa65 	bl	8001a6c <HAL_GPIO_ReadPin>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d109      	bne.n	80005bc <button_handler+0x134>
 80005a8:	4b2f      	ldr	r3, [pc, #188]	@ (8000668 <button_handler+0x1e0>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d105      	bne.n	80005bc <button_handler+0x134>
		flag_btn3 = 0;
 80005b0:	4b2d      	ldr	r3, [pc, #180]	@ (8000668 <button_handler+0x1e0>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80005b6:	2064      	movs	r0, #100	@ 0x64
 80005b8:	f000 fb40 	bl	8000c3c <HAL_Delay>
	}
	/* GEAR DOWN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 80005bc:	2140      	movs	r1, #64	@ 0x40
 80005be:	4828      	ldr	r0, [pc, #160]	@ (8000660 <button_handler+0x1d8>)
 80005c0:	f001 fa54 	bl	8001a6c <HAL_GPIO_ReadPin>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d022      	beq.n	8000610 <button_handler+0x188>
			&& !HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 80005ca:	2120      	movs	r1, #32
 80005cc:	4824      	ldr	r0, [pc, #144]	@ (8000660 <button_handler+0x1d8>)
 80005ce:	f001 fa4d 	bl	8001a6c <HAL_GPIO_ReadPin>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d11b      	bne.n	8000610 <button_handler+0x188>
			&& (HAL_GetTick() - time_ms > 150) && flag_btn4 == 0) {
 80005d8:	f000 fb26 	bl	8000c28 <HAL_GetTick>
 80005dc:	4602      	mov	r2, r0
 80005de:	4b21      	ldr	r3, [pc, #132]	@ (8000664 <button_handler+0x1dc>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	1ad3      	subs	r3, r2, r3
 80005e4:	2b96      	cmp	r3, #150	@ 0x96
 80005e6:	d913      	bls.n	8000610 <button_handler+0x188>
 80005e8:	4b20      	ldr	r3, [pc, #128]	@ (800066c <button_handler+0x1e4>)
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d10f      	bne.n	8000610 <button_handler+0x188>
		flag_btn4 = 1;
 80005f0:	4b1e      	ldr	r3, [pc, #120]	@ (800066c <button_handler+0x1e4>)
 80005f2:	2201      	movs	r2, #1
 80005f4:	701a      	strb	r2, [r3, #0]
		/* SEND CAN GEAR DOWN MSG HERE */
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80005f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005fa:	4819      	ldr	r0, [pc, #100]	@ (8000660 <button_handler+0x1d8>)
 80005fc:	f001 fa65 	bl	8001aca <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000600:	2064      	movs	r0, #100	@ 0x64
 8000602:	f000 fb1b 	bl	8000c3c <HAL_Delay>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000606:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800060a:	4815      	ldr	r0, [pc, #84]	@ (8000660 <button_handler+0x1d8>)
 800060c:	f001 fa5d 	bl	8001aca <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && flag_btn4 == 1) {
 8000610:	2140      	movs	r1, #64	@ 0x40
 8000612:	4813      	ldr	r0, [pc, #76]	@ (8000660 <button_handler+0x1d8>)
 8000614:	f001 fa2a 	bl	8001a6c <HAL_GPIO_ReadPin>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d109      	bne.n	8000632 <button_handler+0x1aa>
 800061e:	4b13      	ldr	r3, [pc, #76]	@ (800066c <button_handler+0x1e4>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	2b01      	cmp	r3, #1
 8000624:	d105      	bne.n	8000632 <button_handler+0x1aa>
		flag_btn4 = 0;
 8000626:	4b11      	ldr	r3, [pc, #68]	@ (800066c <button_handler+0x1e4>)
 8000628:	2200      	movs	r2, #0
 800062a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800062c:	2064      	movs	r0, #100	@ 0x64
 800062e:	f000 fb05 	bl	8000c3c <HAL_Delay>
	}
	/* ENGINE STARTUP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)
 8000632:	2108      	movs	r1, #8
 8000634:	480a      	ldr	r0, [pc, #40]	@ (8000660 <button_handler+0x1d8>)
 8000636:	f001 fa19 	bl	8001a6c <HAL_GPIO_ReadPin>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d030      	beq.n	80006a2 <button_handler+0x21a>
			&& (HAL_GetTick() - time_ms > 150) && flag_btn1 == 0) {
 8000640:	f000 faf2 	bl	8000c28 <HAL_GetTick>
 8000644:	4602      	mov	r2, r0
 8000646:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <button_handler+0x1dc>)
 8000648:	681b      	ldr	r3, [r3, #0]
 800064a:	1ad3      	subs	r3, r2, r3
 800064c:	2b96      	cmp	r3, #150	@ 0x96
 800064e:	d928      	bls.n	80006a2 <button_handler+0x21a>
 8000650:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <button_handler+0x1e8>)
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b00      	cmp	r3, #0
 8000656:	d124      	bne.n	80006a2 <button_handler+0x21a>
		flag_btn1 = 1;
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <button_handler+0x1e8>)
 800065a:	2201      	movs	r2, #1
 800065c:	701a      	strb	r2, [r3, #0]
		while (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)) {
 800065e:	e019      	b.n	8000694 <button_handler+0x20c>
 8000660:	40010c00 	.word	0x40010c00
 8000664:	200000b4 	.word	0x200000b4
 8000668:	200000b8 	.word	0x200000b8
 800066c:	200000b9 	.word	0x200000b9
 8000670:	200000ba 	.word	0x200000ba
			/* SEND CAN MSG ENGINE STARTUP HERE */
			msg_type = 0;
 8000674:	4b56      	ldr	r3, [pc, #344]	@ (80007d0 <button_handler+0x348>)
 8000676:	2200      	movs	r2, #0
 8000678:	701a      	strb	r2, [r3, #0]
			//while (can_msg_handler(msg_type))
			//	;
			/* ENGINE STARTUP SWITCH IS NOT LATCHING ! */
#if DEBUG == 1
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800067a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800067e:	4855      	ldr	r0, [pc, #340]	@ (80007d4 <button_handler+0x34c>)
 8000680:	f001 fa23 	bl	8001aca <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000684:	2064      	movs	r0, #100	@ 0x64
 8000686:	f000 fad9 	bl	8000c3c <HAL_Delay>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800068a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800068e:	4851      	ldr	r0, [pc, #324]	@ (80007d4 <button_handler+0x34c>)
 8000690:	f001 fa1b 	bl	8001aca <HAL_GPIO_TogglePin>
		while (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)) {
 8000694:	2108      	movs	r1, #8
 8000696:	484f      	ldr	r0, [pc, #316]	@ (80007d4 <button_handler+0x34c>)
 8000698:	f001 f9e8 	bl	8001a6c <HAL_GPIO_ReadPin>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d1e8      	bne.n	8000674 <button_handler+0x1ec>
#endif
		}
	}
	if (!HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) && flag_btn1 == 1) {
 80006a2:	2108      	movs	r1, #8
 80006a4:	484b      	ldr	r0, [pc, #300]	@ (80007d4 <button_handler+0x34c>)
 80006a6:	f001 f9e1 	bl	8001a6c <HAL_GPIO_ReadPin>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d109      	bne.n	80006c4 <button_handler+0x23c>
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <button_handler+0x350>)
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	2b01      	cmp	r3, #1
 80006b6:	d105      	bne.n	80006c4 <button_handler+0x23c>
		flag_btn1 = 0;
 80006b8:	4b47      	ldr	r3, [pc, #284]	@ (80007d8 <button_handler+0x350>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80006be:	2064      	movs	r0, #100	@ 0x64
 80006c0:	f000 fabc 	bl	8000c3c <HAL_Delay>
	}
	/* ENGINE STOP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin)
 80006c4:	2110      	movs	r1, #16
 80006c6:	4843      	ldr	r0, [pc, #268]	@ (80007d4 <button_handler+0x34c>)
 80006c8:	f001 f9d0 	bl	8001a6c <HAL_GPIO_ReadPin>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d01b      	beq.n	800070a <button_handler+0x282>
			&& (HAL_GetTick() - time_ms > 150) && flag_btn2 == 0) {
 80006d2:	f000 faa9 	bl	8000c28 <HAL_GetTick>
 80006d6:	4602      	mov	r2, r0
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <button_handler+0x354>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	1ad3      	subs	r3, r2, r3
 80006de:	2b96      	cmp	r3, #150	@ 0x96
 80006e0:	d913      	bls.n	800070a <button_handler+0x282>
 80006e2:	4b3f      	ldr	r3, [pc, #252]	@ (80007e0 <button_handler+0x358>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d10f      	bne.n	800070a <button_handler+0x282>
		flag_btn2 = 1;
 80006ea:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <button_handler+0x358>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	701a      	strb	r2, [r3, #0]
		/* SEND CAN STOP ENGINE MSG HERE */
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80006f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f4:	4837      	ldr	r0, [pc, #220]	@ (80007d4 <button_handler+0x34c>)
 80006f6:	f001 f9e8 	bl	8001aca <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80006fa:	2064      	movs	r0, #100	@ 0x64
 80006fc:	f000 fa9e 	bl	8000c3c <HAL_Delay>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000700:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000704:	4833      	ldr	r0, [pc, #204]	@ (80007d4 <button_handler+0x34c>)
 8000706:	f001 f9e0 	bl	8001aca <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) && flag_btn2 == 1) {
 800070a:	2110      	movs	r1, #16
 800070c:	4831      	ldr	r0, [pc, #196]	@ (80007d4 <button_handler+0x34c>)
 800070e:	f001 f9ad 	bl	8001a6c <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d109      	bne.n	800072c <button_handler+0x2a4>
 8000718:	4b31      	ldr	r3, [pc, #196]	@ (80007e0 <button_handler+0x358>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d105      	bne.n	800072c <button_handler+0x2a4>
		flag_btn2 = 0;
 8000720:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <button_handler+0x358>)
 8000722:	2200      	movs	r2, #0
 8000724:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000726:	2064      	movs	r0, #100	@ 0x64
 8000728:	f000 fa88 	bl	8000c3c <HAL_Delay>
	}
	/* NEXT SCREEN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_5_GPIO_Port, BTN_5_Pin)
 800072c:	2180      	movs	r1, #128	@ 0x80
 800072e:	4829      	ldr	r0, [pc, #164]	@ (80007d4 <button_handler+0x34c>)
 8000730:	f001 f99c 	bl	8001a6c <HAL_GPIO_ReadPin>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d011      	beq.n	800075e <button_handler+0x2d6>
			&& (HAL_GetTick() - time_ms > 150) && flag_btn5 == 0) {
 800073a:	f000 fa75 	bl	8000c28 <HAL_GetTick>
 800073e:	4602      	mov	r2, r0
 8000740:	4b26      	ldr	r3, [pc, #152]	@ (80007dc <button_handler+0x354>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	1ad3      	subs	r3, r2, r3
 8000746:	2b96      	cmp	r3, #150	@ 0x96
 8000748:	d909      	bls.n	800075e <button_handler+0x2d6>
 800074a:	4b26      	ldr	r3, [pc, #152]	@ (80007e4 <button_handler+0x35c>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d105      	bne.n	800075e <button_handler+0x2d6>
		flag_btn5 = 1;
 8000752:	4b24      	ldr	r3, [pc, #144]	@ (80007e4 <button_handler+0x35c>)
 8000754:	2201      	movs	r2, #1
 8000756:	701a      	strb	r2, [r3, #0]
		/* SEND USART NEXT SCREEN MSG HERE */

		HAL_Delay(100);
 8000758:	2064      	movs	r0, #100	@ 0x64
 800075a:	f000 fa6f 	bl	8000c3c <HAL_Delay>
	}
	if (!HAL_GPIO_ReadPin(BTN_5_GPIO_Port, BTN_5_Pin) && flag_btn5 == 1) {
 800075e:	2180      	movs	r1, #128	@ 0x80
 8000760:	481c      	ldr	r0, [pc, #112]	@ (80007d4 <button_handler+0x34c>)
 8000762:	f001 f983 	bl	8001a6c <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d106      	bne.n	800077a <button_handler+0x2f2>
 800076c:	4b1d      	ldr	r3, [pc, #116]	@ (80007e4 <button_handler+0x35c>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b01      	cmp	r3, #1
 8000772:	d102      	bne.n	800077a <button_handler+0x2f2>
		flag_btn5 = 0;
 8000774:	4b1b      	ldr	r3, [pc, #108]	@ (80007e4 <button_handler+0x35c>)
 8000776:	2200      	movs	r2, #0
 8000778:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(100);
	}
	/* PREVIOUS SCREEN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_6_GPIO_Port, BTN_6_Pin)
 800077a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800077e:	481a      	ldr	r0, [pc, #104]	@ (80007e8 <button_handler+0x360>)
 8000780:	f001 f974 	bl	8001a6c <HAL_GPIO_ReadPin>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	d011      	beq.n	80007ae <button_handler+0x326>
			&& (HAL_GetTick() - time_ms > 150) && flag_btn6 == 0) {
 800078a:	f000 fa4d 	bl	8000c28 <HAL_GetTick>
 800078e:	4602      	mov	r2, r0
 8000790:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <button_handler+0x354>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	1ad3      	subs	r3, r2, r3
 8000796:	2b96      	cmp	r3, #150	@ 0x96
 8000798:	d909      	bls.n	80007ae <button_handler+0x326>
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <button_handler+0x364>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d105      	bne.n	80007ae <button_handler+0x326>
		flag_btn6 = 1;
 80007a2:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <button_handler+0x364>)
 80007a4:	2201      	movs	r2, #1
 80007a6:	701a      	strb	r2, [r3, #0]
		/* SEND USART PREVIOUS SCREEN MSG HERE */

		HAL_Delay(100);
 80007a8:	2064      	movs	r0, #100	@ 0x64
 80007aa:	f000 fa47 	bl	8000c3c <HAL_Delay>
	}
	if (!HAL_GPIO_ReadPin(BTN_6_GPIO_Port, BTN_6_Pin) && flag_btn6 == 1) {
 80007ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b2:	480d      	ldr	r0, [pc, #52]	@ (80007e8 <button_handler+0x360>)
 80007b4:	f001 f95a 	bl	8001a6c <HAL_GPIO_ReadPin>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d106      	bne.n	80007cc <button_handler+0x344>
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <button_handler+0x364>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d102      	bne.n	80007cc <button_handler+0x344>
		flag_btn6 = 0;
 80007c6:	4b09      	ldr	r3, [pc, #36]	@ (80007ec <button_handler+0x364>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(100);
	}

}
 80007cc:	bf00      	nop
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	20000000 	.word	0x20000000
 80007d4:	40010c00 	.word	0x40010c00
 80007d8:	200000ba 	.word	0x200000ba
 80007dc:	200000b4 	.word	0x200000b4
 80007e0:	200000bb 	.word	0x200000bb
 80007e4:	200000bc 	.word	0x200000bc
 80007e8:	40010800 	.word	0x40010800
 80007ec:	200000bd 	.word	0x200000bd

080007f0 <startup>:
		msg_type = 255; // SET NONE TYPE MSG
		return 0; // return OK value to prevent endless loop
	}
}
//TODO: define nextion_msg_handler() function
void startup() {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 80007f4:	2200      	movs	r2, #0
 80007f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80007fa:	4823      	ldr	r0, [pc, #140]	@ (8000888 <startup+0x98>)
 80007fc:	f001 f94d 	bl	8001a9a <HAL_GPIO_WritePin>
	TxHeader.StdId = 0x642;
 8000800:	4b22      	ldr	r3, [pc, #136]	@ (800088c <startup+0x9c>)
 8000802:	f240 6242 	movw	r2, #1602	@ 0x642
 8000806:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8000808:	4b20      	ldr	r3, [pc, #128]	@ (800088c <startup+0x9c>)
 800080a:	2200      	movs	r2, #0
 800080c:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA; // CAN_RTR_REMOTE
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <startup+0x9c>)
 8000810:	2200      	movs	r2, #0
 8000812:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;   // USE STANDART ID
 8000814:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <startup+0x9c>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 800081a:	4b1c      	ldr	r3, [pc, #112]	@ (800088c <startup+0x9c>)
 800081c:	2208      	movs	r2, #8
 800081e:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = 0;
 8000820:	4b1a      	ldr	r3, [pc, #104]	@ (800088c <startup+0x9c>)
 8000822:	2200      	movs	r2, #0
 8000824:	751a      	strb	r2, [r3, #20]
	while (HAL_CAN_Start(&hcan) == HAL_ERROR)
 8000826:	bf00      	nop
 8000828:	4819      	ldr	r0, [pc, #100]	@ (8000890 <startup+0xa0>)
 800082a:	f000 fbef 	bl	800100c <HAL_CAN_Start>
 800082e:	4603      	mov	r3, r0
 8000830:	2b01      	cmp	r3, #1
 8000832:	d0f9      	beq.n	8000828 <startup+0x38>
		;
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000834:	2102      	movs	r1, #2
 8000836:	4816      	ldr	r0, [pc, #88]	@ (8000890 <startup+0xa0>)
 8000838:	f000 fc2c 	bl	8001094 <HAL_CAN_ActivateNotification>
	/* SOME LED BLINK FOR SUCCESSFUL STARTUP*/
#if DEBUG == 1
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin, 1);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000842:	4814      	ldr	r0, [pc, #80]	@ (8000894 <startup+0xa4>)
 8000844:	f001 f929 	bl	8001a9a <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000848:	20c8      	movs	r0, #200	@ 0xc8
 800084a:	f000 f9f7 	bl	8000c3c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin, 0);
 800084e:	2200      	movs	r2, #0
 8000850:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000854:	480f      	ldr	r0, [pc, #60]	@ (8000894 <startup+0xa4>)
 8000856:	f001 f920 	bl	8001a9a <HAL_GPIO_WritePin>
#endif
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 800085a:	2201      	movs	r2, #1
 800085c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000860:	4809      	ldr	r0, [pc, #36]	@ (8000888 <startup+0x98>)
 8000862:	f001 f91a 	bl	8001a9a <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000866:	20c8      	movs	r0, #200	@ 0xc8
 8000868:	f000 f9e8 	bl	8000c3c <HAL_Delay>
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <startup+0x98>)
 8000874:	f001 f911 	bl	8001a9a <HAL_GPIO_WritePin>
	time_ms = HAL_GetTick();
 8000878:	f000 f9d6 	bl	8000c28 <HAL_GetTick>
 800087c:	4603      	mov	r3, r0
 800087e:	4a06      	ldr	r2, [pc, #24]	@ (8000898 <startup+0xa8>)
 8000880:	6013      	str	r3, [r2, #0]
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	40011000 	.word	0x40011000
 800088c:	2000009c 	.word	0x2000009c
 8000890:	2000002c 	.word	0x2000002c
 8000894:	40010c00 	.word	0x40010c00
 8000898:	200000b4 	.word	0x200000b4

0800089c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a0:	b672      	cpsid	i
}
 80008a2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 80008a4:	2201      	movs	r2, #1
 80008a6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008aa:	4805      	ldr	r0, [pc, #20]	@ (80008c0 <Error_Handler+0x24>)
 80008ac:	f001 f8f5 	bl	8001a9a <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 80008b0:	f241 3088 	movw	r0, #5000	@ 0x1388
 80008b4:	f000 f9c2 	bl	8000c3c <HAL_Delay>
		HAL_NVIC_SystemReset();
 80008b8:	f000 ff43 	bl	8001742 <HAL_NVIC_SystemReset>
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 80008bc:	bf00      	nop
 80008be:	e7f1      	b.n	80008a4 <Error_Handler+0x8>
 80008c0:	40011000 	.word	0x40011000

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ca:	4b15      	ldr	r3, [pc, #84]	@ (8000920 <HAL_MspInit+0x5c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a14      	ldr	r2, [pc, #80]	@ (8000920 <HAL_MspInit+0x5c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <HAL_MspInit+0x5c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000920 <HAL_MspInit+0x5c>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a0e      	ldr	r2, [pc, #56]	@ (8000920 <HAL_MspInit+0x5c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000920 <HAL_MspInit+0x5c>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	@ (8000924 <HAL_MspInit+0x60>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4a04      	ldr	r2, [pc, #16]	@ (8000924 <HAL_MspInit+0x60>)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	40021000 	.word	0x40021000
 8000924:	40010000 	.word	0x40010000

08000928 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08a      	sub	sp, #40	@ 0x28
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a2d      	ldr	r2, [pc, #180]	@ (80009f8 <HAL_CAN_MspInit+0xd0>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d153      	bne.n	80009f0 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000948:	4b2c      	ldr	r3, [pc, #176]	@ (80009fc <HAL_CAN_MspInit+0xd4>)
 800094a:	69db      	ldr	r3, [r3, #28]
 800094c:	4a2b      	ldr	r2, [pc, #172]	@ (80009fc <HAL_CAN_MspInit+0xd4>)
 800094e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000952:	61d3      	str	r3, [r2, #28]
 8000954:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <HAL_CAN_MspInit+0xd4>)
 8000956:	69db      	ldr	r3, [r3, #28]
 8000958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800095c:	613b      	str	r3, [r7, #16]
 800095e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000960:	4b26      	ldr	r3, [pc, #152]	@ (80009fc <HAL_CAN_MspInit+0xd4>)
 8000962:	699b      	ldr	r3, [r3, #24]
 8000964:	4a25      	ldr	r2, [pc, #148]	@ (80009fc <HAL_CAN_MspInit+0xd4>)
 8000966:	f043 0308 	orr.w	r3, r3, #8
 800096a:	6193      	str	r3, [r2, #24]
 800096c:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <HAL_CAN_MspInit+0xd4>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	f003 0308 	and.w	r3, r3, #8
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000978:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800097c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097e:	2300      	movs	r3, #0
 8000980:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	481c      	ldr	r0, [pc, #112]	@ (8000a00 <HAL_CAN_MspInit+0xd8>)
 800098e:	f000 fee9 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000992:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000996:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800099c:	2303      	movs	r3, #3
 800099e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4816      	ldr	r0, [pc, #88]	@ (8000a00 <HAL_CAN_MspInit+0xd8>)
 80009a8:	f000 fedc 	bl	8001764 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 80009ac:	4b15      	ldr	r3, [pc, #84]	@ (8000a04 <HAL_CAN_MspInit+0xdc>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009b4:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80009b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009bc:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80009c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80009ca:	4a0e      	ldr	r2, [pc, #56]	@ (8000a04 <HAL_CAN_MspInit+0xdc>)
 80009cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009ce:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 80009d0:	2200      	movs	r2, #0
 80009d2:	2101      	movs	r1, #1
 80009d4:	2014      	movs	r0, #20
 80009d6:	f000 fe8a 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80009da:	2014      	movs	r0, #20
 80009dc:	f000 fea3 	bl	8001726 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 80009e0:	2200      	movs	r2, #0
 80009e2:	2102      	movs	r1, #2
 80009e4:	2015      	movs	r0, #21
 80009e6:	f000 fe82 	bl	80016ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80009ea:	2015      	movs	r0, #21
 80009ec:	f000 fe9b 	bl	8001726 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 80009f0:	bf00      	nop
 80009f2:	3728      	adds	r7, #40	@ 0x28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	40006400 	.word	0x40006400
 80009fc:	40021000 	.word	0x40021000
 8000a00:	40010c00 	.word	0x40010c00
 8000a04:	40010000 	.word	0x40010000

08000a08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
 8000a18:	605a      	str	r2, [r3, #4]
 8000a1a:	609a      	str	r2, [r3, #8]
 8000a1c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a1c      	ldr	r2, [pc, #112]	@ (8000a94 <HAL_UART_MspInit+0x8c>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d131      	bne.n	8000a8c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000a28:	4b1b      	ldr	r3, [pc, #108]	@ (8000a98 <HAL_UART_MspInit+0x90>)
 8000a2a:	699b      	ldr	r3, [r3, #24]
 8000a2c:	4a1a      	ldr	r2, [pc, #104]	@ (8000a98 <HAL_UART_MspInit+0x90>)
 8000a2e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a32:	6193      	str	r3, [r2, #24]
 8000a34:	4b18      	ldr	r3, [pc, #96]	@ (8000a98 <HAL_UART_MspInit+0x90>)
 8000a36:	699b      	ldr	r3, [r3, #24]
 8000a38:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b15      	ldr	r3, [pc, #84]	@ (8000a98 <HAL_UART_MspInit+0x90>)
 8000a42:	699b      	ldr	r3, [r3, #24]
 8000a44:	4a14      	ldr	r2, [pc, #80]	@ (8000a98 <HAL_UART_MspInit+0x90>)
 8000a46:	f043 0304 	orr.w	r3, r3, #4
 8000a4a:	6193      	str	r3, [r2, #24]
 8000a4c:	4b12      	ldr	r3, [pc, #72]	@ (8000a98 <HAL_UART_MspInit+0x90>)
 8000a4e:	699b      	ldr	r3, [r3, #24]
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	60bb      	str	r3, [r7, #8]
 8000a56:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a58:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a5c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a62:	2303      	movs	r3, #3
 8000a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a66:	f107 0310 	add.w	r3, r7, #16
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	480b      	ldr	r0, [pc, #44]	@ (8000a9c <HAL_UART_MspInit+0x94>)
 8000a6e:	f000 fe79 	bl	8001764 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000a72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a76:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4619      	mov	r1, r3
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <HAL_UART_MspInit+0x94>)
 8000a88:	f000 fe6c 	bl	8001764 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a8c:	bf00      	nop
 8000a8e:	3720      	adds	r7, #32
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40013800 	.word	0x40013800
 8000a98:	40021000 	.word	0x40021000
 8000a9c:	40010800 	.word	0x40010800

08000aa0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000aa4:	bf00      	nop
 8000aa6:	e7fd      	b.n	8000aa4 <NMI_Handler+0x4>

08000aa8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <HardFault_Handler+0x4>

08000ab0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <MemManage_Handler+0x4>

08000ab8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bc80      	pop	{r7}
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bc80      	pop	{r7}
 8000ade:	4770      	bx	lr

08000ae0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae4:	bf00      	nop
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bc80      	pop	{r7}
 8000aea:	4770      	bx	lr

08000aec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af0:	f000 f888 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000afc:	4802      	ldr	r0, [pc, #8]	@ (8000b08 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000afe:	f000 faee 	bl	80010de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	2000002c 	.word	0x2000002c

08000b0c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000b10:	4802      	ldr	r0, [pc, #8]	@ (8000b1c <CAN1_RX1_IRQHandler+0x10>)
 8000b12:	f000 fae4 	bl	80010de <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000b16:	bf00      	nop
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000002c 	.word	0x2000002c

08000b20 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b2c:	f7ff fff8 	bl	8000b20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480b      	ldr	r0, [pc, #44]	@ (8000b60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b32:	490c      	ldr	r1, [pc, #48]	@ (8000b64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b34:	4a0c      	ldr	r2, [pc, #48]	@ (8000b68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a09      	ldr	r2, [pc, #36]	@ (8000b6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b48:	4c09      	ldr	r4, [pc, #36]	@ (8000b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f001 fcc7 	bl	80024e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5a:	f7ff fb0b 	bl	8000174 <main>
  bx lr
 8000b5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b68:	0800259c 	.word	0x0800259c
  ldr r2, =_sbss
 8000b6c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b70:	200000c4 	.word	0x200000c4

08000b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_2_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_Init+0x28>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <HAL_Init+0x28>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 fda5 	bl	80016d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	200f      	movs	r0, #15
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fe96 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fdc1 	bl	800174a <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 fd85 	bl	80016ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	@ (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000004 	.word	0x20000004
 8000bfc:	2000000c 	.word	0x2000000c
 8000c00:	20000008 	.word	0x20000008

08000c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <HAL_IncTick+0x1c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a03      	ldr	r2, [pc, #12]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	2000000c 	.word	0x2000000c
 8000c24:	200000c0 	.word	0x200000c0

08000c28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b02      	ldr	r3, [pc, #8]	@ (8000c38 <HAL_GetTick+0x10>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	200000c0 	.word	0x200000c0

08000c3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c44:	f7ff fff0 	bl	8000c28 <HAL_GetTick>
 8000c48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c54:	d005      	beq.n	8000c62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c56:	4b0a      	ldr	r3, [pc, #40]	@ (8000c80 <HAL_Delay+0x44>)
 8000c58:	781b      	ldrb	r3, [r3, #0]
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	4413      	add	r3, r2
 8000c60:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c62:	bf00      	nop
 8000c64:	f7ff ffe0 	bl	8000c28 <HAL_GetTick>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	68fa      	ldr	r2, [r7, #12]
 8000c70:	429a      	cmp	r2, r3
 8000c72:	d8f7      	bhi.n	8000c64 <HAL_Delay+0x28>
  {
  }
}
 8000c74:	bf00      	nop
 8000c76:	bf00      	nop
 8000c78:	3710      	adds	r7, #16
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	2000000c 	.word	0x2000000c

08000c84 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e0ed      	b.n	8000e72 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c9c:	b2db      	uxtb	r3, r3
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d102      	bne.n	8000ca8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000ca2:	6878      	ldr	r0, [r7, #4]
 8000ca4:	f7ff fe40 	bl	8000928 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f042 0201 	orr.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cb8:	f7ff ffb6 	bl	8000c28 <HAL_GetTick>
 8000cbc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cbe:	e012      	b.n	8000ce6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000cc0:	f7ff ffb2 	bl	8000c28 <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	2b0a      	cmp	r3, #10
 8000ccc:	d90b      	bls.n	8000ce6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000cd2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2205      	movs	r2, #5
 8000cde:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e0c5      	b.n	8000e72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d0e5      	beq.n	8000cc0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 0202 	bic.w	r2, r2, #2
 8000d02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d04:	f7ff ff90 	bl	8000c28 <HAL_GetTick>
 8000d08:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d0a:	e012      	b.n	8000d32 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d0c:	f7ff ff8c 	bl	8000c28 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b0a      	cmp	r3, #10
 8000d18:	d90b      	bls.n	8000d32 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2205      	movs	r2, #5
 8000d2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e09f      	b.n	8000e72 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	f003 0302 	and.w	r3, r3, #2
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d1e5      	bne.n	8000d0c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	7e1b      	ldrb	r3, [r3, #24]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d108      	bne.n	8000d5a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000d56:	601a      	str	r2, [r3, #0]
 8000d58:	e007      	b.n	8000d6a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	681a      	ldr	r2, [r3, #0]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	7e5b      	ldrb	r3, [r3, #25]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d108      	bne.n	8000d84 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	e007      	b.n	8000d94 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681a      	ldr	r2, [r3, #0]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	7e9b      	ldrb	r3, [r3, #26]
 8000d98:	2b01      	cmp	r3, #1
 8000d9a:	d108      	bne.n	8000dae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f042 0220 	orr.w	r2, r2, #32
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	e007      	b.n	8000dbe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f022 0220 	bic.w	r2, r2, #32
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	7edb      	ldrb	r3, [r3, #27]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d108      	bne.n	8000dd8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f022 0210 	bic.w	r2, r2, #16
 8000dd4:	601a      	str	r2, [r3, #0]
 8000dd6:	e007      	b.n	8000de8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	f042 0210 	orr.w	r2, r2, #16
 8000de6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	7f1b      	ldrb	r3, [r3, #28]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d108      	bne.n	8000e02 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f042 0208 	orr.w	r2, r2, #8
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	e007      	b.n	8000e12 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f022 0208 	bic.w	r2, r2, #8
 8000e10:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	7f5b      	ldrb	r3, [r3, #29]
 8000e16:	2b01      	cmp	r3, #1
 8000e18:	d108      	bne.n	8000e2c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f042 0204 	orr.w	r2, r2, #4
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	e007      	b.n	8000e3c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0204 	bic.w	r2, r2, #4
 8000e3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	431a      	orrs	r2, r3
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	691b      	ldr	r3, [r3, #16]
 8000e4a:	431a      	orrs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	695b      	ldr	r3, [r3, #20]
 8000e50:	ea42 0103 	orr.w	r1, r2, r3
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	1e5a      	subs	r2, r3, #1
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	430a      	orrs	r2, r1
 8000e60:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	2200      	movs	r2, #0
 8000e66:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2201      	movs	r2, #1
 8000e6c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b087      	sub	sp, #28
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e90:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e92:	7cfb      	ldrb	r3, [r7, #19]
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d003      	beq.n	8000ea0 <HAL_CAN_ConfigFilter+0x26>
 8000e98:	7cfb      	ldrb	r3, [r7, #19]
 8000e9a:	2b02      	cmp	r3, #2
 8000e9c:	f040 80aa 	bne.w	8000ff4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ea6:	f043 0201 	orr.w	r2, r3, #1
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	695b      	ldr	r3, [r3, #20]
 8000eb4:	f003 031f 	and.w	r3, r3, #31
 8000eb8:	2201      	movs	r2, #1
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	69db      	ldr	r3, [r3, #28]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d123      	bne.n	8000f22 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	43db      	mvns	r3, r3
 8000ee4:	401a      	ands	r2, r3
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68db      	ldr	r3, [r3, #12]
 8000ef0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ef8:	683a      	ldr	r2, [r7, #0]
 8000efa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000efc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3248      	adds	r2, #72	@ 0x48
 8000f02:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f16:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f18:	6979      	ldr	r1, [r7, #20]
 8000f1a:	3348      	adds	r3, #72	@ 0x48
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	440b      	add	r3, r1
 8000f20:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	69db      	ldr	r3, [r3, #28]
 8000f26:	2b01      	cmp	r3, #1
 8000f28:	d122      	bne.n	8000f70 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	431a      	orrs	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f46:	683a      	ldr	r2, [r7, #0]
 8000f48:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000f4a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	3248      	adds	r2, #72	@ 0x48
 8000f50:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	68db      	ldr	r3, [r3, #12]
 8000f5e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000f64:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000f66:	6979      	ldr	r1, [r7, #20]
 8000f68:	3348      	adds	r3, #72	@ 0x48
 8000f6a:	00db      	lsls	r3, r3, #3
 8000f6c:	440b      	add	r3, r1
 8000f6e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d109      	bne.n	8000f8c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	43db      	mvns	r3, r3
 8000f82:	401a      	ands	r2, r3
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8000f8a:	e007      	b.n	8000f9c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	431a      	orrs	r2, r3
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	691b      	ldr	r3, [r3, #16]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d109      	bne.n	8000fb8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	43db      	mvns	r3, r3
 8000fae:	401a      	ands	r2, r3
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8000fb6:	e007      	b.n	8000fc8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	431a      	orrs	r2, r3
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d107      	bne.n	8000fe0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	431a      	orrs	r2, r3
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000fe6:	f023 0201 	bic.w	r2, r3, #1
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	e006      	b.n	8001002 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ff8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001000:	2301      	movs	r3, #1
  }
}
 8001002:	4618      	mov	r0, r3
 8001004:	371c      	adds	r7, #28
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3020 	ldrb.w	r3, [r3, #32]
 800101a:	b2db      	uxtb	r3, r3
 800101c:	2b01      	cmp	r3, #1
 800101e:	d12e      	bne.n	800107e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2202      	movs	r2, #2
 8001024:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f022 0201 	bic.w	r2, r2, #1
 8001036:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001038:	f7ff fdf6 	bl	8000c28 <HAL_GetTick>
 800103c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800103e:	e012      	b.n	8001066 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001040:	f7ff fdf2 	bl	8000c28 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b0a      	cmp	r3, #10
 800104c:	d90b      	bls.n	8001066 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001052:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2205      	movs	r2, #5
 800105e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e012      	b.n	800108c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	2b00      	cmp	r3, #0
 8001072:	d1e5      	bne.n	8001040 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	e006      	b.n	800108c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001082:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
  }
}
 800108c:	4618      	mov	r0, r3
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010a4:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80010a6:	7bfb      	ldrb	r3, [r7, #15]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d002      	beq.n	80010b2 <HAL_CAN_ActivateNotification+0x1e>
 80010ac:	7bfb      	ldrb	r3, [r7, #15]
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d109      	bne.n	80010c6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	6959      	ldr	r1, [r3, #20]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	430a      	orrs	r2, r1
 80010c0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80010c2:	2300      	movs	r3, #0
 80010c4:	e006      	b.n	80010d4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010ca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80010d2:	2301      	movs	r3, #1
  }
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bc80      	pop	{r7}
 80010dc:	4770      	bx	lr

080010de <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b08a      	sub	sp, #40	@ 0x28
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80010e6:	2300      	movs	r3, #0
 80010e8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	695b      	ldr	r3, [r3, #20]
 80010f0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	691b      	ldr	r3, [r3, #16]
 8001110:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800111a:	6a3b      	ldr	r3, [r7, #32]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d07c      	beq.n	800121e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001124:	69bb      	ldr	r3, [r7, #24]
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d023      	beq.n	8001176 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2201      	movs	r2, #1
 8001134:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001136:	69bb      	ldr	r3, [r7, #24]
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	2b00      	cmp	r3, #0
 800113e:	d003      	beq.n	8001148 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	f000 f983 	bl	800144c <HAL_CAN_TxMailbox0CompleteCallback>
 8001146:	e016      	b.n	8001176 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	2b00      	cmp	r3, #0
 8001150:	d004      	beq.n	800115c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001158:	627b      	str	r3, [r7, #36]	@ 0x24
 800115a:	e00c      	b.n	8001176 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d004      	beq.n	8001170 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001168:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800116c:	627b      	str	r3, [r7, #36]	@ 0x24
 800116e:	e002      	b.n	8001176 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f000 f986 	bl	8001482 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800117c:	2b00      	cmp	r3, #0
 800117e:	d024      	beq.n	80011ca <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001188:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800118a:	69bb      	ldr	r3, [r7, #24]
 800118c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f000 f962 	bl	800145e <HAL_CAN_TxMailbox1CompleteCallback>
 800119a:	e016      	b.n	80011ca <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800119c:	69bb      	ldr	r3, [r7, #24]
 800119e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d004      	beq.n	80011b0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80011a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011a8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80011ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80011ae:	e00c      	b.n	80011ca <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d004      	beq.n	80011c4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80011ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011bc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80011c2:	e002      	b.n	80011ca <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f000 f965 	bl	8001494 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80011ca:	69bb      	ldr	r3, [r7, #24]
 80011cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d024      	beq.n	800121e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011dc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 f941 	bl	8001470 <HAL_CAN_TxMailbox2CompleteCallback>
 80011ee:	e016      	b.n	800121e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d004      	beq.n	8001204 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80011fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011fc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001200:	627b      	str	r3, [r7, #36]	@ 0x24
 8001202:	e00c      	b.n	800121e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001204:	69bb      	ldr	r3, [r7, #24]
 8001206:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
 8001216:	e002      	b.n	800121e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f944 	bl	80014a6 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800121e:	6a3b      	ldr	r3, [r7, #32]
 8001220:	f003 0308 	and.w	r3, r3, #8
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	f003 0310 	and.w	r3, r3, #16
 800122e:	2b00      	cmp	r3, #0
 8001230:	d007      	beq.n	8001242 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001234:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001238:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2210      	movs	r2, #16
 8001240:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001242:	6a3b      	ldr	r3, [r7, #32]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00b      	beq.n	8001264 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d006      	beq.n	8001264 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2208      	movs	r2, #8
 800125c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f92a 	bl	80014b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001264:	6a3b      	ldr	r3, [r7, #32]
 8001266:	f003 0302 	and.w	r3, r3, #2
 800126a:	2b00      	cmp	r3, #0
 800126c:	d009      	beq.n	8001282 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	f003 0303 	and.w	r3, r3, #3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d002      	beq.n	8001282 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7fe ff65 	bl	800014c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001282:	6a3b      	ldr	r3, [r7, #32]
 8001284:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001288:	2b00      	cmp	r3, #0
 800128a:	d00c      	beq.n	80012a6 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	d007      	beq.n	80012a6 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001298:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800129c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2210      	movs	r2, #16
 80012a4:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80012a6:	6a3b      	ldr	r3, [r7, #32]
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00b      	beq.n	80012c8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	f003 0308 	and.w	r3, r3, #8
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d006      	beq.n	80012c8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2208      	movs	r2, #8
 80012c0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f90a 	bl	80014dc <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80012c8:	6a3b      	ldr	r3, [r7, #32]
 80012ca:	f003 0310 	and.w	r3, r3, #16
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d009      	beq.n	80012e6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	f003 0303 	and.w	r3, r3, #3
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f000 f8f2 	bl	80014ca <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80012e6:	6a3b      	ldr	r3, [r7, #32]
 80012e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d00b      	beq.n	8001308 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	f003 0310 	and.w	r3, r3, #16
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d006      	beq.n	8001308 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	2210      	movs	r2, #16
 8001300:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 f8f3 	bl	80014ee <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001308:	6a3b      	ldr	r3, [r7, #32]
 800130a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d00b      	beq.n	800132a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001312:	69fb      	ldr	r3, [r7, #28]
 8001314:	f003 0308 	and.w	r3, r3, #8
 8001318:	2b00      	cmp	r3, #0
 800131a:	d006      	beq.n	800132a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	2208      	movs	r2, #8
 8001322:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 f8eb 	bl	8001500 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001330:	2b00      	cmp	r3, #0
 8001332:	d07b      	beq.n	800142c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	2b00      	cmp	r3, #0
 800133c:	d072      	beq.n	8001424 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800133e:	6a3b      	ldr	r3, [r7, #32]
 8001340:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001344:	2b00      	cmp	r3, #0
 8001346:	d008      	beq.n	800135a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800135a:	6a3b      	ldr	r3, [r7, #32]
 800135c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001360:	2b00      	cmp	r3, #0
 8001362:	d008      	beq.n	8001376 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	f043 0302 	orr.w	r3, r3, #2
 8001374:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800137c:	2b00      	cmp	r3, #0
 800137e:	d008      	beq.n	8001392 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800138a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800138c:	f043 0304 	orr.w	r3, r3, #4
 8001390:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001392:	6a3b      	ldr	r3, [r7, #32]
 8001394:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001398:	2b00      	cmp	r3, #0
 800139a:	d043      	beq.n	8001424 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d03e      	beq.n	8001424 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80013ac:	2b60      	cmp	r3, #96	@ 0x60
 80013ae:	d02b      	beq.n	8001408 <HAL_CAN_IRQHandler+0x32a>
 80013b0:	2b60      	cmp	r3, #96	@ 0x60
 80013b2:	d82e      	bhi.n	8001412 <HAL_CAN_IRQHandler+0x334>
 80013b4:	2b50      	cmp	r3, #80	@ 0x50
 80013b6:	d022      	beq.n	80013fe <HAL_CAN_IRQHandler+0x320>
 80013b8:	2b50      	cmp	r3, #80	@ 0x50
 80013ba:	d82a      	bhi.n	8001412 <HAL_CAN_IRQHandler+0x334>
 80013bc:	2b40      	cmp	r3, #64	@ 0x40
 80013be:	d019      	beq.n	80013f4 <HAL_CAN_IRQHandler+0x316>
 80013c0:	2b40      	cmp	r3, #64	@ 0x40
 80013c2:	d826      	bhi.n	8001412 <HAL_CAN_IRQHandler+0x334>
 80013c4:	2b30      	cmp	r3, #48	@ 0x30
 80013c6:	d010      	beq.n	80013ea <HAL_CAN_IRQHandler+0x30c>
 80013c8:	2b30      	cmp	r3, #48	@ 0x30
 80013ca:	d822      	bhi.n	8001412 <HAL_CAN_IRQHandler+0x334>
 80013cc:	2b10      	cmp	r3, #16
 80013ce:	d002      	beq.n	80013d6 <HAL_CAN_IRQHandler+0x2f8>
 80013d0:	2b20      	cmp	r3, #32
 80013d2:	d005      	beq.n	80013e0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80013d4:	e01d      	b.n	8001412 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	f043 0308 	orr.w	r3, r3, #8
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013de:	e019      	b.n	8001414 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80013e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e2:	f043 0310 	orr.w	r3, r3, #16
 80013e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013e8:	e014      	b.n	8001414 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80013ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013ec:	f043 0320 	orr.w	r3, r3, #32
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013f2:	e00f      	b.n	8001414 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80013f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80013fc:	e00a      	b.n	8001414 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80013fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001404:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001406:	e005      	b.n	8001414 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800140a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001410:	e000      	b.n	8001414 <HAL_CAN_IRQHandler+0x336>
            break;
 8001412:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	699a      	ldr	r2, [r3, #24]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001422:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2204      	movs	r2, #4
 800142a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800142c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142e:	2b00      	cmp	r3, #0
 8001430:	d008      	beq.n	8001444 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001438:	431a      	orrs	r2, r3
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7fe fe8d 	bl	800015e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001444:	bf00      	nop
 8001446:	3728      	adds	r7, #40	@ 0x28
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800144c:	b480      	push	{r7}
 800144e:	b083      	sub	sp, #12
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800145e:	b480      	push	{r7}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001466:	bf00      	nop
 8001468:	370c      	adds	r7, #12
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001482:	b480      	push	{r7}
 8001484:	b083      	sub	sp, #12
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800148a:	bf00      	nop
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	bc80      	pop	{r7}
 8001492:	4770      	bx	lr

08001494 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800149c:	bf00      	nop
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr

080014a6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b083      	sub	sp, #12
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bc80      	pop	{r7}
 80014c8:	4770      	bx	lr

080014ca <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80014d2:	bf00      	nop
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bc80      	pop	{r7}
 80014da:	4770      	bx	lr

080014dc <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bc80      	pop	{r7}
 80014ec:	4770      	bx	lr

080014ee <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bc80      	pop	{r7}
 80014fe:	4770      	bx	lr

08001500 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	bc80      	pop	{r7}
 8001510:	4770      	bx	lr
	...

08001514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f003 0307 	and.w	r3, r3, #7
 8001522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001524:	4b0c      	ldr	r3, [pc, #48]	@ (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800152a:	68ba      	ldr	r2, [r7, #8]
 800152c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800153c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001546:	4a04      	ldr	r2, [pc, #16]	@ (8001558 <__NVIC_SetPriorityGrouping+0x44>)
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	60d3      	str	r3, [r2, #12]
}
 800154c:	bf00      	nop
 800154e:	3714      	adds	r7, #20
 8001550:	46bd      	mov	sp, r7
 8001552:	bc80      	pop	{r7}
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001560:	4b04      	ldr	r3, [pc, #16]	@ (8001574 <__NVIC_GetPriorityGrouping+0x18>)
 8001562:	68db      	ldr	r3, [r3, #12]
 8001564:	0a1b      	lsrs	r3, r3, #8
 8001566:	f003 0307 	and.w	r3, r3, #7
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	bc80      	pop	{r7}
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001586:	2b00      	cmp	r3, #0
 8001588:	db0b      	blt.n	80015a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800158a:	79fb      	ldrb	r3, [r7, #7]
 800158c:	f003 021f 	and.w	r2, r3, #31
 8001590:	4906      	ldr	r1, [pc, #24]	@ (80015ac <__NVIC_EnableIRQ+0x34>)
 8001592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001596:	095b      	lsrs	r3, r3, #5
 8001598:	2001      	movs	r0, #1
 800159a:	fa00 f202 	lsl.w	r2, r0, r2
 800159e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015a2:	bf00      	nop
 80015a4:	370c      	adds	r7, #12
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	e000e100 	.word	0xe000e100

080015b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	6039      	str	r1, [r7, #0]
 80015ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	db0a      	blt.n	80015da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	b2da      	uxtb	r2, r3
 80015c8:	490c      	ldr	r1, [pc, #48]	@ (80015fc <__NVIC_SetPriority+0x4c>)
 80015ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ce:	0112      	lsls	r2, r2, #4
 80015d0:	b2d2      	uxtb	r2, r2
 80015d2:	440b      	add	r3, r1
 80015d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d8:	e00a      	b.n	80015f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	b2da      	uxtb	r2, r3
 80015de:	4908      	ldr	r1, [pc, #32]	@ (8001600 <__NVIC_SetPriority+0x50>)
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	3b04      	subs	r3, #4
 80015e8:	0112      	lsls	r2, r2, #4
 80015ea:	b2d2      	uxtb	r2, r2
 80015ec:	440b      	add	r3, r1
 80015ee:	761a      	strb	r2, [r3, #24]
}
 80015f0:	bf00      	nop
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bc80      	pop	{r7}
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000e100 	.word	0xe000e100
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001604:	b480      	push	{r7}
 8001606:	b089      	sub	sp, #36	@ 0x24
 8001608:	af00      	add	r7, sp, #0
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	60b9      	str	r1, [r7, #8]
 800160e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f1c3 0307 	rsb	r3, r3, #7
 800161e:	2b04      	cmp	r3, #4
 8001620:	bf28      	it	cs
 8001622:	2304      	movcs	r3, #4
 8001624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3304      	adds	r3, #4
 800162a:	2b06      	cmp	r3, #6
 800162c:	d902      	bls.n	8001634 <NVIC_EncodePriority+0x30>
 800162e:	69fb      	ldr	r3, [r7, #28]
 8001630:	3b03      	subs	r3, #3
 8001632:	e000      	b.n	8001636 <NVIC_EncodePriority+0x32>
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001638:	f04f 32ff 	mov.w	r2, #4294967295
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	fa02 f303 	lsl.w	r3, r2, r3
 8001642:	43da      	mvns	r2, r3
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	401a      	ands	r2, r3
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	fa01 f303 	lsl.w	r3, r1, r3
 8001656:	43d9      	mvns	r1, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800165c:	4313      	orrs	r3, r2
         );
}
 800165e:	4618      	mov	r0, r3
 8001660:	3724      	adds	r7, #36	@ 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800166c:	f3bf 8f4f 	dsb	sy
}
 8001670:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <__NVIC_SystemReset+0x24>)
 8001674:	68db      	ldr	r3, [r3, #12]
 8001676:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800167a:	4904      	ldr	r1, [pc, #16]	@ (800168c <__NVIC_SystemReset+0x24>)
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <__NVIC_SystemReset+0x28>)
 800167e:	4313      	orrs	r3, r2
 8001680:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001682:	f3bf 8f4f 	dsb	sy
}
 8001686:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001688:	bf00      	nop
 800168a:	e7fd      	b.n	8001688 <__NVIC_SystemReset+0x20>
 800168c:	e000ed00 	.word	0xe000ed00
 8001690:	05fa0004 	.word	0x05fa0004

08001694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b082      	sub	sp, #8
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	3b01      	subs	r3, #1
 80016a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016a4:	d301      	bcc.n	80016aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e00f      	b.n	80016ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016aa:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <SysTick_Config+0x40>)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016b2:	210f      	movs	r1, #15
 80016b4:	f04f 30ff 	mov.w	r0, #4294967295
 80016b8:	f7ff ff7a 	bl	80015b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016bc:	4b05      	ldr	r3, [pc, #20]	@ (80016d4 <SysTick_Config+0x40>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016c2:	4b04      	ldr	r3, [pc, #16]	@ (80016d4 <SysTick_Config+0x40>)
 80016c4:	2207      	movs	r2, #7
 80016c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016c8:	2300      	movs	r3, #0
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	e000e010 	.word	0xe000e010

080016d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f7ff ff17 	bl	8001514 <__NVIC_SetPriorityGrouping>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b086      	sub	sp, #24
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	60b9      	str	r1, [r7, #8]
 80016f8:	607a      	str	r2, [r7, #4]
 80016fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001700:	f7ff ff2c 	bl	800155c <__NVIC_GetPriorityGrouping>
 8001704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	6978      	ldr	r0, [r7, #20]
 800170c:	f7ff ff7a 	bl	8001604 <NVIC_EncodePriority>
 8001710:	4602      	mov	r2, r0
 8001712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ff49 	bl	80015b0 <__NVIC_SetPriority>
}
 800171e:	bf00      	nop
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001726:	b580      	push	{r7, lr}
 8001728:	b082      	sub	sp, #8
 800172a:	af00      	add	r7, sp, #0
 800172c:	4603      	mov	r3, r0
 800172e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff1f 	bl	8001578 <__NVIC_EnableIRQ>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001746:	f7ff ff8f 	bl	8001668 <__NVIC_SystemReset>

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ff9e 	bl	8001694 <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b08b      	sub	sp, #44	@ 0x2c
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001772:	2300      	movs	r3, #0
 8001774:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001776:	e169      	b.n	8001a4c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001778:	2201      	movs	r2, #1
 800177a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	4013      	ands	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	429a      	cmp	r2, r3
 8001792:	f040 8158 	bne.w	8001a46 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a9a      	ldr	r2, [pc, #616]	@ (8001a04 <HAL_GPIO_Init+0x2a0>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d05e      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017a0:	4a98      	ldr	r2, [pc, #608]	@ (8001a04 <HAL_GPIO_Init+0x2a0>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d875      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017a6:	4a98      	ldr	r2, [pc, #608]	@ (8001a08 <HAL_GPIO_Init+0x2a4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d058      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017ac:	4a96      	ldr	r2, [pc, #600]	@ (8001a08 <HAL_GPIO_Init+0x2a4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d86f      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017b2:	4a96      	ldr	r2, [pc, #600]	@ (8001a0c <HAL_GPIO_Init+0x2a8>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d052      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017b8:	4a94      	ldr	r2, [pc, #592]	@ (8001a0c <HAL_GPIO_Init+0x2a8>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d869      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017be:	4a94      	ldr	r2, [pc, #592]	@ (8001a10 <HAL_GPIO_Init+0x2ac>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d04c      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017c4:	4a92      	ldr	r2, [pc, #584]	@ (8001a10 <HAL_GPIO_Init+0x2ac>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d863      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017ca:	4a92      	ldr	r2, [pc, #584]	@ (8001a14 <HAL_GPIO_Init+0x2b0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d046      	beq.n	800185e <HAL_GPIO_Init+0xfa>
 80017d0:	4a90      	ldr	r2, [pc, #576]	@ (8001a14 <HAL_GPIO_Init+0x2b0>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d85d      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017d6:	2b12      	cmp	r3, #18
 80017d8:	d82a      	bhi.n	8001830 <HAL_GPIO_Init+0xcc>
 80017da:	2b12      	cmp	r3, #18
 80017dc:	d859      	bhi.n	8001892 <HAL_GPIO_Init+0x12e>
 80017de:	a201      	add	r2, pc, #4	@ (adr r2, 80017e4 <HAL_GPIO_Init+0x80>)
 80017e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017e4:	0800185f 	.word	0x0800185f
 80017e8:	08001839 	.word	0x08001839
 80017ec:	0800184b 	.word	0x0800184b
 80017f0:	0800188d 	.word	0x0800188d
 80017f4:	08001893 	.word	0x08001893
 80017f8:	08001893 	.word	0x08001893
 80017fc:	08001893 	.word	0x08001893
 8001800:	08001893 	.word	0x08001893
 8001804:	08001893 	.word	0x08001893
 8001808:	08001893 	.word	0x08001893
 800180c:	08001893 	.word	0x08001893
 8001810:	08001893 	.word	0x08001893
 8001814:	08001893 	.word	0x08001893
 8001818:	08001893 	.word	0x08001893
 800181c:	08001893 	.word	0x08001893
 8001820:	08001893 	.word	0x08001893
 8001824:	08001893 	.word	0x08001893
 8001828:	08001841 	.word	0x08001841
 800182c:	08001855 	.word	0x08001855
 8001830:	4a79      	ldr	r2, [pc, #484]	@ (8001a18 <HAL_GPIO_Init+0x2b4>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d013      	beq.n	800185e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001836:	e02c      	b.n	8001892 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	623b      	str	r3, [r7, #32]
          break;
 800183e:	e029      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	3304      	adds	r3, #4
 8001846:	623b      	str	r3, [r7, #32]
          break;
 8001848:	e024      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	3308      	adds	r3, #8
 8001850:	623b      	str	r3, [r7, #32]
          break;
 8001852:	e01f      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	330c      	adds	r3, #12
 800185a:	623b      	str	r3, [r7, #32]
          break;
 800185c:	e01a      	b.n	8001894 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d102      	bne.n	800186c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001866:	2304      	movs	r3, #4
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e013      	b.n	8001894 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	2b01      	cmp	r3, #1
 8001872:	d105      	bne.n	8001880 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001874:	2308      	movs	r3, #8
 8001876:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	69fa      	ldr	r2, [r7, #28]
 800187c:	611a      	str	r2, [r3, #16]
          break;
 800187e:	e009      	b.n	8001894 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001880:	2308      	movs	r3, #8
 8001882:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69fa      	ldr	r2, [r7, #28]
 8001888:	615a      	str	r2, [r3, #20]
          break;
 800188a:	e003      	b.n	8001894 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800188c:	2300      	movs	r3, #0
 800188e:	623b      	str	r3, [r7, #32]
          break;
 8001890:	e000      	b.n	8001894 <HAL_GPIO_Init+0x130>
          break;
 8001892:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001894:	69bb      	ldr	r3, [r7, #24]
 8001896:	2bff      	cmp	r3, #255	@ 0xff
 8001898:	d801      	bhi.n	800189e <HAL_GPIO_Init+0x13a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	e001      	b.n	80018a2 <HAL_GPIO_Init+0x13e>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3304      	adds	r3, #4
 80018a2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2bff      	cmp	r3, #255	@ 0xff
 80018a8:	d802      	bhi.n	80018b0 <HAL_GPIO_Init+0x14c>
 80018aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	e002      	b.n	80018b6 <HAL_GPIO_Init+0x152>
 80018b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018b2:	3b08      	subs	r3, #8
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	210f      	movs	r1, #15
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	fa01 f303 	lsl.w	r3, r1, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	401a      	ands	r2, r3
 80018c8:	6a39      	ldr	r1, [r7, #32]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	fa01 f303 	lsl.w	r3, r1, r3
 80018d0:	431a      	orrs	r2, r3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 80b1 	beq.w	8001a46 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e4:	4b4d      	ldr	r3, [pc, #308]	@ (8001a1c <HAL_GPIO_Init+0x2b8>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a4c      	ldr	r2, [pc, #304]	@ (8001a1c <HAL_GPIO_Init+0x2b8>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b4a      	ldr	r3, [pc, #296]	@ (8001a1c <HAL_GPIO_Init+0x2b8>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80018fc:	4a48      	ldr	r2, [pc, #288]	@ (8001a20 <HAL_GPIO_Init+0x2bc>)
 80018fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800190a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4013      	ands	r3, r2
 800191e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a40      	ldr	r2, [pc, #256]	@ (8001a24 <HAL_GPIO_Init+0x2c0>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d013      	beq.n	8001950 <HAL_GPIO_Init+0x1ec>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a28 <HAL_GPIO_Init+0x2c4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d00d      	beq.n	800194c <HAL_GPIO_Init+0x1e8>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3e      	ldr	r2, [pc, #248]	@ (8001a2c <HAL_GPIO_Init+0x2c8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d007      	beq.n	8001948 <HAL_GPIO_Init+0x1e4>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3d      	ldr	r2, [pc, #244]	@ (8001a30 <HAL_GPIO_Init+0x2cc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_GPIO_Init+0x1e0>
 8001940:	2303      	movs	r3, #3
 8001942:	e006      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001944:	2304      	movs	r3, #4
 8001946:	e004      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001948:	2302      	movs	r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_GPIO_Init+0x1ee>
 8001950:	2300      	movs	r3, #0
 8001952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001954:	f002 0203 	and.w	r2, r2, #3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4093      	lsls	r3, r2
 800195c:	68fa      	ldr	r2, [r7, #12]
 800195e:	4313      	orrs	r3, r2
 8001960:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001962:	492f      	ldr	r1, [pc, #188]	@ (8001a20 <HAL_GPIO_Init+0x2bc>)
 8001964:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d006      	beq.n	800198a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800197c:	4b2d      	ldr	r3, [pc, #180]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	492c      	ldr	r1, [pc, #176]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
 8001988:	e006      	b.n	8001998 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800198a:	4b2a      	ldr	r3, [pc, #168]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 800198c:	689a      	ldr	r2, [r3, #8]
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	43db      	mvns	r3, r3
 8001992:	4928      	ldr	r1, [pc, #160]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 8001994:	4013      	ands	r3, r2
 8001996:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d006      	beq.n	80019b2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a4:	4b23      	ldr	r3, [pc, #140]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019a6:	68da      	ldr	r2, [r3, #12]
 80019a8:	4922      	ldr	r1, [pc, #136]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	60cb      	str	r3, [r1, #12]
 80019b0:	e006      	b.n	80019c0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019b2:	4b20      	ldr	r3, [pc, #128]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019b4:	68da      	ldr	r2, [r3, #12]
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	491e      	ldr	r1, [pc, #120]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019bc:	4013      	ands	r3, r2
 80019be:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019cc:	4b19      	ldr	r3, [pc, #100]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019ce:	685a      	ldr	r2, [r3, #4]
 80019d0:	4918      	ldr	r1, [pc, #96]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	604b      	str	r3, [r1, #4]
 80019d8:	e006      	b.n	80019e8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019da:	4b16      	ldr	r3, [pc, #88]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	4914      	ldr	r1, [pc, #80]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019e4:	4013      	ands	r3, r2
 80019e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d021      	beq.n	8001a38 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	490e      	ldr	r1, [pc, #56]	@ (8001a34 <HAL_GPIO_Init+0x2d0>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	600b      	str	r3, [r1, #0]
 8001a00:	e021      	b.n	8001a46 <HAL_GPIO_Init+0x2e2>
 8001a02:	bf00      	nop
 8001a04:	10320000 	.word	0x10320000
 8001a08:	10310000 	.word	0x10310000
 8001a0c:	10220000 	.word	0x10220000
 8001a10:	10210000 	.word	0x10210000
 8001a14:	10120000 	.word	0x10120000
 8001a18:	10110000 	.word	0x10110000
 8001a1c:	40021000 	.word	0x40021000
 8001a20:	40010000 	.word	0x40010000
 8001a24:	40010800 	.word	0x40010800
 8001a28:	40010c00 	.word	0x40010c00
 8001a2c:	40011000 	.word	0x40011000
 8001a30:	40011400 	.word	0x40011400
 8001a34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a38:	4b0b      	ldr	r3, [pc, #44]	@ (8001a68 <HAL_GPIO_Init+0x304>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	4909      	ldr	r1, [pc, #36]	@ (8001a68 <HAL_GPIO_Init+0x304>)
 8001a42:	4013      	ands	r3, r2
 8001a44:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a48:	3301      	adds	r3, #1
 8001a4a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681a      	ldr	r2, [r3, #0]
 8001a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a52:	fa22 f303 	lsr.w	r3, r2, r3
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f47f ae8e 	bne.w	8001778 <HAL_GPIO_Init+0x14>
  }
}
 8001a5c:	bf00      	nop
 8001a5e:	bf00      	nop
 8001a60:	372c      	adds	r7, #44	@ 0x2c
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bc80      	pop	{r7}
 8001a66:	4770      	bx	lr
 8001a68:	40010400 	.word	0x40010400

08001a6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	689a      	ldr	r2, [r3, #8]
 8001a7c:	887b      	ldrh	r3, [r7, #2]
 8001a7e:	4013      	ands	r3, r2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d002      	beq.n	8001a8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a84:	2301      	movs	r3, #1
 8001a86:	73fb      	strb	r3, [r7, #15]
 8001a88:	e001      	b.n	8001a8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3714      	adds	r7, #20
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bc80      	pop	{r7}
 8001a98:	4770      	bx	lr

08001a9a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	807b      	strh	r3, [r7, #2]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aaa:	787b      	ldrb	r3, [r7, #1]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ab0:	887a      	ldrh	r2, [r7, #2]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ab6:	e003      	b.n	8001ac0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ab8:	887b      	ldrh	r3, [r7, #2]
 8001aba:	041a      	lsls	r2, r3, #16
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	611a      	str	r2, [r3, #16]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001aca:	b480      	push	{r7}
 8001acc:	b085      	sub	sp, #20
 8001ace:	af00      	add	r7, sp, #0
 8001ad0:	6078      	str	r0, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001adc:	887a      	ldrh	r2, [r7, #2]
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	041a      	lsls	r2, r3, #16
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	887b      	ldrh	r3, [r7, #2]
 8001aea:	400b      	ands	r3, r1
 8001aec:	431a      	orrs	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	611a      	str	r2, [r3, #16]
}
 8001af2:	bf00      	nop
 8001af4:	3714      	adds	r7, #20
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e272      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0301 	and.w	r3, r3, #1
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f000 8087 	beq.w	8001c2a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b1c:	4b92      	ldr	r3, [pc, #584]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f003 030c 	and.w	r3, r3, #12
 8001b24:	2b04      	cmp	r3, #4
 8001b26:	d00c      	beq.n	8001b42 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b28:	4b8f      	ldr	r3, [pc, #572]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d112      	bne.n	8001b5a <HAL_RCC_OscConfig+0x5e>
 8001b34:	4b8c      	ldr	r3, [pc, #560]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b40:	d10b      	bne.n	8001b5a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b42:	4b89      	ldr	r3, [pc, #548]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d06c      	beq.n	8001c28 <HAL_RCC_OscConfig+0x12c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d168      	bne.n	8001c28 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e24c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b62:	d106      	bne.n	8001b72 <HAL_RCC_OscConfig+0x76>
 8001b64:	4b80      	ldr	r3, [pc, #512]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a7f      	ldr	r2, [pc, #508]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	e02e      	b.n	8001bd0 <HAL_RCC_OscConfig+0xd4>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0x98>
 8001b7a:	4b7b      	ldr	r3, [pc, #492]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a7a      	ldr	r2, [pc, #488]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b78      	ldr	r3, [pc, #480]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a77      	ldr	r2, [pc, #476]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e01d      	b.n	8001bd0 <HAL_RCC_OscConfig+0xd4>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCC_OscConfig+0xbc>
 8001b9e:	4b72      	ldr	r3, [pc, #456]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a71      	ldr	r2, [pc, #452]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001ba4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	4b6f      	ldr	r3, [pc, #444]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a6e      	ldr	r2, [pc, #440]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	e00b      	b.n	8001bd0 <HAL_RCC_OscConfig+0xd4>
 8001bb8:	4b6b      	ldr	r3, [pc, #428]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a6a      	ldr	r2, [pc, #424]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	4b68      	ldr	r3, [pc, #416]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a67      	ldr	r2, [pc, #412]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001bce:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f826 	bl	8000c28 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be0:	f7ff f822 	bl	8000c28 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b64      	cmp	r3, #100	@ 0x64
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e200      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0f0      	beq.n	8001be0 <HAL_RCC_OscConfig+0xe4>
 8001bfe:	e014      	b.n	8001c2a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c00:	f7ff f812 	bl	8000c28 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c08:	f7ff f80e 	bl	8000c28 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b64      	cmp	r3, #100	@ 0x64
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1ec      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c1a:	4b53      	ldr	r3, [pc, #332]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1f0      	bne.n	8001c08 <HAL_RCC_OscConfig+0x10c>
 8001c26:	e000      	b.n	8001c2a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d063      	beq.n	8001cfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c36:	4b4c      	ldr	r3, [pc, #304]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 030c 	and.w	r3, r3, #12
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d00b      	beq.n	8001c5a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c42:	4b49      	ldr	r3, [pc, #292]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b08      	cmp	r3, #8
 8001c4c:	d11c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x18c>
 8001c4e:	4b46      	ldr	r3, [pc, #280]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d116      	bne.n	8001c88 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c5a:	4b43      	ldr	r3, [pc, #268]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0302 	and.w	r3, r3, #2
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d005      	beq.n	8001c72 <HAL_RCC_OscConfig+0x176>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d001      	beq.n	8001c72 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e1c0      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c72:	4b3d      	ldr	r3, [pc, #244]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4939      	ldr	r1, [pc, #228]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c86:	e03a      	b.n	8001cfe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d020      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c90:	4b36      	ldr	r3, [pc, #216]	@ (8001d6c <HAL_RCC_OscConfig+0x270>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c96:	f7fe ffc7 	bl	8000c28 <HAL_GetTick>
 8001c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9c:	e008      	b.n	8001cb0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c9e:	f7fe ffc3 	bl	8000c28 <HAL_GetTick>
 8001ca2:	4602      	mov	r2, r0
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d901      	bls.n	8001cb0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cac:	2303      	movs	r3, #3
 8001cae:	e1a1      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb0:	4b2d      	ldr	r3, [pc, #180]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0302 	and.w	r3, r3, #2
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0f0      	beq.n	8001c9e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cbc:	4b2a      	ldr	r3, [pc, #168]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	00db      	lsls	r3, r3, #3
 8001cca:	4927      	ldr	r1, [pc, #156]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	600b      	str	r3, [r1, #0]
 8001cd0:	e015      	b.n	8001cfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cd2:	4b26      	ldr	r3, [pc, #152]	@ (8001d6c <HAL_RCC_OscConfig+0x270>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd8:	f7fe ffa6 	bl	8000c28 <HAL_GetTick>
 8001cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cde:	e008      	b.n	8001cf2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ce0:	f7fe ffa2 	bl	8000c28 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d901      	bls.n	8001cf2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e180      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1f0      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0308 	and.w	r3, r3, #8
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d03a      	beq.n	8001d80 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	699b      	ldr	r3, [r3, #24]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d019      	beq.n	8001d46 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d12:	4b17      	ldr	r3, [pc, #92]	@ (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001d14:	2201      	movs	r2, #1
 8001d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d18:	f7fe ff86 	bl	8000c28 <HAL_GetTick>
 8001d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d1e:	e008      	b.n	8001d32 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d20:	f7fe ff82 	bl	8000c28 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	2b02      	cmp	r3, #2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e160      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d32:	4b0d      	ldr	r3, [pc, #52]	@ (8001d68 <HAL_RCC_OscConfig+0x26c>)
 8001d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d36:	f003 0302 	and.w	r3, r3, #2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d0f0      	beq.n	8001d20 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d3e:	2001      	movs	r0, #1
 8001d40:	f000 face 	bl	80022e0 <RCC_Delay>
 8001d44:	e01c      	b.n	8001d80 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d46:	4b0a      	ldr	r3, [pc, #40]	@ (8001d70 <HAL_RCC_OscConfig+0x274>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d4c:	f7fe ff6c 	bl	8000c28 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d52:	e00f      	b.n	8001d74 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d54:	f7fe ff68 	bl	8000c28 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d908      	bls.n	8001d74 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e146      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000
 8001d6c:	42420000 	.word	0x42420000
 8001d70:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d74:	4b92      	ldr	r3, [pc, #584]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d1e9      	bne.n	8001d54 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0304 	and.w	r3, r3, #4
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	f000 80a6 	beq.w	8001eda <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d92:	4b8b      	ldr	r3, [pc, #556]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001d94:	69db      	ldr	r3, [r3, #28]
 8001d96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10d      	bne.n	8001dba <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d9e:	4b88      	ldr	r3, [pc, #544]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	4a87      	ldr	r2, [pc, #540]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001da4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001da8:	61d3      	str	r3, [r2, #28]
 8001daa:	4b85      	ldr	r3, [pc, #532]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	60bb      	str	r3, [r7, #8]
 8001db4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001db6:	2301      	movs	r3, #1
 8001db8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dba:	4b82      	ldr	r3, [pc, #520]	@ (8001fc4 <HAL_RCC_OscConfig+0x4c8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d118      	bne.n	8001df8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dc6:	4b7f      	ldr	r3, [pc, #508]	@ (8001fc4 <HAL_RCC_OscConfig+0x4c8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a7e      	ldr	r2, [pc, #504]	@ (8001fc4 <HAL_RCC_OscConfig+0x4c8>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dd2:	f7fe ff29 	bl	8000c28 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dda:	f7fe ff25 	bl	8000c28 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b64      	cmp	r3, #100	@ 0x64
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e103      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dec:	4b75      	ldr	r3, [pc, #468]	@ (8001fc4 <HAL_RCC_OscConfig+0x4c8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d106      	bne.n	8001e0e <HAL_RCC_OscConfig+0x312>
 8001e00:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e02:	6a1b      	ldr	r3, [r3, #32]
 8001e04:	4a6e      	ldr	r2, [pc, #440]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6213      	str	r3, [r2, #32]
 8001e0c:	e02d      	b.n	8001e6a <HAL_RCC_OscConfig+0x36e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d10c      	bne.n	8001e30 <HAL_RCC_OscConfig+0x334>
 8001e16:	4b6a      	ldr	r3, [pc, #424]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a69      	ldr	r2, [pc, #420]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6213      	str	r3, [r2, #32]
 8001e22:	4b67      	ldr	r3, [pc, #412]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a66      	ldr	r2, [pc, #408]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	6213      	str	r3, [r2, #32]
 8001e2e:	e01c      	b.n	8001e6a <HAL_RCC_OscConfig+0x36e>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	2b05      	cmp	r3, #5
 8001e36:	d10c      	bne.n	8001e52 <HAL_RCC_OscConfig+0x356>
 8001e38:	4b61      	ldr	r3, [pc, #388]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4a60      	ldr	r2, [pc, #384]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e3e:	f043 0304 	orr.w	r3, r3, #4
 8001e42:	6213      	str	r3, [r2, #32]
 8001e44:	4b5e      	ldr	r3, [pc, #376]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a5d      	ldr	r2, [pc, #372]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e4a:	f043 0301 	orr.w	r3, r3, #1
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	e00b      	b.n	8001e6a <HAL_RCC_OscConfig+0x36e>
 8001e52:	4b5b      	ldr	r3, [pc, #364]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e54:	6a1b      	ldr	r3, [r3, #32]
 8001e56:	4a5a      	ldr	r2, [pc, #360]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e58:	f023 0301 	bic.w	r3, r3, #1
 8001e5c:	6213      	str	r3, [r2, #32]
 8001e5e:	4b58      	ldr	r3, [pc, #352]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a57      	ldr	r2, [pc, #348]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e64:	f023 0304 	bic.w	r3, r3, #4
 8001e68:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d015      	beq.n	8001e9e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e72:	f7fe fed9 	bl	8000c28 <HAL_GetTick>
 8001e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e78:	e00a      	b.n	8001e90 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7fe fed5 	bl	8000c28 <HAL_GetTick>
 8001e7e:	4602      	mov	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d901      	bls.n	8001e90 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e8c:	2303      	movs	r3, #3
 8001e8e:	e0b1      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e90:	4b4b      	ldr	r3, [pc, #300]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001e92:	6a1b      	ldr	r3, [r3, #32]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d0ee      	beq.n	8001e7a <HAL_RCC_OscConfig+0x37e>
 8001e9c:	e014      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e9e:	f7fe fec3 	bl	8000c28 <HAL_GetTick>
 8001ea2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ea4:	e00a      	b.n	8001ebc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea6:	f7fe febf 	bl	8000c28 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e09b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ebc:	4b40      	ldr	r3, [pc, #256]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ebe:	6a1b      	ldr	r3, [r3, #32]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d1ee      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ec8:	7dfb      	ldrb	r3, [r7, #23]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d105      	bne.n	8001eda <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ece:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed0:	69db      	ldr	r3, [r3, #28]
 8001ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ed4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ed8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8087 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ee4:	4b36      	ldr	r3, [pc, #216]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d061      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d146      	bne.n	8001f86 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef8:	4b33      	ldr	r3, [pc, #204]	@ (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001efe:	f7fe fe93 	bl	8000c28 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f06:	f7fe fe8f 	bl	8000c28 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e06d      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f18:	4b29      	ldr	r3, [pc, #164]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d1f0      	bne.n	8001f06 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a1b      	ldr	r3, [r3, #32]
 8001f28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f2c:	d108      	bne.n	8001f40 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f2e:	4b24      	ldr	r3, [pc, #144]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	4921      	ldr	r1, [pc, #132]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f40:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a19      	ldr	r1, [r3, #32]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f50:	430b      	orrs	r3, r1
 8001f52:	491b      	ldr	r1, [pc, #108]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f58:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f5e:	f7fe fe63 	bl	8000c28 <HAL_GetTick>
 8001f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f64:	e008      	b.n	8001f78 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f66:	f7fe fe5f 	bl	8000c28 <HAL_GetTick>
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	1ad3      	subs	r3, r2, r3
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d901      	bls.n	8001f78 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e03d      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f78:	4b11      	ldr	r3, [pc, #68]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d0f0      	beq.n	8001f66 <HAL_RCC_OscConfig+0x46a>
 8001f84:	e035      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f86:	4b10      	ldr	r3, [pc, #64]	@ (8001fc8 <HAL_RCC_OscConfig+0x4cc>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe fe4c 	bl	8000c28 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f94:	f7fe fe48 	bl	8000c28 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e026      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fa6:	4b06      	ldr	r3, [pc, #24]	@ (8001fc0 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d1f0      	bne.n	8001f94 <HAL_RCC_OscConfig+0x498>
 8001fb2:	e01e      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	69db      	ldr	r3, [r3, #28]
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d107      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e019      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001ffc <HAL_RCC_OscConfig+0x500>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000

08002000 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d101      	bne.n	8002014 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e0d0      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002014:	4b6a      	ldr	r3, [pc, #424]	@ (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	683a      	ldr	r2, [r7, #0]
 800201e:	429a      	cmp	r2, r3
 8002020:	d910      	bls.n	8002044 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002022:	4b67      	ldr	r3, [pc, #412]	@ (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f023 0207 	bic.w	r2, r3, #7
 800202a:	4965      	ldr	r1, [pc, #404]	@ (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	4313      	orrs	r3, r2
 8002030:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002032:	4b63      	ldr	r3, [pc, #396]	@ (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0307 	and.w	r3, r3, #7
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	429a      	cmp	r2, r3
 800203e:	d001      	beq.n	8002044 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e0b8      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	2b00      	cmp	r3, #0
 800204e:	d020      	beq.n	8002092 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d005      	beq.n	8002068 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800205c:	4b59      	ldr	r3, [pc, #356]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	4a58      	ldr	r2, [pc, #352]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002066:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0308 	and.w	r3, r3, #8
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002074:	4b53      	ldr	r3, [pc, #332]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a52      	ldr	r2, [pc, #328]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800207e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002080:	4b50      	ldr	r3, [pc, #320]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	494d      	ldr	r1, [pc, #308]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800208e:	4313      	orrs	r3, r2
 8002090:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0301 	and.w	r3, r3, #1
 800209a:	2b00      	cmp	r3, #0
 800209c:	d040      	beq.n	8002120 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d107      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020a6:	4b47      	ldr	r3, [pc, #284]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d115      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e07f      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d107      	bne.n	80020ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020be:	4b41      	ldr	r3, [pc, #260]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d109      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e073      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ce:	4b3d      	ldr	r3, [pc, #244]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d101      	bne.n	80020de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020da:	2301      	movs	r3, #1
 80020dc:	e06b      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020de:	4b39      	ldr	r3, [pc, #228]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f023 0203 	bic.w	r2, r3, #3
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	4936      	ldr	r1, [pc, #216]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f0:	f7fe fd9a 	bl	8000c28 <HAL_GetTick>
 80020f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020f6:	e00a      	b.n	800210e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f8:	f7fe fd96 	bl	8000c28 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002106:	4293      	cmp	r3, r2
 8002108:	d901      	bls.n	800210e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800210a:	2303      	movs	r3, #3
 800210c:	e053      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800210e:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	f003 020c 	and.w	r2, r3, #12
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	429a      	cmp	r2, r3
 800211e:	d1eb      	bne.n	80020f8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002120:	4b27      	ldr	r3, [pc, #156]	@ (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0307 	and.w	r3, r3, #7
 8002128:	683a      	ldr	r2, [r7, #0]
 800212a:	429a      	cmp	r2, r3
 800212c:	d210      	bcs.n	8002150 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800212e:	4b24      	ldr	r3, [pc, #144]	@ (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f023 0207 	bic.w	r2, r3, #7
 8002136:	4922      	ldr	r1, [pc, #136]	@ (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	4313      	orrs	r3, r2
 800213c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800213e:	4b20      	ldr	r3, [pc, #128]	@ (80021c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	429a      	cmp	r2, r3
 800214a:	d001      	beq.n	8002150 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e032      	b.n	80021b6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 0304 	and.w	r3, r3, #4
 8002158:	2b00      	cmp	r3, #0
 800215a:	d008      	beq.n	800216e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800215c:	4b19      	ldr	r3, [pc, #100]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	4916      	ldr	r1, [pc, #88]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800216a:	4313      	orrs	r3, r2
 800216c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0308 	and.w	r3, r3, #8
 8002176:	2b00      	cmp	r3, #0
 8002178:	d009      	beq.n	800218e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800217a:	4b12      	ldr	r3, [pc, #72]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	691b      	ldr	r3, [r3, #16]
 8002186:	00db      	lsls	r3, r3, #3
 8002188:	490e      	ldr	r1, [pc, #56]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 800218a:	4313      	orrs	r3, r2
 800218c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800218e:	f000 f821 	bl	80021d4 <HAL_RCC_GetSysClockFreq>
 8002192:	4602      	mov	r2, r0
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_RCC_ClockConfig+0x1c4>)
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	091b      	lsrs	r3, r3, #4
 800219a:	f003 030f 	and.w	r3, r3, #15
 800219e:	490a      	ldr	r1, [pc, #40]	@ (80021c8 <HAL_RCC_ClockConfig+0x1c8>)
 80021a0:	5ccb      	ldrb	r3, [r1, r3]
 80021a2:	fa22 f303 	lsr.w	r3, r2, r3
 80021a6:	4a09      	ldr	r2, [pc, #36]	@ (80021cc <HAL_RCC_ClockConfig+0x1cc>)
 80021a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021aa:	4b09      	ldr	r3, [pc, #36]	@ (80021d0 <HAL_RCC_ClockConfig+0x1d0>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fcf8 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 80021b4:	2300      	movs	r3, #0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	40022000 	.word	0x40022000
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08002568 	.word	0x08002568
 80021cc:	20000004 	.word	0x20000004
 80021d0:	20000008 	.word	0x20000008

080021d4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b087      	sub	sp, #28
 80021d8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021da:	2300      	movs	r3, #0
 80021dc:	60fb      	str	r3, [r7, #12]
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
 80021e2:	2300      	movs	r3, #0
 80021e4:	617b      	str	r3, [r7, #20]
 80021e6:	2300      	movs	r3, #0
 80021e8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021ee:	4b1e      	ldr	r3, [pc, #120]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x94>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 030c 	and.w	r3, r3, #12
 80021fa:	2b04      	cmp	r3, #4
 80021fc:	d002      	beq.n	8002204 <HAL_RCC_GetSysClockFreq+0x30>
 80021fe:	2b08      	cmp	r3, #8
 8002200:	d003      	beq.n	800220a <HAL_RCC_GetSysClockFreq+0x36>
 8002202:	e027      	b.n	8002254 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002204:	4b19      	ldr	r3, [pc, #100]	@ (800226c <HAL_RCC_GetSysClockFreq+0x98>)
 8002206:	613b      	str	r3, [r7, #16]
      break;
 8002208:	e027      	b.n	800225a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	0c9b      	lsrs	r3, r3, #18
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	4a17      	ldr	r2, [pc, #92]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002214:	5cd3      	ldrb	r3, [r2, r3]
 8002216:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d010      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002222:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x94>)
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	0c5b      	lsrs	r3, r3, #17
 8002228:	f003 0301 	and.w	r3, r3, #1
 800222c:	4a11      	ldr	r2, [pc, #68]	@ (8002274 <HAL_RCC_GetSysClockFreq+0xa0>)
 800222e:	5cd3      	ldrb	r3, [r2, r3]
 8002230:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a0d      	ldr	r2, [pc, #52]	@ (800226c <HAL_RCC_GetSysClockFreq+0x98>)
 8002236:	fb03 f202 	mul.w	r2, r3, r2
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e004      	b.n	800224e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a0c      	ldr	r2, [pc, #48]	@ (8002278 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002248:	fb02 f303 	mul.w	r3, r2, r3
 800224c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	613b      	str	r3, [r7, #16]
      break;
 8002252:	e002      	b.n	800225a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <HAL_RCC_GetSysClockFreq+0x98>)
 8002256:	613b      	str	r3, [r7, #16]
      break;
 8002258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800225a:	693b      	ldr	r3, [r7, #16]
}
 800225c:	4618      	mov	r0, r3
 800225e:	371c      	adds	r7, #28
 8002260:	46bd      	mov	sp, r7
 8002262:	bc80      	pop	{r7}
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000
 800226c:	007a1200 	.word	0x007a1200
 8002270:	08002580 	.word	0x08002580
 8002274:	08002590 	.word	0x08002590
 8002278:	003d0900 	.word	0x003d0900

0800227c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002280:	4b02      	ldr	r3, [pc, #8]	@ (800228c <HAL_RCC_GetHCLKFreq+0x10>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	bc80      	pop	{r7}
 800228a:	4770      	bx	lr
 800228c:	20000004 	.word	0x20000004

08002290 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002294:	f7ff fff2 	bl	800227c <HAL_RCC_GetHCLKFreq>
 8002298:	4602      	mov	r2, r0
 800229a:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	0a1b      	lsrs	r3, r3, #8
 80022a0:	f003 0307 	and.w	r3, r3, #7
 80022a4:	4903      	ldr	r1, [pc, #12]	@ (80022b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022a6:	5ccb      	ldrb	r3, [r1, r3]
 80022a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	bd80      	pop	{r7, pc}
 80022b0:	40021000 	.word	0x40021000
 80022b4:	08002578 	.word	0x08002578

080022b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022bc:	f7ff ffde 	bl	800227c <HAL_RCC_GetHCLKFreq>
 80022c0:	4602      	mov	r2, r0
 80022c2:	4b05      	ldr	r3, [pc, #20]	@ (80022d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	0adb      	lsrs	r3, r3, #11
 80022c8:	f003 0307 	and.w	r3, r3, #7
 80022cc:	4903      	ldr	r1, [pc, #12]	@ (80022dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80022ce:	5ccb      	ldrb	r3, [r1, r3]
 80022d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08002578 	.word	0x08002578

080022e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002314 <RCC_Delay+0x34>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a0a      	ldr	r2, [pc, #40]	@ (8002318 <RCC_Delay+0x38>)
 80022ee:	fba2 2303 	umull	r2, r3, r2, r3
 80022f2:	0a5b      	lsrs	r3, r3, #9
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	fb02 f303 	mul.w	r3, r2, r3
 80022fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022fc:	bf00      	nop
  }
  while (Delay --);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1e5a      	subs	r2, r3, #1
 8002302:	60fa      	str	r2, [r7, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d1f9      	bne.n	80022fc <RCC_Delay+0x1c>
}
 8002308:	bf00      	nop
 800230a:	bf00      	nop
 800230c:	3714      	adds	r7, #20
 800230e:	46bd      	mov	sp, r7
 8002310:	bc80      	pop	{r7}
 8002312:	4770      	bx	lr
 8002314:	20000004 	.word	0x20000004
 8002318:	10624dd3 	.word	0x10624dd3

0800231c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e042      	b.n	80023b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe fb60 	bl	8000a08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	@ 0x24
 800234c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800235e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f82b 	bl	80023bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2200      	movs	r2, #0
 80023b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}

080023bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80023f6:	f023 030c 	bic.w	r3, r3, #12
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	430b      	orrs	r3, r1
 8002402:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2c      	ldr	r2, [pc, #176]	@ (80024d0 <UART_SetConfig+0x114>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d103      	bne.n	800242c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002424:	f7ff ff48 	bl	80022b8 <HAL_RCC_GetPCLK2Freq>
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	e002      	b.n	8002432 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800242c:	f7ff ff30 	bl	8002290 <HAL_RCC_GetPCLK1Freq>
 8002430:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	009a      	lsls	r2, r3, #2
 800243c:	441a      	add	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	4a22      	ldr	r2, [pc, #136]	@ (80024d4 <UART_SetConfig+0x118>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	0119      	lsls	r1, r3, #4
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009a      	lsls	r2, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb2 f2f3 	udiv	r2, r2, r3
 8002468:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <UART_SetConfig+0x118>)
 800246a:	fba3 0302 	umull	r0, r3, r3, r2
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2064      	movs	r0, #100	@ 0x64
 8002472:	fb00 f303 	mul.w	r3, r0, r3
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	3332      	adds	r3, #50	@ 0x32
 800247c:	4a15      	ldr	r2, [pc, #84]	@ (80024d4 <UART_SetConfig+0x118>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002488:	4419      	add	r1, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	009a      	lsls	r2, r3, #2
 8002494:	441a      	add	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a0:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <UART_SetConfig+0x118>)
 80024a2:	fba3 0302 	umull	r0, r3, r3, r2
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2064      	movs	r0, #100	@ 0x64
 80024aa:	fb00 f303 	mul.w	r3, r0, r3
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	3332      	adds	r3, #50	@ 0x32
 80024b4:	4a07      	ldr	r2, [pc, #28]	@ (80024d4 <UART_SetConfig+0x118>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	f003 020f 	and.w	r2, r3, #15
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	440a      	add	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40013800 	.word	0x40013800
 80024d4:	51eb851f 	.word	0x51eb851f

080024d8 <memset>:
 80024d8:	4603      	mov	r3, r0
 80024da:	4402      	add	r2, r0
 80024dc:	4293      	cmp	r3, r2
 80024de:	d100      	bne.n	80024e2 <memset+0xa>
 80024e0:	4770      	bx	lr
 80024e2:	f803 1b01 	strb.w	r1, [r3], #1
 80024e6:	e7f9      	b.n	80024dc <memset+0x4>

080024e8 <__libc_init_array>:
 80024e8:	b570      	push	{r4, r5, r6, lr}
 80024ea:	2600      	movs	r6, #0
 80024ec:	4d0c      	ldr	r5, [pc, #48]	@ (8002520 <__libc_init_array+0x38>)
 80024ee:	4c0d      	ldr	r4, [pc, #52]	@ (8002524 <__libc_init_array+0x3c>)
 80024f0:	1b64      	subs	r4, r4, r5
 80024f2:	10a4      	asrs	r4, r4, #2
 80024f4:	42a6      	cmp	r6, r4
 80024f6:	d109      	bne.n	800250c <__libc_init_array+0x24>
 80024f8:	f000 f81a 	bl	8002530 <_init>
 80024fc:	2600      	movs	r6, #0
 80024fe:	4d0a      	ldr	r5, [pc, #40]	@ (8002528 <__libc_init_array+0x40>)
 8002500:	4c0a      	ldr	r4, [pc, #40]	@ (800252c <__libc_init_array+0x44>)
 8002502:	1b64      	subs	r4, r4, r5
 8002504:	10a4      	asrs	r4, r4, #2
 8002506:	42a6      	cmp	r6, r4
 8002508:	d105      	bne.n	8002516 <__libc_init_array+0x2e>
 800250a:	bd70      	pop	{r4, r5, r6, pc}
 800250c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002510:	4798      	blx	r3
 8002512:	3601      	adds	r6, #1
 8002514:	e7ee      	b.n	80024f4 <__libc_init_array+0xc>
 8002516:	f855 3b04 	ldr.w	r3, [r5], #4
 800251a:	4798      	blx	r3
 800251c:	3601      	adds	r6, #1
 800251e:	e7f2      	b.n	8002506 <__libc_init_array+0x1e>
 8002520:	08002594 	.word	0x08002594
 8002524:	08002594 	.word	0x08002594
 8002528:	08002594 	.word	0x08002594
 800252c:	08002598 	.word	0x08002598

08002530 <_init>:
 8002530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002532:	bf00      	nop
 8002534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002536:	bc08      	pop	{r3}
 8002538:	469e      	mov	lr, r3
 800253a:	4770      	bx	lr

0800253c <_fini>:
 800253c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800253e:	bf00      	nop
 8002540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002542:	bc08      	pop	{r3}
 8002544:	469e      	mov	lr, r3
 8002546:	4770      	bx	lr
