
multisteering-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003804  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08003910  08003910  00004910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039b8  080039b8  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  080039b8  080039b8  000049b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039c0  080039c0  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039c0  080039c0  000049c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080039c4  080039c4  000049c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080039c8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000060  08003a28  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08003a28  00005300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e4a  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001981  00000000  00000000  0000ded3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000f858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005eb  00000000  00000000  00010020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001764e  00000000  00000000  0001060b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a62  00000000  00000000  00027c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c7a  00000000  00000000  000316bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6335  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c4  00000000  00000000  000b6378  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b873c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	080038f8 	.word	0x080038f8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	080038f8 	.word	0x080038f8

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <nextion_send>:
#include "stm32f1xx_hal.h"
extern UART_HandleTypeDef huart1;

char ENDMSG[3] = {255, 255, 255};

void nextion_send(char* cmd){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	   HAL_UART_Transmit (&huart1, (uint8_t*) cmd, strlen (cmd), 50);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	2332      	movs	r3, #50	@ 0x32
 8000170:	6879      	ldr	r1, [r7, #4]
 8000172:	4806      	ldr	r0, [pc, #24]	@ (800018c <nextion_send+0x30>)
 8000174:	f002 fd3c 	bl	8002bf0 <HAL_UART_Transmit>
	   HAL_UART_Transmit (&huart1, (uint8_t*) &ENDMSG, 3, 50);
 8000178:	2332      	movs	r3, #50	@ 0x32
 800017a:	2203      	movs	r2, #3
 800017c:	4904      	ldr	r1, [pc, #16]	@ (8000190 <nextion_send+0x34>)
 800017e:	4803      	ldr	r0, [pc, #12]	@ (800018c <nextion_send+0x30>)
 8000180:	f002 fd36 	bl	8002bf0 <HAL_UART_Transmit>
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	200000a4 	.word	0x200000a4
 8000190:	20000000 	.word	0x20000000

08000194 <HAL_CAN_RxFifo0MsgPendingCallback>:
void data_send_handler(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000194:	b580      	push	{r7, lr}
 8000196:	b084      	sub	sp, #16
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData.buff)
 800019c:	4b34      	ldr	r3, [pc, #208]	@ (8000270 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800019e:	4a35      	ldr	r2, [pc, #212]	@ (8000274 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80001a0:	2100      	movs	r1, #0
 80001a2:	6878      	ldr	r0, [r7, #4]
 80001a4:	f001 fa6f 	bl	8001686 <HAL_CAN_GetRxMessage>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d15b      	bne.n	8000266 <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			== HAL_OK) {
		if (RxHeader.StdId == 0x600) {
 80001ae:	4b31      	ldr	r3, [pc, #196]	@ (8000274 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80001b6:	d110      	bne.n	80001da <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
			for (uint8_t i = 0; i < 7; i++) {
 80001b8:	2300      	movs	r3, #0
 80001ba:	73fb      	strb	r3, [r7, #15]
 80001bc:	e00a      	b.n	80001d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
				RxData.x600[i] = RxData.buff[i];
 80001be:	7bfa      	ldrb	r2, [r7, #15]
 80001c0:	7bfb      	ldrb	r3, [r7, #15]
 80001c2:	492b      	ldr	r1, [pc, #172]	@ (8000270 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80001c4:	5c89      	ldrb	r1, [r1, r2]
 80001c6:	4a2a      	ldr	r2, [pc, #168]	@ (8000270 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80001c8:	4413      	add	r3, r2
 80001ca:	460a      	mov	r2, r1
 80001cc:	721a      	strb	r2, [r3, #8]
			for (uint8_t i = 0; i < 7; i++) {
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	3301      	adds	r3, #1
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	2b06      	cmp	r3, #6
 80001d8:	d9f1      	bls.n	80001be <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
			}
		}
		if (RxHeader.StdId == 0x601) {
 80001da:	4b26      	ldr	r3, [pc, #152]	@ (8000274 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f240 6201 	movw	r2, #1537	@ 0x601
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d110      	bne.n	8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			for (uint8_t i = 0; i < 7; i++) {
 80001e6:	2300      	movs	r3, #0
 80001e8:	73bb      	strb	r3, [r7, #14]
 80001ea:	e00a      	b.n	8000202 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
				RxData.x601[i] = RxData.buff[i];
 80001ec:	7bba      	ldrb	r2, [r7, #14]
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	491f      	ldr	r1, [pc, #124]	@ (8000270 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80001f2:	5c89      	ldrb	r1, [r1, r2]
 80001f4:	4a1e      	ldr	r2, [pc, #120]	@ (8000270 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 80001f6:	4413      	add	r3, r2
 80001f8:	460a      	mov	r2, r1
 80001fa:	741a      	strb	r2, [r3, #16]
			for (uint8_t i = 0; i < 7; i++) {
 80001fc:	7bbb      	ldrb	r3, [r7, #14]
 80001fe:	3301      	adds	r3, #1
 8000200:	73bb      	strb	r3, [r7, #14]
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	2b06      	cmp	r3, #6
 8000206:	d9f1      	bls.n	80001ec <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
			}
		}
		if (RxHeader.StdId == 0x602) {
 8000208:	4b1a      	ldr	r3, [pc, #104]	@ (8000274 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f240 6202 	movw	r2, #1538	@ 0x602
 8000210:	4293      	cmp	r3, r2
 8000212:	d110      	bne.n	8000236 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			for (uint8_t i = 0; i < 7; i++) {
 8000214:	2300      	movs	r3, #0
 8000216:	737b      	strb	r3, [r7, #13]
 8000218:	e00a      	b.n	8000230 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
				RxData.x602[i] = RxData.buff[i];
 800021a:	7b7a      	ldrb	r2, [r7, #13]
 800021c:	7b7b      	ldrb	r3, [r7, #13]
 800021e:	4914      	ldr	r1, [pc, #80]	@ (8000270 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000220:	5c89      	ldrb	r1, [r1, r2]
 8000222:	4a13      	ldr	r2, [pc, #76]	@ (8000270 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000224:	4413      	add	r3, r2
 8000226:	460a      	mov	r2, r1
 8000228:	761a      	strb	r2, [r3, #24]
			for (uint8_t i = 0; i < 7; i++) {
 800022a:	7b7b      	ldrb	r3, [r7, #13]
 800022c:	3301      	adds	r3, #1
 800022e:	737b      	strb	r3, [r7, #13]
 8000230:	7b7b      	ldrb	r3, [r7, #13]
 8000232:	2b06      	cmp	r3, #6
 8000234:	d9f1      	bls.n	800021a <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
			}
		}
		if (RxHeader.StdId == 0x604) {
 8000236:	4b0f      	ldr	r3, [pc, #60]	@ (8000274 <HAL_CAN_RxFifo0MsgPendingCallback+0xe0>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f240 6204 	movw	r2, #1540	@ 0x604
 800023e:	4293      	cmp	r3, r2
 8000240:	d111      	bne.n	8000266 <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			for (uint8_t i = 0; i < 7; i++) {
 8000242:	2300      	movs	r3, #0
 8000244:	733b      	strb	r3, [r7, #12]
 8000246:	e00b      	b.n	8000260 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
				RxData.x604[i] = RxData.buff[i];
 8000248:	7b3a      	ldrb	r2, [r7, #12]
 800024a:	7b3b      	ldrb	r3, [r7, #12]
 800024c:	4908      	ldr	r1, [pc, #32]	@ (8000270 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 800024e:	5c89      	ldrb	r1, [r1, r2]
 8000250:	4a07      	ldr	r2, [pc, #28]	@ (8000270 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>)
 8000252:	4413      	add	r3, r2
 8000254:	460a      	mov	r2, r1
 8000256:	f883 2020 	strb.w	r2, [r3, #32]
			for (uint8_t i = 0; i < 7; i++) {
 800025a:	7b3b      	ldrb	r3, [r7, #12]
 800025c:	3301      	adds	r3, #1
 800025e:	733b      	strb	r3, [r7, #12]
 8000260:	7b3b      	ldrb	r3, [r7, #12]
 8000262:	2b06      	cmp	r3, #6
 8000264:	d9f0      	bls.n	8000248 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
			}
		}
	}
}
 8000266:	bf00      	nop
 8000268:	3710      	adds	r7, #16
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	20000130 	.word	0x20000130
 8000274:	20000104 	.word	0x20000104

08000278 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8000278:	b580      	push	{r7, lr}
 800027a:	b082      	sub	sp, #8
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8000280:	f000 fccc 	bl	8000c1c <Error_Handler>
}
 8000284:	bf00      	nop
 8000286:	3708      	adds	r7, #8
 8000288:	46bd      	mov	sp, r7
 800028a:	bd80      	pop	{r7, pc}

0800028c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000290:	f000 fe68 	bl	8000f64 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000294:	f000 f810 	bl	80002b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000298:	f000 f8d4 	bl	8000444 <MX_GPIO_Init>
	MX_CAN_Init();
 800029c:	f000 f852 	bl	8000344 <MX_CAN_Init>
	MX_USART1_UART_Init();
 80002a0:	f000 f8a6 	bl	80003f0 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	startup();
 80002a4:	f000 fc64 	bl	8000b70 <startup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		data_update_handler();
 80002a8:	f000 fb92 	bl	80009d0 <data_update_handler>
		data_send_handler();
 80002ac:	f000 fc0e 	bl	8000acc <data_send_handler>
		button_handler();
 80002b0:	f000 f966 	bl	8000580 <button_handler>
		data_update_handler();
 80002b4:	bf00      	nop
 80002b6:	e7f7      	b.n	80002a8 <main+0x1c>

080002b8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	@ 0x40
 80002bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 fe86 	bl	8002fd8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002da:	2301      	movs	r3, #1
 80002dc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ec:	2302      	movs	r3, #2
 80002ee:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f4:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80002f6:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80002fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4618      	mov	r0, r3
 8000302:	f002 f815 	bl	8002330 <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x58>
		Error_Handler();
 800030c:	f000 fc86 	bl	8000c1c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000314:	2302      	movs	r3, #2
 8000316:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000320:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2102      	movs	r1, #2
 800032a:	4618      	mov	r0, r3
 800032c:	f002 fa82 	bl	8002834 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x82>
		Error_Handler();
 8000336:	f000 fc71 	bl	8000c1c <Error_Handler>
	}
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	@ 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 8000344:	b580      	push	{r7, lr}
 8000346:	b08a      	sub	sp, #40	@ 0x28
 8000348:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 800034a:	4b27      	ldr	r3, [pc, #156]	@ (80003e8 <MX_CAN_Init+0xa4>)
 800034c:	4a27      	ldr	r2, [pc, #156]	@ (80003ec <MX_CAN_Init+0xa8>)
 800034e:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 4; // TJA1050 (CHN version cannot perform at 1MBit, only at 500kBit)
 8000350:	4b25      	ldr	r3, [pc, #148]	@ (80003e8 <MX_CAN_Init+0xa4>)
 8000352:	2204      	movs	r2, #4
 8000354:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_NORMAL;
 8000356:	4b24      	ldr	r3, [pc, #144]	@ (80003e8 <MX_CAN_Init+0xa4>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800035c:	4b22      	ldr	r3, [pc, #136]	@ (80003e8 <MX_CAN_Init+0xa4>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000362:	4b21      	ldr	r3, [pc, #132]	@ (80003e8 <MX_CAN_Init+0xa4>)
 8000364:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000368:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 800036a:	4b1f      	ldr	r3, [pc, #124]	@ (80003e8 <MX_CAN_Init+0xa4>)
 800036c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000370:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 8000372:	4b1d      	ldr	r3, [pc, #116]	@ (80003e8 <MX_CAN_Init+0xa4>)
 8000374:	2200      	movs	r2, #0
 8000376:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000378:	4b1b      	ldr	r3, [pc, #108]	@ (80003e8 <MX_CAN_Init+0xa4>)
 800037a:	2200      	movs	r2, #0
 800037c:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 800037e:	4b1a      	ldr	r3, [pc, #104]	@ (80003e8 <MX_CAN_Init+0xa4>)
 8000380:	2200      	movs	r2, #0
 8000382:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 8000384:	4b18      	ldr	r3, [pc, #96]	@ (80003e8 <MX_CAN_Init+0xa4>)
 8000386:	2200      	movs	r2, #0
 8000388:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 800038a:	4b17      	ldr	r3, [pc, #92]	@ (80003e8 <MX_CAN_Init+0xa4>)
 800038c:	2200      	movs	r2, #0
 800038e:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = ENABLE;
 8000390:	4b15      	ldr	r3, [pc, #84]	@ (80003e8 <MX_CAN_Init+0xa4>)
 8000392:	2201      	movs	r2, #1
 8000394:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 8000396:	4814      	ldr	r0, [pc, #80]	@ (80003e8 <MX_CAN_Init+0xa4>)
 8000398:	f000 fe6a 	bl	8001070 <HAL_CAN_Init>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_CAN_Init+0x62>
		Error_Handler();
 80003a2:	f000 fc3b 	bl	8000c1c <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	sFilterConfig.FilterBank = 0;
 80003a6:	2300      	movs	r3, #0
 80003a8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003aa:	2300      	movs	r3, #0
 80003ac:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003ae:	2301      	movs	r3, #1
 80003b0:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80003b2:	2300      	movs	r3, #0
 80003b4:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80003b6:	2300      	movs	r3, #0
 80003b8:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80003ba:	2300      	movs	r3, #0
 80003bc:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80003be:	2300      	movs	r3, #0
 80003c0:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003c2:	2300      	movs	r3, #0
 80003c4:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80003c6:	2301      	movs	r3, #1
 80003c8:	623b      	str	r3, [r7, #32]
	//sFilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80003ca:	463b      	mov	r3, r7
 80003cc:	4619      	mov	r1, r3
 80003ce:	4806      	ldr	r0, [pc, #24]	@ (80003e8 <MX_CAN_Init+0xa4>)
 80003d0:	f000 ff49 	bl	8001266 <HAL_CAN_ConfigFilter>
 80003d4:	4603      	mov	r3, r0
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d001      	beq.n	80003de <MX_CAN_Init+0x9a>
		Error_Handler();
 80003da:	f000 fc1f 	bl	8000c1c <Error_Handler>
	}
	/* USER CODE END CAN_Init 2 */

}
 80003de:	bf00      	nop
 80003e0:	3728      	adds	r7, #40	@ 0x28
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	2000007c 	.word	0x2000007c
 80003ec:	40006400 	.word	0x40006400

080003f0 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80003f0:	b580      	push	{r7, lr}
 80003f2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80003f4:	4b11      	ldr	r3, [pc, #68]	@ (800043c <MX_USART1_UART_Init+0x4c>)
 80003f6:	4a12      	ldr	r2, [pc, #72]	@ (8000440 <MX_USART1_UART_Init+0x50>)
 80003f8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80003fa:	4b10      	ldr	r3, [pc, #64]	@ (800043c <MX_USART1_UART_Init+0x4c>)
 80003fc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000400:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000402:	4b0e      	ldr	r3, [pc, #56]	@ (800043c <MX_USART1_UART_Init+0x4c>)
 8000404:	2200      	movs	r2, #0
 8000406:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000408:	4b0c      	ldr	r3, [pc, #48]	@ (800043c <MX_USART1_UART_Init+0x4c>)
 800040a:	2200      	movs	r2, #0
 800040c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800040e:	4b0b      	ldr	r3, [pc, #44]	@ (800043c <MX_USART1_UART_Init+0x4c>)
 8000410:	2200      	movs	r2, #0
 8000412:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8000414:	4b09      	ldr	r3, [pc, #36]	@ (800043c <MX_USART1_UART_Init+0x4c>)
 8000416:	220c      	movs	r2, #12
 8000418:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800041a:	4b08      	ldr	r3, [pc, #32]	@ (800043c <MX_USART1_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000420:	4b06      	ldr	r3, [pc, #24]	@ (800043c <MX_USART1_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8000426:	4805      	ldr	r0, [pc, #20]	@ (800043c <MX_USART1_UART_Init+0x4c>)
 8000428:	f002 fb92 	bl	8002b50 <HAL_UART_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_USART1_UART_Init+0x46>
		Error_Handler();
 8000432:	f000 fbf3 	bl	8000c1c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	200000a4 	.word	0x200000a4
 8000440:	40013800 	.word	0x40013800

08000444 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b088      	sub	sp, #32
 8000448:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800044a:	f107 0310 	add.w	r3, r7, #16
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	609a      	str	r2, [r3, #8]
 8000456:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000458:	4b44      	ldr	r3, [pc, #272]	@ (800056c <MX_GPIO_Init+0x128>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	4a43      	ldr	r2, [pc, #268]	@ (800056c <MX_GPIO_Init+0x128>)
 800045e:	f043 0310 	orr.w	r3, r3, #16
 8000462:	6193      	str	r3, [r2, #24]
 8000464:	4b41      	ldr	r3, [pc, #260]	@ (800056c <MX_GPIO_Init+0x128>)
 8000466:	699b      	ldr	r3, [r3, #24]
 8000468:	f003 0310 	and.w	r3, r3, #16
 800046c:	60fb      	str	r3, [r7, #12]
 800046e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000470:	4b3e      	ldr	r3, [pc, #248]	@ (800056c <MX_GPIO_Init+0x128>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a3d      	ldr	r2, [pc, #244]	@ (800056c <MX_GPIO_Init+0x128>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b3b      	ldr	r3, [pc, #236]	@ (800056c <MX_GPIO_Init+0x128>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0320 	and.w	r3, r3, #32
 8000484:	60bb      	str	r3, [r7, #8]
 8000486:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000488:	4b38      	ldr	r3, [pc, #224]	@ (800056c <MX_GPIO_Init+0x128>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a37      	ldr	r2, [pc, #220]	@ (800056c <MX_GPIO_Init+0x128>)
 800048e:	f043 0308 	orr.w	r3, r3, #8
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b35      	ldr	r3, [pc, #212]	@ (800056c <MX_GPIO_Init+0x128>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0308 	and.w	r3, r3, #8
 800049c:	607b      	str	r3, [r7, #4]
 800049e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004a0:	4b32      	ldr	r3, [pc, #200]	@ (800056c <MX_GPIO_Init+0x128>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a31      	ldr	r2, [pc, #196]	@ (800056c <MX_GPIO_Init+0x128>)
 80004a6:	f043 0304 	orr.w	r3, r3, #4
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b2f      	ldr	r3, [pc, #188]	@ (800056c <MX_GPIO_Init+0x128>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0304 	and.w	r3, r3, #4
 80004b4:	603b      	str	r3, [r7, #0]
 80004b6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 80004b8:	2200      	movs	r2, #0
 80004ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004be:	482c      	ldr	r0, [pc, #176]	@ (8000570 <MX_GPIO_Init+0x12c>)
 80004c0:	f001 ff05 	bl	80022ce <HAL_GPIO_WritePin>
#if DEBUG == 1
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin,
 80004c4:	2200      	movs	r2, #0
 80004c6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80004ca:	482a      	ldr	r0, [pc, #168]	@ (8000574 <MX_GPIO_Init+0x130>)
 80004cc:	f001 feff 	bl	80022ce <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
#endif
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004d6:	4828      	ldr	r0, [pc, #160]	@ (8000578 <MX_GPIO_Init+0x134>)
 80004d8:	f001 fef9 	bl	80022ce <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CAN_LED_Pin */
	GPIO_InitStruct.Pin = CAN_LED_Pin;
 80004dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004e0:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e2:	2301      	movs	r3, #1
 80004e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	2300      	movs	r3, #0
 80004e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004ea:	2302      	movs	r3, #2
 80004ec:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAN_LED_GPIO_Port, &GPIO_InitStruct);
 80004ee:	f107 0310 	add.w	r3, r7, #16
 80004f2:	4619      	mov	r1, r3
 80004f4:	481e      	ldr	r0, [pc, #120]	@ (8000570 <MX_GPIO_Init+0x12c>)
 80004f6:	f001 fd4f 	bl	8001f98 <HAL_GPIO_Init>
#if DEBUG == 1
	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin;
 80004fa:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80004fe:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2302      	movs	r3, #2
 800050a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800050c:	f107 0310 	add.w	r3, r7, #16
 8000510:	4619      	mov	r1, r3
 8000512:	4818      	ldr	r0, [pc, #96]	@ (8000574 <MX_GPIO_Init+0x130>)
 8000514:	f001 fd40 	bl	8001f98 <HAL_GPIO_Init>
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
#endif
#endif
	/*Configure GPIO pin : BTN_6_Pin */
	GPIO_InitStruct.Pin = BTN_6_Pin;
 8000518:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800051c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800051e:	4b17      	ldr	r3, [pc, #92]	@ (800057c <MX_GPIO_Init+0x138>)
 8000520:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000522:	2300      	movs	r3, #0
 8000524:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_6_GPIO_Port, &GPIO_InitStruct);
 8000526:	f107 0310 	add.w	r3, r7, #16
 800052a:	4619      	mov	r1, r3
 800052c:	4812      	ldr	r0, [pc, #72]	@ (8000578 <MX_GPIO_Init+0x134>)
 800052e:	f001 fd33 	bl	8001f98 <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin | BTN_2_Pin | BTN_3_Pin | BTN_4_Pin;
 8000532:	2378      	movs	r3, #120	@ 0x78
 8000534:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000536:	4b11      	ldr	r3, [pc, #68]	@ (800057c <MX_GPIO_Init+0x138>)
 8000538:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800053a:	2302      	movs	r3, #2
 800053c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	480b      	ldr	r0, [pc, #44]	@ (8000574 <MX_GPIO_Init+0x130>)
 8000546:	f001 fd27 	bl	8001f98 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_5_Pin */
	GPIO_InitStruct.Pin = BTN_5_Pin;
 800054a:	2380      	movs	r3, #128	@ 0x80
 800054c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800054e:	4b0b      	ldr	r3, [pc, #44]	@ (800057c <MX_GPIO_Init+0x138>)
 8000550:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000552:	2300      	movs	r3, #0
 8000554:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_5_GPIO_Port, &GPIO_InitStruct);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4619      	mov	r1, r3
 800055c:	4805      	ldr	r0, [pc, #20]	@ (8000574 <MX_GPIO_Init+0x130>)
 800055e:	f001 fd1b 	bl	8001f98 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000562:	bf00      	nop
 8000564:	3720      	adds	r7, #32
 8000566:	46bd      	mov	sp, r7
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	40021000 	.word	0x40021000
 8000570:	40011000 	.word	0x40011000
 8000574:	40010c00 	.word	0x40010c00
 8000578:	40010800 	.word	0x40010800
 800057c:	10110000 	.word	0x10110000

08000580 <button_handler>:

/* USER CODE BEGIN 4 */
void button_handler() {
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
	static bool flag_btn1 = false;
	static bool flag_btn2 = false;
	static bool flag_btn3 = false;
	static bool flag_btn4 = false;
	static uint8_t page = 0;
	HAL_Delay(PILOT_FINGER_TAP_SPEED);
 8000584:	2096      	movs	r0, #150	@ 0x96
 8000586:	f000 fd4f 	bl	8001028 <HAL_Delay>
	/* ENGINE STARTUP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)
 800058a:	2108      	movs	r1, #8
 800058c:	4812      	ldr	r0, [pc, #72]	@ (80005d8 <button_handler+0x58>)
 800058e:	f001 fe87 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d044      	beq.n	8000622 <button_handler+0xa2>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn1) {
 8000598:	f000 fd3c 	bl	8001014 <HAL_GetTick>
 800059c:	4602      	mov	r2, r0
 800059e:	4b0f      	ldr	r3, [pc, #60]	@ (80005dc <button_handler+0x5c>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	1ad3      	subs	r3, r2, r3
 80005a4:	2b96      	cmp	r3, #150	@ 0x96
 80005a6:	d93c      	bls.n	8000622 <button_handler+0xa2>
 80005a8:	4b0d      	ldr	r3, [pc, #52]	@ (80005e0 <button_handler+0x60>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	f083 0301 	eor.w	r3, r3, #1
 80005b0:	b2db      	uxtb	r3, r3
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d035      	beq.n	8000622 <button_handler+0xa2>
		flag_btn1 = !flag_btn1;
 80005b6:	4b0a      	ldr	r3, [pc, #40]	@ (80005e0 <button_handler+0x60>)
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	bf14      	ite	ne
 80005be:	2301      	movne	r3, #1
 80005c0:	2300      	moveq	r3, #0
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	f083 0301 	eor.w	r3, r3, #1
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	4b03      	ldr	r3, [pc, #12]	@ (80005e0 <button_handler+0x60>)
 80005d2:	701a      	strb	r2, [r3, #0]
		while (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)) {
 80005d4:	e01e      	b.n	8000614 <button_handler+0x94>
 80005d6:	bf00      	nop
 80005d8:	40010c00 	.word	0x40010c00
 80005dc:	2000012c 	.word	0x2000012c
 80005e0:	20000176 	.word	0x20000176
			/* SEND CAN MSG ENGINE STARTUP HERE */
			msg_type = engn_start;
 80005e4:	4ba1      	ldr	r3, [pc, #644]	@ (800086c <button_handler+0x2ec>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
			can_msg_handler(msg_type);
 80005ea:	4ba0      	ldr	r3, [pc, #640]	@ (800086c <button_handler+0x2ec>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f000 f94c 	bl	800088c <can_msg_handler>
			HAL_Delay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f000 fd17 	bl	8001028 <HAL_Delay>
			/* ENGINE STARTUP SWITCH IS NOT LATCHING ! */
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80005fa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80005fe:	489c      	ldr	r0, [pc, #624]	@ (8000870 <button_handler+0x2f0>)
 8000600:	f001 fe7d 	bl	80022fe <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 8000604:	2064      	movs	r0, #100	@ 0x64
 8000606:	f000 fd0f 	bl	8001028 <HAL_Delay>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800060a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800060e:	4898      	ldr	r0, [pc, #608]	@ (8000870 <button_handler+0x2f0>)
 8000610:	f001 fe75 	bl	80022fe <HAL_GPIO_TogglePin>
		while (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)) {
 8000614:	2108      	movs	r1, #8
 8000616:	4896      	ldr	r0, [pc, #600]	@ (8000870 <button_handler+0x2f0>)
 8000618:	f001 fe42 	bl	80022a0 <HAL_GPIO_ReadPin>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d1e0      	bne.n	80005e4 <button_handler+0x64>
		}
	}
	if (!HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) && flag_btn1) {
 8000622:	2108      	movs	r1, #8
 8000624:	4892      	ldr	r0, [pc, #584]	@ (8000870 <button_handler+0x2f0>)
 8000626:	f001 fe3b 	bl	80022a0 <HAL_GPIO_ReadPin>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d115      	bne.n	800065c <button_handler+0xdc>
 8000630:	4b90      	ldr	r3, [pc, #576]	@ (8000874 <button_handler+0x2f4>)
 8000632:	781b      	ldrb	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d011      	beq.n	800065c <button_handler+0xdc>
		flag_btn1 = !flag_btn1;
 8000638:	4b8e      	ldr	r3, [pc, #568]	@ (8000874 <button_handler+0x2f4>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	bf14      	ite	ne
 8000640:	2301      	movne	r3, #1
 8000642:	2300      	moveq	r3, #0
 8000644:	b2db      	uxtb	r3, r3
 8000646:	f083 0301 	eor.w	r3, r3, #1
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	b2da      	uxtb	r2, r3
 8000652:	4b88      	ldr	r3, [pc, #544]	@ (8000874 <button_handler+0x2f4>)
 8000654:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000656:	2064      	movs	r0, #100	@ 0x64
 8000658:	f000 fce6 	bl	8001028 <HAL_Delay>
	}
	/* ENGINE STOP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin)
 800065c:	2110      	movs	r1, #16
 800065e:	4884      	ldr	r0, [pc, #528]	@ (8000870 <button_handler+0x2f0>)
 8000660:	f001 fe1e 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d032      	beq.n	80006d0 <button_handler+0x150>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn2) {
 800066a:	f000 fcd3 	bl	8001014 <HAL_GetTick>
 800066e:	4602      	mov	r2, r0
 8000670:	4b81      	ldr	r3, [pc, #516]	@ (8000878 <button_handler+0x2f8>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	2b96      	cmp	r3, #150	@ 0x96
 8000678:	d92a      	bls.n	80006d0 <button_handler+0x150>
 800067a:	4b80      	ldr	r3, [pc, #512]	@ (800087c <button_handler+0x2fc>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	f083 0301 	eor.w	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	2b00      	cmp	r3, #0
 8000686:	d023      	beq.n	80006d0 <button_handler+0x150>
		flag_btn2 = !flag_btn2;
 8000688:	4b7c      	ldr	r3, [pc, #496]	@ (800087c <button_handler+0x2fc>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	bf14      	ite	ne
 8000690:	2301      	movne	r3, #1
 8000692:	2300      	moveq	r3, #0
 8000694:	b2db      	uxtb	r3, r3
 8000696:	f083 0301 	eor.w	r3, r3, #1
 800069a:	b2db      	uxtb	r3, r3
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	b2da      	uxtb	r2, r3
 80006a2:	4b76      	ldr	r3, [pc, #472]	@ (800087c <button_handler+0x2fc>)
 80006a4:	701a      	strb	r2, [r3, #0]
		/* SEND CAN STOP ENGINE MSG HERE */
		msg_type = engn_stop;
 80006a6:	4b71      	ldr	r3, [pc, #452]	@ (800086c <button_handler+0x2ec>)
 80006a8:	2201      	movs	r2, #1
 80006aa:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 80006ac:	4b6f      	ldr	r3, [pc, #444]	@ (800086c <button_handler+0x2ec>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f8eb 	bl	800088c <can_msg_handler>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80006b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ba:	486d      	ldr	r0, [pc, #436]	@ (8000870 <button_handler+0x2f0>)
 80006bc:	f001 fe1f 	bl	80022fe <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80006c0:	2064      	movs	r0, #100	@ 0x64
 80006c2:	f000 fcb1 	bl	8001028 <HAL_Delay>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80006c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ca:	4869      	ldr	r0, [pc, #420]	@ (8000870 <button_handler+0x2f0>)
 80006cc:	f001 fe17 	bl	80022fe <HAL_GPIO_TogglePin>
	}
	if (!HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) && flag_btn2) {
 80006d0:	2110      	movs	r1, #16
 80006d2:	4867      	ldr	r0, [pc, #412]	@ (8000870 <button_handler+0x2f0>)
 80006d4:	f001 fde4 	bl	80022a0 <HAL_GPIO_ReadPin>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d115      	bne.n	800070a <button_handler+0x18a>
 80006de:	4b67      	ldr	r3, [pc, #412]	@ (800087c <button_handler+0x2fc>)
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d011      	beq.n	800070a <button_handler+0x18a>
		flag_btn2 = !flag_btn2;
 80006e6:	4b65      	ldr	r3, [pc, #404]	@ (800087c <button_handler+0x2fc>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	bf14      	ite	ne
 80006ee:	2301      	movne	r3, #1
 80006f0:	2300      	moveq	r3, #0
 80006f2:	b2db      	uxtb	r3, r3
 80006f4:	f083 0301 	eor.w	r3, r3, #1
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	f003 0301 	and.w	r3, r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b5e      	ldr	r3, [pc, #376]	@ (800087c <button_handler+0x2fc>)
 8000702:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000704:	2064      	movs	r0, #100	@ 0x64
 8000706:	f000 fc8f 	bl	8001028 <HAL_Delay>
	}
	/* NEXT SCREEN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 800070a:	2140      	movs	r1, #64	@ 0x40
 800070c:	4858      	ldr	r0, [pc, #352]	@ (8000870 <button_handler+0x2f0>)
 800070e:	f001 fdc7 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d030      	beq.n	800077a <button_handler+0x1fa>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn4) {
 8000718:	f000 fc7c 	bl	8001014 <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	4b56      	ldr	r3, [pc, #344]	@ (8000878 <button_handler+0x2f8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	1ad3      	subs	r3, r2, r3
 8000724:	2b96      	cmp	r3, #150	@ 0x96
 8000726:	d928      	bls.n	800077a <button_handler+0x1fa>
 8000728:	4b55      	ldr	r3, [pc, #340]	@ (8000880 <button_handler+0x300>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2b00      	cmp	r3, #0
 8000734:	d021      	beq.n	800077a <button_handler+0x1fa>
		flag_btn4 = !flag_btn4;
 8000736:	4b52      	ldr	r3, [pc, #328]	@ (8000880 <button_handler+0x300>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	bf14      	ite	ne
 800073e:	2301      	movne	r3, #1
 8000740:	2300      	moveq	r3, #0
 8000742:	b2db      	uxtb	r3, r3
 8000744:	f083 0301 	eor.w	r3, r3, #1
 8000748:	b2db      	uxtb	r3, r3
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	b2da      	uxtb	r2, r3
 8000750:	4b4b      	ldr	r3, [pc, #300]	@ (8000880 <button_handler+0x300>)
 8000752:	701a      	strb	r2, [r3, #0]
		/* SEND USART NEXT SCREEN MSG HERE */
		page = page + 1;
 8000754:	4b4b      	ldr	r3, [pc, #300]	@ (8000884 <button_handler+0x304>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	3301      	adds	r3, #1
 800075a:	b2da      	uxtb	r2, r3
 800075c:	4b49      	ldr	r3, [pc, #292]	@ (8000884 <button_handler+0x304>)
 800075e:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000760:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000764:	4842      	ldr	r0, [pc, #264]	@ (8000870 <button_handler+0x2f0>)
 8000766:	f001 fdca 	bl	80022fe <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800076a:	2064      	movs	r0, #100	@ 0x64
 800076c:	f000 fc5c 	bl	8001028 <HAL_Delay>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000770:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000774:	483e      	ldr	r0, [pc, #248]	@ (8000870 <button_handler+0x2f0>)
 8000776:	f001 fdc2 	bl	80022fe <HAL_GPIO_TogglePin>
	}
	if (!HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && flag_btn4) {
 800077a:	2140      	movs	r1, #64	@ 0x40
 800077c:	483c      	ldr	r0, [pc, #240]	@ (8000870 <button_handler+0x2f0>)
 800077e:	f001 fd8f 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d112      	bne.n	80007ae <button_handler+0x22e>
 8000788:	4b3d      	ldr	r3, [pc, #244]	@ (8000880 <button_handler+0x300>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d00e      	beq.n	80007ae <button_handler+0x22e>
		flag_btn4 = !flag_btn4;
 8000790:	4b3b      	ldr	r3, [pc, #236]	@ (8000880 <button_handler+0x300>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	bf14      	ite	ne
 8000798:	2301      	movne	r3, #1
 800079a:	2300      	moveq	r3, #0
 800079c:	b2db      	uxtb	r3, r3
 800079e:	f083 0301 	eor.w	r3, r3, #1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	f003 0301 	and.w	r3, r3, #1
 80007a8:	b2da      	uxtb	r2, r3
 80007aa:	4b35      	ldr	r3, [pc, #212]	@ (8000880 <button_handler+0x300>)
 80007ac:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(100);
	}
	/* PREVIOUS SCREEN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 80007ae:	2120      	movs	r1, #32
 80007b0:	482f      	ldr	r0, [pc, #188]	@ (8000870 <button_handler+0x2f0>)
 80007b2:	f001 fd75 	bl	80022a0 <HAL_GPIO_ReadPin>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d030      	beq.n	800081e <button_handler+0x29e>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn3) {
 80007bc:	f000 fc2a 	bl	8001014 <HAL_GetTick>
 80007c0:	4602      	mov	r2, r0
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <button_handler+0x2f8>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	2b96      	cmp	r3, #150	@ 0x96
 80007ca:	d928      	bls.n	800081e <button_handler+0x29e>
 80007cc:	4b2e      	ldr	r3, [pc, #184]	@ (8000888 <button_handler+0x308>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	f083 0301 	eor.w	r3, r3, #1
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d021      	beq.n	800081e <button_handler+0x29e>
		flag_btn3 = !flag_btn3;
 80007da:	4b2b      	ldr	r3, [pc, #172]	@ (8000888 <button_handler+0x308>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	2b00      	cmp	r3, #0
 80007e0:	bf14      	ite	ne
 80007e2:	2301      	movne	r3, #1
 80007e4:	2300      	moveq	r3, #0
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	f083 0301 	eor.w	r3, r3, #1
 80007ec:	b2db      	uxtb	r3, r3
 80007ee:	f003 0301 	and.w	r3, r3, #1
 80007f2:	b2da      	uxtb	r2, r3
 80007f4:	4b24      	ldr	r3, [pc, #144]	@ (8000888 <button_handler+0x308>)
 80007f6:	701a      	strb	r2, [r3, #0]
		/* SEND USART PREVIOUS SCREEN MSG HERE */
		page = page - 1;
 80007f8:	4b22      	ldr	r3, [pc, #136]	@ (8000884 <button_handler+0x304>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	3b01      	subs	r3, #1
 80007fe:	b2da      	uxtb	r2, r3
 8000800:	4b20      	ldr	r3, [pc, #128]	@ (8000884 <button_handler+0x304>)
 8000802:	701a      	strb	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000804:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000808:	4819      	ldr	r0, [pc, #100]	@ (8000870 <button_handler+0x2f0>)
 800080a:	f001 fd78 	bl	80022fe <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800080e:	2064      	movs	r0, #100	@ 0x64
 8000810:	f000 fc0a 	bl	8001028 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000814:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000818:	4815      	ldr	r0, [pc, #84]	@ (8000870 <button_handler+0x2f0>)
 800081a:	f001 fd70 	bl	80022fe <HAL_GPIO_TogglePin>
	}
	if (!HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) && flag_btn3) {
 800081e:	2120      	movs	r1, #32
 8000820:	4813      	ldr	r0, [pc, #76]	@ (8000870 <button_handler+0x2f0>)
 8000822:	f001 fd3d 	bl	80022a0 <HAL_GPIO_ReadPin>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d112      	bne.n	8000852 <button_handler+0x2d2>
 800082c:	4b16      	ldr	r3, [pc, #88]	@ (8000888 <button_handler+0x308>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d00e      	beq.n	8000852 <button_handler+0x2d2>
		flag_btn3 = !flag_btn3;
 8000834:	4b14      	ldr	r3, [pc, #80]	@ (8000888 <button_handler+0x308>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	bf14      	ite	ne
 800083c:	2301      	movne	r3, #1
 800083e:	2300      	moveq	r3, #0
 8000840:	b2db      	uxtb	r3, r3
 8000842:	f083 0301 	eor.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	f003 0301 	and.w	r3, r3, #1
 800084c:	b2da      	uxtb	r2, r3
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <button_handler+0x308>)
 8000850:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(100);
	}
	if (page > 5 || page < 1) {
 8000852:	4b0c      	ldr	r3, [pc, #48]	@ (8000884 <button_handler+0x304>)
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	2b05      	cmp	r3, #5
 8000858:	d803      	bhi.n	8000862 <button_handler+0x2e2>
 800085a:	4b0a      	ldr	r3, [pc, #40]	@ (8000884 <button_handler+0x304>)
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d102      	bne.n	8000868 <button_handler+0x2e8>
		page = 1;
 8000862:	4b08      	ldr	r3, [pc, #32]	@ (8000884 <button_handler+0x304>)
 8000864:	2201      	movs	r2, #1
 8000866:	701a      	strb	r2, [r3, #0]
	}

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000003 	.word	0x20000003
 8000870:	40010c00 	.word	0x40010c00
 8000874:	20000176 	.word	0x20000176
 8000878:	2000012c 	.word	0x2000012c
 800087c:	20000177 	.word	0x20000177
 8000880:	20000178 	.word	0x20000178
 8000884:	20000179 	.word	0x20000179
 8000888:	2000017a 	.word	0x2000017a

0800088c <can_msg_handler>:
int can_msg_handler(uint8_t typemsg) {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	71fb      	strb	r3, [r7, #7]
	switch (typemsg) {
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b04      	cmp	r3, #4
 800089a:	f200 8085 	bhi.w	80009a8 <can_msg_handler+0x11c>
 800089e:	a201      	add	r2, pc, #4	@ (adr r2, 80008a4 <can_msg_handler+0x18>)
 80008a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008a4:	080008b9 	.word	0x080008b9
 80008a8:	080008e9 	.word	0x080008e9
 80008ac:	08000919 	.word	0x08000919
 80008b0:	08000949 	.word	0x08000949
 80008b4:	08000979 	.word	0x08000979
	case engn_start:
		/* MSG START ENGINE */
		TxHeader.StdId = 0x643;
 80008b8:	4b40      	ldr	r3, [pc, #256]	@ (80009bc <can_msg_handler+0x130>)
 80008ba:	f240 6243 	movw	r2, #1603	@ 0x643
 80008be:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000001; //using binary system to make bit set more clear
 80008c0:	4b3f      	ldr	r3, [pc, #252]	@ (80009c0 <can_msg_handler+0x134>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 80008c6:	bf00      	nop
 80008c8:	483e      	ldr	r0, [pc, #248]	@ (80009c4 <can_msg_handler+0x138>)
 80008ca:	f000 fea8 	bl	800161e <HAL_CAN_GetTxMailboxesFreeLevel>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d0f9      	beq.n	80008c8 <can_msg_handler+0x3c>
			; //CAN SW#0
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 80008d4:	4b3c      	ldr	r3, [pc, #240]	@ (80009c8 <can_msg_handler+0x13c>)
 80008d6:	4a3a      	ldr	r2, [pc, #232]	@ (80009c0 <can_msg_handler+0x134>)
 80008d8:	4938      	ldr	r1, [pc, #224]	@ (80009bc <can_msg_handler+0x130>)
 80008da:	483a      	ldr	r0, [pc, #232]	@ (80009c4 <can_msg_handler+0x138>)
 80008dc:	f000 fdd0 	bl	8001480 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 80008e0:	4b37      	ldr	r3, [pc, #220]	@ (80009c0 <can_msg_handler+0x134>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	711a      	strb	r2, [r3, #4]
		break;
 80008e6:	e060      	b.n	80009aa <can_msg_handler+0x11e>
	case engn_stop:
		/* MSG STOP ENGINE */
		TxHeader.StdId = 0x642;
 80008e8:	4b34      	ldr	r3, [pc, #208]	@ (80009bc <can_msg_handler+0x130>)
 80008ea:	f240 6242 	movw	r2, #1602	@ 0x642
 80008ee:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000010; //CAN SW#1
 80008f0:	4b33      	ldr	r3, [pc, #204]	@ (80009c0 <can_msg_handler+0x134>)
 80008f2:	2202      	movs	r2, #2
 80008f4:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 80008f6:	bf00      	nop
 80008f8:	4832      	ldr	r0, [pc, #200]	@ (80009c4 <can_msg_handler+0x138>)
 80008fa:	f000 fe90 	bl	800161e <HAL_CAN_GetTxMailboxesFreeLevel>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d0f9      	beq.n	80008f8 <can_msg_handler+0x6c>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000904:	4b30      	ldr	r3, [pc, #192]	@ (80009c8 <can_msg_handler+0x13c>)
 8000906:	4a2e      	ldr	r2, [pc, #184]	@ (80009c0 <can_msg_handler+0x134>)
 8000908:	492c      	ldr	r1, [pc, #176]	@ (80009bc <can_msg_handler+0x130>)
 800090a:	482e      	ldr	r0, [pc, #184]	@ (80009c4 <can_msg_handler+0x138>)
 800090c:	f000 fdb8 	bl	8001480 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000910:	4b2b      	ldr	r3, [pc, #172]	@ (80009c0 <can_msg_handler+0x134>)
 8000912:	2200      	movs	r2, #0
 8000914:	711a      	strb	r2, [r3, #4]
		break;
 8000916:	e048      	b.n	80009aa <can_msg_handler+0x11e>
	case gear_up:
		/* MSG GEAR UP */
		TxHeader.StdId = 0x642;
 8000918:	4b28      	ldr	r3, [pc, #160]	@ (80009bc <can_msg_handler+0x130>)
 800091a:	f240 6242 	movw	r2, #1602	@ 0x642
 800091e:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000100; //CAN SW#2
 8000920:	4b27      	ldr	r3, [pc, #156]	@ (80009c0 <can_msg_handler+0x134>)
 8000922:	2204      	movs	r2, #4
 8000924:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000926:	bf00      	nop
 8000928:	4826      	ldr	r0, [pc, #152]	@ (80009c4 <can_msg_handler+0x138>)
 800092a:	f000 fe78 	bl	800161e <HAL_CAN_GetTxMailboxesFreeLevel>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d0f9      	beq.n	8000928 <can_msg_handler+0x9c>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000934:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <can_msg_handler+0x13c>)
 8000936:	4a22      	ldr	r2, [pc, #136]	@ (80009c0 <can_msg_handler+0x134>)
 8000938:	4920      	ldr	r1, [pc, #128]	@ (80009bc <can_msg_handler+0x130>)
 800093a:	4822      	ldr	r0, [pc, #136]	@ (80009c4 <can_msg_handler+0x138>)
 800093c:	f000 fda0 	bl	8001480 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000940:	4b1f      	ldr	r3, [pc, #124]	@ (80009c0 <can_msg_handler+0x134>)
 8000942:	2200      	movs	r2, #0
 8000944:	711a      	strb	r2, [r3, #4]
		break;
 8000946:	e030      	b.n	80009aa <can_msg_handler+0x11e>
	case gear_down:
		/* MSG GEAR DOWN */
		TxHeader.StdId = 0x642;
 8000948:	4b1c      	ldr	r3, [pc, #112]	@ (80009bc <can_msg_handler+0x130>)
 800094a:	f240 6242 	movw	r2, #1602	@ 0x642
 800094e:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00001000; //CAN SW #3
 8000950:	4b1b      	ldr	r3, [pc, #108]	@ (80009c0 <can_msg_handler+0x134>)
 8000952:	2208      	movs	r2, #8
 8000954:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000956:	bf00      	nop
 8000958:	481a      	ldr	r0, [pc, #104]	@ (80009c4 <can_msg_handler+0x138>)
 800095a:	f000 fe60 	bl	800161e <HAL_CAN_GetTxMailboxesFreeLevel>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d0f9      	beq.n	8000958 <can_msg_handler+0xcc>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000964:	4b18      	ldr	r3, [pc, #96]	@ (80009c8 <can_msg_handler+0x13c>)
 8000966:	4a16      	ldr	r2, [pc, #88]	@ (80009c0 <can_msg_handler+0x134>)
 8000968:	4914      	ldr	r1, [pc, #80]	@ (80009bc <can_msg_handler+0x130>)
 800096a:	4816      	ldr	r0, [pc, #88]	@ (80009c4 <can_msg_handler+0x138>)
 800096c:	f000 fd88 	bl	8001480 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000970:	4b13      	ldr	r3, [pc, #76]	@ (80009c0 <can_msg_handler+0x134>)
 8000972:	2200      	movs	r2, #0
 8000974:	711a      	strb	r2, [r3, #4]
		break;
 8000976:	e018      	b.n	80009aa <can_msg_handler+0x11e>
	case gear_neutral:
		/* MSG GEAR NEUTRAL */
		TxHeader.StdId = 0x642;
 8000978:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <can_msg_handler+0x130>)
 800097a:	f240 6242 	movw	r2, #1602	@ 0x642
 800097e:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00010000; //CAN SW#4
 8000980:	4b0f      	ldr	r3, [pc, #60]	@ (80009c0 <can_msg_handler+0x134>)
 8000982:	2210      	movs	r2, #16
 8000984:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000986:	bf00      	nop
 8000988:	480e      	ldr	r0, [pc, #56]	@ (80009c4 <can_msg_handler+0x138>)
 800098a:	f000 fe48 	bl	800161e <HAL_CAN_GetTxMailboxesFreeLevel>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d0f9      	beq.n	8000988 <can_msg_handler+0xfc>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000994:	4b0c      	ldr	r3, [pc, #48]	@ (80009c8 <can_msg_handler+0x13c>)
 8000996:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <can_msg_handler+0x134>)
 8000998:	4908      	ldr	r1, [pc, #32]	@ (80009bc <can_msg_handler+0x130>)
 800099a:	480a      	ldr	r0, [pc, #40]	@ (80009c4 <can_msg_handler+0x138>)
 800099c:	f000 fd70 	bl	8001480 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 80009a0:	4b07      	ldr	r3, [pc, #28]	@ (80009c0 <can_msg_handler+0x134>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	711a      	strb	r2, [r3, #4]
		break;
 80009a6:	e000      	b.n	80009aa <can_msg_handler+0x11e>
	default:
		/* MSG NONE */
		break;
 80009a8:	bf00      	nop
	}
	msg_type = msg_none; // SET NONE TYPE MSG
 80009aa:	4b08      	ldr	r3, [pc, #32]	@ (80009cc <can_msg_handler+0x140>)
 80009ac:	2205      	movs	r2, #5
 80009ae:	701a      	strb	r2, [r3, #0]
	return 0; // return OK value to prevent endless loop
 80009b0:	2300      	movs	r3, #0
}
 80009b2:	4618      	mov	r0, r3
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200000ec 	.word	0x200000ec
 80009c0:	20000120 	.word	0x20000120
 80009c4:	2000007c 	.word	0x2000007c
 80009c8:	20000128 	.word	0x20000128
 80009cc:	20000003 	.word	0x20000003

080009d0 <data_update_handler>:
void data_update_handler() {
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
	ECU.RPM = RxData.x600[1];
 80009d4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac4 <data_update_handler+0xf4>)
 80009d6:	7a5b      	ldrb	r3, [r3, #9]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b3b      	ldr	r3, [pc, #236]	@ (8000ac8 <data_update_handler+0xf8>)
 80009dc:	801a      	strh	r2, [r3, #0]
	ECU.RPM = ECU.RPM << 7;
 80009de:	4b3a      	ldr	r3, [pc, #232]	@ (8000ac8 <data_update_handler+0xf8>)
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	01db      	lsls	r3, r3, #7
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	4b38      	ldr	r3, [pc, #224]	@ (8000ac8 <data_update_handler+0xf8>)
 80009e8:	801a      	strh	r2, [r3, #0]
	ECU.RPM = ECU.RPM + RxData.x600[0];
 80009ea:	4b37      	ldr	r3, [pc, #220]	@ (8000ac8 <data_update_handler+0xf8>)
 80009ec:	881b      	ldrh	r3, [r3, #0]
 80009ee:	4a35      	ldr	r2, [pc, #212]	@ (8000ac4 <data_update_handler+0xf4>)
 80009f0:	7a12      	ldrb	r2, [r2, #8]
 80009f2:	4413      	add	r3, r2
 80009f4:	b29a      	uxth	r2, r3
 80009f6:	4b34      	ldr	r3, [pc, #208]	@ (8000ac8 <data_update_handler+0xf8>)
 80009f8:	801a      	strh	r2, [r3, #0]
	//TODO: fix 2 byte variables (as below)
	ECU.TPS = RxData.x600[2];
 80009fa:	4b32      	ldr	r3, [pc, #200]	@ (8000ac4 <data_update_handler+0xf4>)
 80009fc:	7a9a      	ldrb	r2, [r3, #10]
 80009fe:	4b32      	ldr	r3, [pc, #200]	@ (8000ac8 <data_update_handler+0xf8>)
 8000a00:	759a      	strb	r2, [r3, #22]
	ECU.MAP = RxData.x600[3] + RxData.x600[4];
 8000a02:	4b30      	ldr	r3, [pc, #192]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a04:	7adb      	ldrb	r3, [r3, #11]
 8000a06:	461a      	mov	r2, r3
 8000a08:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a0a:	7b1b      	ldrb	r3, [r3, #12]
 8000a0c:	4413      	add	r3, r2
 8000a0e:	b29a      	uxth	r2, r3
 8000a10:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac8 <data_update_handler+0xf8>)
 8000a12:	805a      	strh	r2, [r3, #2]
	//0x600 {0_RPM, 1_RPM, 2_TPS, 3_IAT, 4_MAP, 5_MAP, 6_INJPW, 7_INJPW}
	ECU.AIN1 = RxData.x601[0] + RxData.x601[1];
 8000a14:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a16:	7c1b      	ldrb	r3, [r3, #16]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a1c:	7c5b      	ldrb	r3, [r3, #17]
 8000a1e:	4413      	add	r3, r2
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	4b29      	ldr	r3, [pc, #164]	@ (8000ac8 <data_update_handler+0xf8>)
 8000a24:	80da      	strh	r2, [r3, #6]
	ECU.AIN2 = RxData.x601[2] + RxData.x601[3];
 8000a26:	4b27      	ldr	r3, [pc, #156]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a28:	7c9b      	ldrb	r3, [r3, #18]
 8000a2a:	461a      	mov	r2, r3
 8000a2c:	4b25      	ldr	r3, [pc, #148]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a2e:	7cdb      	ldrb	r3, [r3, #19]
 8000a30:	4413      	add	r3, r2
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	4b24      	ldr	r3, [pc, #144]	@ (8000ac8 <data_update_handler+0xf8>)
 8000a36:	811a      	strh	r2, [r3, #8]
	ECU.AIN3 = RxData.x601[4] + RxData.x601[5];
 8000a38:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a3a:	7d1b      	ldrb	r3, [r3, #20]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	4b21      	ldr	r3, [pc, #132]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a40:	7d5b      	ldrb	r3, [r3, #21]
 8000a42:	4413      	add	r3, r2
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	4b20      	ldr	r3, [pc, #128]	@ (8000ac8 <data_update_handler+0xf8>)
 8000a48:	815a      	strh	r2, [r3, #10]
	ECU.AIN4 = RxData.x601[6] + RxData.x601[7];
 8000a4a:	4b1e      	ldr	r3, [pc, #120]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a4c:	7d9b      	ldrb	r3, [r3, #22]
 8000a4e:	461a      	mov	r2, r3
 8000a50:	4b1c      	ldr	r3, [pc, #112]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a52:	7ddb      	ldrb	r3, [r3, #23]
 8000a54:	4413      	add	r3, r2
 8000a56:	b29a      	uxth	r2, r3
 8000a58:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac8 <data_update_handler+0xf8>)
 8000a5a:	819a      	strh	r2, [r3, #12]
	//0x601 {0_AIN1, 1_AIN1, 2_AIN2, 3_AIN2, 4_AIN3, 5_AIN3,6_AIN4, 7_AIN4}
	ECU.VSPD = RxData.x602[0] + RxData.x602[1];
 8000a5c:	4b19      	ldr	r3, [pc, #100]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a5e:	7e1b      	ldrb	r3, [r3, #24]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b18      	ldr	r3, [pc, #96]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a64:	7e5b      	ldrb	r3, [r3, #25]
 8000a66:	4413      	add	r3, r2
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	4b17      	ldr	r3, [pc, #92]	@ (8000ac8 <data_update_handler+0xf8>)
 8000a6c:	81da      	strh	r2, [r3, #14]
	ECU.BARO = RxData.x602[3];
 8000a6e:	4b15      	ldr	r3, [pc, #84]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a70:	7eda      	ldrb	r2, [r3, #27]
 8000a72:	4b15      	ldr	r3, [pc, #84]	@ (8000ac8 <data_update_handler+0xf8>)
 8000a74:	75da      	strb	r2, [r3, #23]
	ECU.OILT = RxData.x602[4];
 8000a76:	4b13      	ldr	r3, [pc, #76]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a78:	7f1a      	ldrb	r2, [r3, #28]
 8000a7a:	4b13      	ldr	r3, [pc, #76]	@ (8000ac8 <data_update_handler+0xf8>)
 8000a7c:	761a      	strb	r2, [r3, #24]
	ECU.FUELP = RxData.x602[5];
 8000a7e:	4b11      	ldr	r3, [pc, #68]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a80:	7f5a      	ldrb	r2, [r3, #29]
 8000a82:	4b11      	ldr	r3, [pc, #68]	@ (8000ac8 <data_update_handler+0xf8>)
 8000a84:	769a      	strb	r2, [r3, #26]
	ECU.CLT = RxData.x602[6] + RxData.x602[7];
 8000a86:	4b0f      	ldr	r3, [pc, #60]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a88:	7f9b      	ldrb	r3, [r3, #30]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a8e:	7fdb      	ldrb	r3, [r3, #31]
 8000a90:	4413      	add	r3, r2
 8000a92:	b29b      	uxth	r3, r3
 8000a94:	b21a      	sxth	r2, r3
 8000a96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ac8 <data_update_handler+0xf8>)
 8000a98:	829a      	strh	r2, [r3, #20]
	//0x602 {0_VSPD, 1_VSPD, 2_BARO, 3_OILT, 4_OILP, 5_FUELP, 6_CLT, 7_CLT}
	ECU.GEAR = RxData.x604[0];
 8000a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ac4 <data_update_handler+0xf4>)
 8000a9c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000aa0:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <data_update_handler+0xf8>)
 8000aa2:	76da      	strb	r2, [r3, #27]
	ECU.BATT = RxData.x604[2] + RxData.x604[3];
 8000aa4:	4b07      	ldr	r3, [pc, #28]	@ (8000ac4 <data_update_handler+0xf4>)
 8000aa6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000aaa:	461a      	mov	r2, r3
 8000aac:	4b05      	ldr	r3, [pc, #20]	@ (8000ac4 <data_update_handler+0xf4>)
 8000aae:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000ab2:	4413      	add	r3, r2
 8000ab4:	b29a      	uxth	r2, r3
 8000ab6:	4b04      	ldr	r3, [pc, #16]	@ (8000ac8 <data_update_handler+0xf8>)
 8000ab8:	821a      	strh	r2, [r3, #16]
	//0x604 {0_GEAR, 1_ECUTEMP, 2_BATT, 3_BATT, 4_ERRFLAG, 5_ERRFLAG, 6_FLAGS1, 7_ETHANOL}
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	20000130 	.word	0x20000130
 8000ac8:	20000158 	.word	0x20000158

08000acc <data_send_handler>:
void data_send_handler(void) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	//TODO: Add cmd send for last variables
	static char cmd[50] = { 0 };
	sprintf(cmd, "RP.txt=\"%d\"", ECU.RPM);
 8000ad0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b50 <data_send_handler+0x84>)
 8000ad2:	881b      	ldrh	r3, [r3, #0]
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	491f      	ldr	r1, [pc, #124]	@ (8000b54 <data_send_handler+0x88>)
 8000ad8:	481f      	ldr	r0, [pc, #124]	@ (8000b58 <data_send_handler+0x8c>)
 8000ada:	f002 fa5d 	bl	8002f98 <siprintf>
	nextion_send(cmd);
 8000ade:	481e      	ldr	r0, [pc, #120]	@ (8000b58 <data_send_handler+0x8c>)
 8000ae0:	f7ff fb3c 	bl	800015c <nextion_send>
	sprintf(cmd, "GE.txt=\"%d\"", ECU.GEAR);
 8000ae4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b50 <data_send_handler+0x84>)
 8000ae6:	7edb      	ldrb	r3, [r3, #27]
 8000ae8:	461a      	mov	r2, r3
 8000aea:	491c      	ldr	r1, [pc, #112]	@ (8000b5c <data_send_handler+0x90>)
 8000aec:	481a      	ldr	r0, [pc, #104]	@ (8000b58 <data_send_handler+0x8c>)
 8000aee:	f002 fa53 	bl	8002f98 <siprintf>
	nextion_send(cmd);
 8000af2:	4819      	ldr	r0, [pc, #100]	@ (8000b58 <data_send_handler+0x8c>)
 8000af4:	f7ff fb32 	bl	800015c <nextion_send>
	sprintf(cmd, "SP.txt=\"%d\"", ECU.VSPD);
 8000af8:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <data_send_handler+0x84>)
 8000afa:	89db      	ldrh	r3, [r3, #14]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4918      	ldr	r1, [pc, #96]	@ (8000b60 <data_send_handler+0x94>)
 8000b00:	4815      	ldr	r0, [pc, #84]	@ (8000b58 <data_send_handler+0x8c>)
 8000b02:	f002 fa49 	bl	8002f98 <siprintf>
	nextion_send(cmd);
 8000b06:	4814      	ldr	r0, [pc, #80]	@ (8000b58 <data_send_handler+0x8c>)
 8000b08:	f7ff fb28 	bl	800015c <nextion_send>
	sprintf(cmd, "VO.txt=\"%d\"", ECU.BATT);
 8000b0c:	4b10      	ldr	r3, [pc, #64]	@ (8000b50 <data_send_handler+0x84>)
 8000b0e:	8a1b      	ldrh	r3, [r3, #16]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4914      	ldr	r1, [pc, #80]	@ (8000b64 <data_send_handler+0x98>)
 8000b14:	4810      	ldr	r0, [pc, #64]	@ (8000b58 <data_send_handler+0x8c>)
 8000b16:	f002 fa3f 	bl	8002f98 <siprintf>
	nextion_send(cmd);
 8000b1a:	480f      	ldr	r0, [pc, #60]	@ (8000b58 <data_send_handler+0x8c>)
 8000b1c:	f7ff fb1e 	bl	800015c <nextion_send>
	sprintf(cmd, "OI.txt=\"%d\"", ECU.OILT);
 8000b20:	4b0b      	ldr	r3, [pc, #44]	@ (8000b50 <data_send_handler+0x84>)
 8000b22:	7e1b      	ldrb	r3, [r3, #24]
 8000b24:	461a      	mov	r2, r3
 8000b26:	4910      	ldr	r1, [pc, #64]	@ (8000b68 <data_send_handler+0x9c>)
 8000b28:	480b      	ldr	r0, [pc, #44]	@ (8000b58 <data_send_handler+0x8c>)
 8000b2a:	f002 fa35 	bl	8002f98 <siprintf>
	nextion_send(cmd);
 8000b2e:	480a      	ldr	r0, [pc, #40]	@ (8000b58 <data_send_handler+0x8c>)
 8000b30:	f7ff fb14 	bl	800015c <nextion_send>
	sprintf(cmd, "WA.txt=\"%d\"", ECU.CLT);
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <data_send_handler+0x84>)
 8000b36:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8000b3a:	461a      	mov	r2, r3
 8000b3c:	490b      	ldr	r1, [pc, #44]	@ (8000b6c <data_send_handler+0xa0>)
 8000b3e:	4806      	ldr	r0, [pc, #24]	@ (8000b58 <data_send_handler+0x8c>)
 8000b40:	f002 fa2a 	bl	8002f98 <siprintf>
	nextion_send(cmd);
 8000b44:	4804      	ldr	r0, [pc, #16]	@ (8000b58 <data_send_handler+0x8c>)
 8000b46:	f7ff fb09 	bl	800015c <nextion_send>
	//add fan ECU stream msg
}
 8000b4a:	bf00      	nop
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	20000158 	.word	0x20000158
 8000b54:	08003910 	.word	0x08003910
 8000b58:	2000017c 	.word	0x2000017c
 8000b5c:	0800391c 	.word	0x0800391c
 8000b60:	08003928 	.word	0x08003928
 8000b64:	08003934 	.word	0x08003934
 8000b68:	08003940 	.word	0x08003940
 8000b6c:	0800394c 	.word	0x0800394c

08000b70 <startup>:
void startup() {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b7a:	4823      	ldr	r0, [pc, #140]	@ (8000c08 <startup+0x98>)
 8000b7c:	f001 fba7 	bl	80022ce <HAL_GPIO_WritePin>
	TxHeader.StdId = 0x642;
 8000b80:	4b22      	ldr	r3, [pc, #136]	@ (8000c0c <startup+0x9c>)
 8000b82:	f240 6242 	movw	r2, #1602	@ 0x642
 8000b86:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8000b88:	4b20      	ldr	r3, [pc, #128]	@ (8000c0c <startup+0x9c>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA; // CAN_RTR_REMOTE
 8000b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8000c0c <startup+0x9c>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;   // USE STANDART ID
 8000b94:	4b1d      	ldr	r3, [pc, #116]	@ (8000c0c <startup+0x9c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000b9a:	4b1c      	ldr	r3, [pc, #112]	@ (8000c0c <startup+0x9c>)
 8000b9c:	2208      	movs	r2, #8
 8000b9e:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = 0;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	@ (8000c0c <startup+0x9c>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	751a      	strb	r2, [r3, #20]
	while (HAL_CAN_Start(&hcan) == HAL_ERROR)
 8000ba6:	bf00      	nop
 8000ba8:	4819      	ldr	r0, [pc, #100]	@ (8000c10 <startup+0xa0>)
 8000baa:	f000 fc25 	bl	80013f8 <HAL_CAN_Start>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d0f9      	beq.n	8000ba8 <startup+0x38>
		;
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_ERROR);
 8000bb4:	f248 0102 	movw	r1, #32770	@ 0x8002
 8000bb8:	4815      	ldr	r0, [pc, #84]	@ (8000c10 <startup+0xa0>)
 8000bba:	f000 fe85 	bl	80018c8 <HAL_CAN_ActivateNotification>
	/* SOME LED BLINK FOR SUCCESSFUL STARTUP*/
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin, 1);
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000bc4:	4813      	ldr	r0, [pc, #76]	@ (8000c14 <startup+0xa4>)
 8000bc6:	f001 fb82 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000bca:	20c8      	movs	r0, #200	@ 0xc8
 8000bcc:	f000 fa2c 	bl	8001028 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000bd6:	480f      	ldr	r0, [pc, #60]	@ (8000c14 <startup+0xa4>)
 8000bd8:	f001 fb79 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000be2:	4809      	ldr	r0, [pc, #36]	@ (8000c08 <startup+0x98>)
 8000be4:	f001 fb73 	bl	80022ce <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000be8:	20c8      	movs	r0, #200	@ 0xc8
 8000bea:	f000 fa1d 	bl	8001028 <HAL_Delay>
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bf4:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <startup+0x98>)
 8000bf6:	f001 fb6a 	bl	80022ce <HAL_GPIO_WritePin>
	time_ms = HAL_GetTick();
 8000bfa:	f000 fa0b 	bl	8001014 <HAL_GetTick>
 8000bfe:	4603      	mov	r3, r0
 8000c00:	4a05      	ldr	r2, [pc, #20]	@ (8000c18 <startup+0xa8>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40011000 	.word	0x40011000
 8000c0c:	200000ec 	.word	0x200000ec
 8000c10:	2000007c 	.word	0x2000007c
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	2000012c 	.word	0x2000012c

08000c1c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c20:	b672      	cpsid	i
}
 8000c22:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000c24:	2201      	movs	r2, #1
 8000c26:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c2a:	4805      	ldr	r0, [pc, #20]	@ (8000c40 <Error_Handler+0x24>)
 8000c2c:	f001 fb4f 	bl	80022ce <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8000c30:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000c34:	f000 f9f8 	bl	8001028 <HAL_Delay>
		HAL_NVIC_SystemReset();
 8000c38:	f001 f99d 	bl	8001f76 <HAL_NVIC_SystemReset>
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000c3c:	bf00      	nop
 8000c3e:	e7f1      	b.n	8000c24 <Error_Handler+0x8>
 8000c40:	40011000 	.word	0x40011000

08000c44 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c4c:	699b      	ldr	r3, [r3, #24]
 8000c4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	6193      	str	r3, [r2, #24]
 8000c56:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <HAL_MspInit+0x5c>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <HAL_MspInit+0x60>)
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	4a04      	ldr	r2, [pc, #16]	@ (8000ca4 <HAL_MspInit+0x60>)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c96:	bf00      	nop
 8000c98:	3714      	adds	r7, #20
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bc80      	pop	{r7}
 8000c9e:	4770      	bx	lr
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	@ 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a2d      	ldr	r2, [pc, #180]	@ (8000d78 <HAL_CAN_MspInit+0xd0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d153      	bne.n	8000d70 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8000d7c <HAL_CAN_MspInit+0xd4>)
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	4a2b      	ldr	r2, [pc, #172]	@ (8000d7c <HAL_CAN_MspInit+0xd4>)
 8000cce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cd2:	61d3      	str	r3, [r2, #28]
 8000cd4:	4b29      	ldr	r3, [pc, #164]	@ (8000d7c <HAL_CAN_MspInit+0xd4>)
 8000cd6:	69db      	ldr	r3, [r3, #28]
 8000cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cdc:	613b      	str	r3, [r7, #16]
 8000cde:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce0:	4b26      	ldr	r3, [pc, #152]	@ (8000d7c <HAL_CAN_MspInit+0xd4>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	4a25      	ldr	r2, [pc, #148]	@ (8000d7c <HAL_CAN_MspInit+0xd4>)
 8000ce6:	f043 0308 	orr.w	r3, r3, #8
 8000cea:	6193      	str	r3, [r2, #24]
 8000cec:	4b23      	ldr	r3, [pc, #140]	@ (8000d7c <HAL_CAN_MspInit+0xd4>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0308 	and.w	r3, r3, #8
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000cf8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000cfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	481c      	ldr	r0, [pc, #112]	@ (8000d80 <HAL_CAN_MspInit+0xd8>)
 8000d0e:	f001 f943 	bl	8001f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d1c:	2303      	movs	r3, #3
 8000d1e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 0314 	add.w	r3, r7, #20
 8000d24:	4619      	mov	r1, r3
 8000d26:	4816      	ldr	r0, [pc, #88]	@ (8000d80 <HAL_CAN_MspInit+0xd8>)
 8000d28:	f001 f936 	bl	8001f98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000d2c:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <HAL_CAN_MspInit+0xdc>)
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d34:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000d38:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d3c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d40:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000d84 <HAL_CAN_MspInit+0xdc>)
 8000d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d4e:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8000d50:	2200      	movs	r2, #0
 8000d52:	2101      	movs	r1, #1
 8000d54:	2014      	movs	r0, #20
 8000d56:	f001 f8e4 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000d5a:	2014      	movs	r0, #20
 8000d5c:	f001 f8fd 	bl	8001f5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2102      	movs	r1, #2
 8000d64:	2015      	movs	r0, #21
 8000d66:	f001 f8dc 	bl	8001f22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000d6a:	2015      	movs	r0, #21
 8000d6c:	f001 f8f5 	bl	8001f5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000d70:	bf00      	nop
 8000d72:	3728      	adds	r7, #40	@ 0x28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	40006400 	.word	0x40006400
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40010c00 	.word	0x40010c00
 8000d84:	40010000 	.word	0x40010000

08000d88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b088      	sub	sp, #32
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a1c      	ldr	r2, [pc, #112]	@ (8000e14 <HAL_UART_MspInit+0x8c>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d131      	bne.n	8000e0c <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000da8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e18 <HAL_UART_MspInit+0x90>)
 8000daa:	699b      	ldr	r3, [r3, #24]
 8000dac:	4a1a      	ldr	r2, [pc, #104]	@ (8000e18 <HAL_UART_MspInit+0x90>)
 8000dae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db2:	6193      	str	r3, [r2, #24]
 8000db4:	4b18      	ldr	r3, [pc, #96]	@ (8000e18 <HAL_UART_MspInit+0x90>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc0:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_UART_MspInit+0x90>)
 8000dc2:	699b      	ldr	r3, [r3, #24]
 8000dc4:	4a14      	ldr	r2, [pc, #80]	@ (8000e18 <HAL_UART_MspInit+0x90>)
 8000dc6:	f043 0304 	orr.w	r3, r3, #4
 8000dca:	6193      	str	r3, [r2, #24]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_UART_MspInit+0x90>)
 8000dce:	699b      	ldr	r3, [r3, #24]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dd8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ddc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000de2:	2303      	movs	r3, #3
 8000de4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de6:	f107 0310 	add.w	r3, r7, #16
 8000dea:	4619      	mov	r1, r3
 8000dec:	480b      	ldr	r0, [pc, #44]	@ (8000e1c <HAL_UART_MspInit+0x94>)
 8000dee:	f001 f8d3 	bl	8001f98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000df2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000df6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <HAL_UART_MspInit+0x94>)
 8000e08:	f001 f8c6 	bl	8001f98 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40013800 	.word	0x40013800
 8000e18:	40021000 	.word	0x40021000
 8000e1c:	40010800 	.word	0x40010800

08000e20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e24:	bf00      	nop
 8000e26:	e7fd      	b.n	8000e24 <NMI_Handler+0x4>

08000e28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <HardFault_Handler+0x4>

08000e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e34:	bf00      	nop
 8000e36:	e7fd      	b.n	8000e34 <MemManage_Handler+0x4>

08000e38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e3c:	bf00      	nop
 8000e3e:	e7fd      	b.n	8000e3c <BusFault_Handler+0x4>

08000e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e44:	bf00      	nop
 8000e46:	e7fd      	b.n	8000e44 <UsageFault_Handler+0x4>

08000e48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e54:	b480      	push	{r7}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e58:	bf00      	nop
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bc80      	pop	{r7}
 8000e6a:	4770      	bx	lr

08000e6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e70:	f000 f8be 	bl	8000ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e7c:	4802      	ldr	r0, [pc, #8]	@ (8000e88 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000e7e:	f000 fd48 	bl	8001912 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	2000007c 	.word	0x2000007c

08000e8c <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000e90:	4802      	ldr	r0, [pc, #8]	@ (8000e9c <CAN1_RX1_IRQHandler+0x10>)
 8000e92:	f000 fd3e 	bl	8001912 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000007c 	.word	0x2000007c

08000ea0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ea8:	4a14      	ldr	r2, [pc, #80]	@ (8000efc <_sbrk+0x5c>)
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <_sbrk+0x60>)
 8000eac:	1ad3      	subs	r3, r2, r3
 8000eae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000eb4:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <_sbrk+0x64>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d102      	bne.n	8000ec2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <_sbrk+0x64>)
 8000ebe:	4a12      	ldr	r2, [pc, #72]	@ (8000f08 <_sbrk+0x68>)
 8000ec0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <_sbrk+0x64>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4413      	add	r3, r2
 8000eca:	693a      	ldr	r2, [r7, #16]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	d207      	bcs.n	8000ee0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ed0:	f002 f88a 	bl	8002fe8 <__errno>
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	220c      	movs	r2, #12
 8000ed8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e009      	b.n	8000ef4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <_sbrk+0x64>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <_sbrk+0x64>)
 8000ef0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ef2:	68fb      	ldr	r3, [r7, #12]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3718      	adds	r7, #24
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	20005000 	.word	0x20005000
 8000f00:	00000400 	.word	0x00000400
 8000f04:	200001b0 	.word	0x200001b0
 8000f08:	20000300 	.word	0x20000300

08000f0c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bc80      	pop	{r7}
 8000f16:	4770      	bx	lr

08000f18 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f18:	f7ff fff8 	bl	8000f0c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f1c:	480b      	ldr	r0, [pc, #44]	@ (8000f4c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000f1e:	490c      	ldr	r1, [pc, #48]	@ (8000f50 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000f20:	4a0c      	ldr	r2, [pc, #48]	@ (8000f54 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000f22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f24:	e002      	b.n	8000f2c <LoopCopyDataInit>

08000f26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f2a:	3304      	adds	r3, #4

08000f2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f30:	d3f9      	bcc.n	8000f26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f32:	4a09      	ldr	r2, [pc, #36]	@ (8000f58 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000f34:	4c09      	ldr	r4, [pc, #36]	@ (8000f5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f38:	e001      	b.n	8000f3e <LoopFillZerobss>

08000f3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f3c:	3204      	adds	r2, #4

08000f3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f40:	d3fb      	bcc.n	8000f3a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f42:	f002 f857 	bl	8002ff4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f46:	f7ff f9a1 	bl	800028c <main>
  bx lr
 8000f4a:	4770      	bx	lr
  ldr r0, =_sdata
 8000f4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f50:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000f54:	080039c8 	.word	0x080039c8
  ldr r2, =_sbss
 8000f58:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000f5c:	20000300 	.word	0x20000300

08000f60 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f60:	e7fe      	b.n	8000f60 <ADC1_2_IRQHandler>
	...

08000f64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f68:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <HAL_Init+0x28>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a07      	ldr	r2, [pc, #28]	@ (8000f8c <HAL_Init+0x28>)
 8000f6e:	f043 0310 	orr.w	r3, r3, #16
 8000f72:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f74:	2003      	movs	r0, #3
 8000f76:	f000 ffc9 	bl	8001f0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f7a:	200f      	movs	r0, #15
 8000f7c:	f000 f808 	bl	8000f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f80:	f7ff fe60 	bl	8000c44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40022000 	.word	0x40022000

08000f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f98:	4b12      	ldr	r3, [pc, #72]	@ (8000fe4 <HAL_InitTick+0x54>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	4b12      	ldr	r3, [pc, #72]	@ (8000fe8 <HAL_InitTick+0x58>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 ffe5 	bl	8001f7e <HAL_SYSTICK_Config>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fba:	2301      	movs	r3, #1
 8000fbc:	e00e      	b.n	8000fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d80a      	bhi.n	8000fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fcc:	f000 ffa9 	bl	8001f22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fd0:	4a06      	ldr	r2, [pc, #24]	@ (8000fec <HAL_InitTick+0x5c>)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	e000      	b.n	8000fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000004 	.word	0x20000004
 8000fe8:	2000000c 	.word	0x2000000c
 8000fec:	20000008 	.word	0x20000008

08000ff0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ff4:	4b05      	ldr	r3, [pc, #20]	@ (800100c <HAL_IncTick+0x1c>)
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	461a      	mov	r2, r3
 8000ffa:	4b05      	ldr	r3, [pc, #20]	@ (8001010 <HAL_IncTick+0x20>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4413      	add	r3, r2
 8001000:	4a03      	ldr	r2, [pc, #12]	@ (8001010 <HAL_IncTick+0x20>)
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr
 800100c:	2000000c 	.word	0x2000000c
 8001010:	200001b4 	.word	0x200001b4

08001014 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  return uwTick;
 8001018:	4b02      	ldr	r3, [pc, #8]	@ (8001024 <HAL_GetTick+0x10>)
 800101a:	681b      	ldr	r3, [r3, #0]
}
 800101c:	4618      	mov	r0, r3
 800101e:	46bd      	mov	sp, r7
 8001020:	bc80      	pop	{r7}
 8001022:	4770      	bx	lr
 8001024:	200001b4 	.word	0x200001b4

08001028 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001030:	f7ff fff0 	bl	8001014 <HAL_GetTick>
 8001034:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001040:	d005      	beq.n	800104e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001042:	4b0a      	ldr	r3, [pc, #40]	@ (800106c <HAL_Delay+0x44>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800104e:	bf00      	nop
 8001050:	f7ff ffe0 	bl	8001014 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	429a      	cmp	r2, r3
 800105e:	d8f7      	bhi.n	8001050 <HAL_Delay+0x28>
  {
  }
}
 8001060:	bf00      	nop
 8001062:	bf00      	nop
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000000c 	.word	0x2000000c

08001070 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e0ed      	b.n	800125e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fe0a 	bl	8000ca8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f042 0201 	orr.w	r2, r2, #1
 80010a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010a4:	f7ff ffb6 	bl	8001014 <HAL_GetTick>
 80010a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010aa:	e012      	b.n	80010d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010ac:	f7ff ffb2 	bl	8001014 <HAL_GetTick>
 80010b0:	4602      	mov	r2, r0
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	1ad3      	subs	r3, r2, r3
 80010b6:	2b0a      	cmp	r3, #10
 80010b8:	d90b      	bls.n	80010d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80010be:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2205      	movs	r2, #5
 80010ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e0c5      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d0e5      	beq.n	80010ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f022 0202 	bic.w	r2, r2, #2
 80010ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010f0:	f7ff ff90 	bl	8001014 <HAL_GetTick>
 80010f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80010f6:	e012      	b.n	800111e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f8:	f7ff ff8c 	bl	8001014 <HAL_GetTick>
 80010fc:	4602      	mov	r2, r0
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	1ad3      	subs	r3, r2, r3
 8001102:	2b0a      	cmp	r3, #10
 8001104:	d90b      	bls.n	800111e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800110a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2205      	movs	r2, #5
 8001116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e09f      	b.n	800125e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1e5      	bne.n	80010f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e1b      	ldrb	r3, [r3, #24]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d108      	bne.n	8001146 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	e007      	b.n	8001156 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001154:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	7e5b      	ldrb	r3, [r3, #25]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d108      	bne.n	8001170 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	e007      	b.n	8001180 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800117e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7e9b      	ldrb	r3, [r3, #26]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d108      	bne.n	800119a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	681a      	ldr	r2, [r3, #0]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f042 0220 	orr.w	r2, r2, #32
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e007      	b.n	80011aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 0220 	bic.w	r2, r2, #32
 80011a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	7edb      	ldrb	r3, [r3, #27]
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	d108      	bne.n	80011c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f022 0210 	bic.w	r2, r2, #16
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	e007      	b.n	80011d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f042 0210 	orr.w	r2, r2, #16
 80011d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	7f1b      	ldrb	r3, [r3, #28]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d108      	bne.n	80011ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0208 	orr.w	r2, r2, #8
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	e007      	b.n	80011fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f022 0208 	bic.w	r2, r2, #8
 80011fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7f5b      	ldrb	r3, [r3, #29]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d108      	bne.n	8001218 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	681a      	ldr	r2, [r3, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f042 0204 	orr.w	r2, r2, #4
 8001214:	601a      	str	r2, [r3, #0]
 8001216:	e007      	b.n	8001228 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f022 0204 	bic.w	r2, r2, #4
 8001226:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	431a      	orrs	r2, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	431a      	orrs	r2, r3
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	ea42 0103 	orr.w	r1, r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	430a      	orrs	r2, r1
 800124c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2200      	movs	r2, #0
 8001252:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	2201      	movs	r2, #1
 8001258:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001266:	b480      	push	{r7}
 8001268:	b087      	sub	sp, #28
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800127c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800127e:	7cfb      	ldrb	r3, [r7, #19]
 8001280:	2b01      	cmp	r3, #1
 8001282:	d003      	beq.n	800128c <HAL_CAN_ConfigFilter+0x26>
 8001284:	7cfb      	ldrb	r3, [r7, #19]
 8001286:	2b02      	cmp	r3, #2
 8001288:	f040 80aa 	bne.w	80013e0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001292:	f043 0201 	orr.w	r2, r3, #1
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	695b      	ldr	r3, [r3, #20]
 80012a0:	f003 031f 	and.w	r3, r3, #31
 80012a4:	2201      	movs	r2, #1
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	401a      	ands	r2, r3
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d123      	bne.n	800130e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43db      	mvns	r3, r3
 80012d0:	401a      	ands	r2, r3
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80012e8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80012ea:	697b      	ldr	r3, [r7, #20]
 80012ec:	3248      	adds	r2, #72	@ 0x48
 80012ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001302:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001304:	6979      	ldr	r1, [r7, #20]
 8001306:	3348      	adds	r3, #72	@ 0x48
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	440b      	add	r3, r1
 800130c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	69db      	ldr	r3, [r3, #28]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d122      	bne.n	800135c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	431a      	orrs	r2, r3
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001332:	683a      	ldr	r2, [r7, #0]
 8001334:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001336:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	3248      	adds	r2, #72	@ 0x48
 800133c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001350:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001352:	6979      	ldr	r1, [r7, #20]
 8001354:	3348      	adds	r3, #72	@ 0x48
 8001356:	00db      	lsls	r3, r3, #3
 8001358:	440b      	add	r3, r1
 800135a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	43db      	mvns	r3, r3
 800136e:	401a      	ands	r2, r3
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001376:	e007      	b.n	8001388 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	431a      	orrs	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	691b      	ldr	r3, [r3, #16]
 800138c:	2b00      	cmp	r3, #0
 800138e:	d109      	bne.n	80013a4 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	43db      	mvns	r3, r3
 800139a:	401a      	ands	r2, r3
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80013a2:	e007      	b.n	80013b4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	431a      	orrs	r2, r3
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d107      	bne.n	80013cc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80013d2:	f023 0201 	bic.w	r2, r3, #1
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	e006      	b.n	80013ee <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013e4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80013ec:	2301      	movs	r3, #1
  }
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	371c      	adds	r7, #28
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b084      	sub	sp, #16
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b01      	cmp	r3, #1
 800140a:	d12e      	bne.n	800146a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	2202      	movs	r2, #2
 8001410:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f022 0201 	bic.w	r2, r2, #1
 8001422:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001424:	f7ff fdf6 	bl	8001014 <HAL_GetTick>
 8001428:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800142a:	e012      	b.n	8001452 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800142c:	f7ff fdf2 	bl	8001014 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b0a      	cmp	r3, #10
 8001438:	d90b      	bls.n	8001452 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800143e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e012      	b.n	8001478 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f003 0301 	and.w	r3, r3, #1
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1e5      	bne.n	800142c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e006      	b.n	8001478 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
  }
}
 8001478:	4618      	mov	r0, r3
 800147a:	3710      	adds	r7, #16
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
 800148c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001494:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800149e:	7ffb      	ldrb	r3, [r7, #31]
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d003      	beq.n	80014ac <HAL_CAN_AddTxMessage+0x2c>
 80014a4:	7ffb      	ldrb	r3, [r7, #31]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	f040 80ad 	bne.w	8001606 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d10a      	bne.n	80014cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d105      	bne.n	80014cc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	f000 8095 	beq.w	80015f6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	0e1b      	lsrs	r3, r3, #24
 80014d0:	f003 0303 	and.w	r3, r3, #3
 80014d4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80014d6:	2201      	movs	r2, #1
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	409a      	lsls	r2, r3
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d10d      	bne.n	8001504 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80014f2:	68f9      	ldr	r1, [r7, #12]
 80014f4:	6809      	ldr	r1, [r1, #0]
 80014f6:	431a      	orrs	r2, r3
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3318      	adds	r3, #24
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	440b      	add	r3, r1
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	e00f      	b.n	8001524 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800150e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001514:	68f9      	ldr	r1, [r7, #12]
 8001516:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001518:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	3318      	adds	r3, #24
 800151e:	011b      	lsls	r3, r3, #4
 8001520:	440b      	add	r3, r1
 8001522:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	6819      	ldr	r1, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	691a      	ldr	r2, [r3, #16]
 800152c:	697b      	ldr	r3, [r7, #20]
 800152e:	3318      	adds	r3, #24
 8001530:	011b      	lsls	r3, r3, #4
 8001532:	440b      	add	r3, r1
 8001534:	3304      	adds	r3, #4
 8001536:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	7d1b      	ldrb	r3, [r3, #20]
 800153c:	2b01      	cmp	r3, #1
 800153e:	d111      	bne.n	8001564 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	3318      	adds	r3, #24
 8001548:	011b      	lsls	r3, r3, #4
 800154a:	4413      	add	r3, r2
 800154c:	3304      	adds	r3, #4
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	6811      	ldr	r1, [r2, #0]
 8001554:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3318      	adds	r3, #24
 800155c:	011b      	lsls	r3, r3, #4
 800155e:	440b      	add	r3, r1
 8001560:	3304      	adds	r3, #4
 8001562:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3307      	adds	r3, #7
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	061a      	lsls	r2, r3, #24
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	3306      	adds	r3, #6
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	041b      	lsls	r3, r3, #16
 8001574:	431a      	orrs	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	3305      	adds	r3, #5
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	4313      	orrs	r3, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	3204      	adds	r2, #4
 8001584:	7812      	ldrb	r2, [r2, #0]
 8001586:	4610      	mov	r0, r2
 8001588:	68fa      	ldr	r2, [r7, #12]
 800158a:	6811      	ldr	r1, [r2, #0]
 800158c:	ea43 0200 	orr.w	r2, r3, r0
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	011b      	lsls	r3, r3, #4
 8001594:	440b      	add	r3, r1
 8001596:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800159a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3303      	adds	r3, #3
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	061a      	lsls	r2, r3, #24
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3302      	adds	r3, #2
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	041b      	lsls	r3, r3, #16
 80015ac:	431a      	orrs	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	3301      	adds	r3, #1
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	4313      	orrs	r3, r2
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	7812      	ldrb	r2, [r2, #0]
 80015bc:	4610      	mov	r0, r2
 80015be:	68fa      	ldr	r2, [r7, #12]
 80015c0:	6811      	ldr	r1, [r2, #0]
 80015c2:	ea43 0200 	orr.w	r2, r3, r0
 80015c6:	697b      	ldr	r3, [r7, #20]
 80015c8:	011b      	lsls	r3, r3, #4
 80015ca:	440b      	add	r3, r1
 80015cc:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80015d0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	3318      	adds	r3, #24
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	4413      	add	r3, r2
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	6811      	ldr	r1, [r2, #0]
 80015e4:	f043 0201 	orr.w	r2, r3, #1
 80015e8:	697b      	ldr	r3, [r7, #20]
 80015ea:	3318      	adds	r3, #24
 80015ec:	011b      	lsls	r3, r3, #4
 80015ee:	440b      	add	r3, r1
 80015f0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e00e      	b.n	8001614 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e006      	b.n	8001614 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800160a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001612:	2301      	movs	r3, #1
  }
}
 8001614:	4618      	mov	r0, r3
 8001616:	3724      	adds	r7, #36	@ 0x24
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001626:	2300      	movs	r3, #0
 8001628:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001630:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001632:	7afb      	ldrb	r3, [r7, #11]
 8001634:	2b01      	cmp	r3, #1
 8001636:	d002      	beq.n	800163e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001638:	7afb      	ldrb	r3, [r7, #11]
 800163a:	2b02      	cmp	r3, #2
 800163c:	d11d      	bne.n	800167a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d002      	beq.n	8001652 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	3301      	adds	r3, #1
 8001650:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d002      	beq.n	8001666 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3301      	adds	r3, #1
 8001664:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d002      	beq.n	800167a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	3301      	adds	r3, #1
 8001678:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800167a:	68fb      	ldr	r3, [r7, #12]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001686:	b480      	push	{r7}
 8001688:	b087      	sub	sp, #28
 800168a:	af00      	add	r7, sp, #0
 800168c:	60f8      	str	r0, [r7, #12]
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f893 3020 	ldrb.w	r3, [r3, #32]
 800169a:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d003      	beq.n	80016aa <HAL_CAN_GetRxMessage+0x24>
 80016a2:	7dfb      	ldrb	r3, [r7, #23]
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	f040 8103 	bne.w	80018b0 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d10e      	bne.n	80016ce <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d116      	bne.n	80016ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e0f7      	b.n	80018be <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	691b      	ldr	r3, [r3, #16]
 80016d4:	f003 0303 	and.w	r3, r3, #3
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d107      	bne.n	80016ec <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016e0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e0e8      	b.n	80018be <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	331b      	adds	r3, #27
 80016f4:	011b      	lsls	r3, r3, #4
 80016f6:	4413      	add	r3, r2
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0204 	and.w	r2, r3, #4
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d10c      	bne.n	8001724 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	331b      	adds	r3, #27
 8001712:	011b      	lsls	r3, r3, #4
 8001714:	4413      	add	r3, r2
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	0d5b      	lsrs	r3, r3, #21
 800171a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e00b      	b.n	800173c <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	331b      	adds	r3, #27
 800172c:	011b      	lsls	r3, r3, #4
 800172e:	4413      	add	r3, r2
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	08db      	lsrs	r3, r3, #3
 8001734:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	331b      	adds	r3, #27
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	4413      	add	r3, r2
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0202 	and.w	r2, r3, #2
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	68bb      	ldr	r3, [r7, #8]
 8001758:	331b      	adds	r3, #27
 800175a:	011b      	lsls	r3, r3, #4
 800175c:	4413      	add	r3, r2
 800175e:	3304      	adds	r3, #4
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2208      	movs	r2, #8
 800176e:	611a      	str	r2, [r3, #16]
 8001770:	e00b      	b.n	800178a <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681a      	ldr	r2, [r3, #0]
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	331b      	adds	r3, #27
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	4413      	add	r3, r2
 800177e:	3304      	adds	r3, #4
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 020f 	and.w	r2, r3, #15
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	68bb      	ldr	r3, [r7, #8]
 8001790:	331b      	adds	r3, #27
 8001792:	011b      	lsls	r3, r3, #4
 8001794:	4413      	add	r3, r2
 8001796:	3304      	adds	r3, #4
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	b2da      	uxtb	r2, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	331b      	adds	r3, #27
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	3304      	adds	r3, #4
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	0c1b      	lsrs	r3, r3, #16
 80017b4:	b29a      	uxth	r2, r3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	011b      	lsls	r3, r3, #4
 80017c2:	4413      	add	r3, r2
 80017c4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	b2da      	uxtb	r2, r3
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681a      	ldr	r2, [r3, #0]
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	4413      	add	r3, r2
 80017da:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0a1a      	lsrs	r2, r3, #8
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	3301      	adds	r3, #1
 80017e6:	b2d2      	uxtb	r2, r2
 80017e8:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	011b      	lsls	r3, r3, #4
 80017f2:	4413      	add	r3, r2
 80017f4:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	0c1a      	lsrs	r2, r3, #16
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	3302      	adds	r3, #2
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	011b      	lsls	r3, r3, #4
 800180c:	4413      	add	r3, r2
 800180e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	0e1a      	lsrs	r2, r3, #24
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	3303      	adds	r3, #3
 800181a:	b2d2      	uxtb	r2, r2
 800181c:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	3304      	adds	r3, #4
 8001832:	b2d2      	uxtb	r2, r2
 8001834:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	011b      	lsls	r3, r3, #4
 800183e:	4413      	add	r3, r2
 8001840:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	0a1a      	lsrs	r2, r3, #8
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	3305      	adds	r3, #5
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	011b      	lsls	r3, r3, #4
 8001858:	4413      	add	r3, r2
 800185a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	0c1a      	lsrs	r2, r3, #16
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	3306      	adds	r3, #6
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	011b      	lsls	r3, r3, #4
 8001872:	4413      	add	r3, r2
 8001874:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	0e1a      	lsrs	r2, r3, #24
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	3307      	adds	r3, #7
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d108      	bne.n	800189c <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68da      	ldr	r2, [r3, #12]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f042 0220 	orr.w	r2, r2, #32
 8001898:	60da      	str	r2, [r3, #12]
 800189a:	e007      	b.n	80018ac <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	691a      	ldr	r2, [r3, #16]
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f042 0220 	orr.w	r2, r2, #32
 80018aa:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	e006      	b.n	80018be <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018b4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
  }
}
 80018be:	4618      	mov	r0, r3
 80018c0:	371c      	adds	r7, #28
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bc80      	pop	{r7}
 80018c6:	4770      	bx	lr

080018c8 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
 80018d0:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d8:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d002      	beq.n	80018e6 <HAL_CAN_ActivateNotification+0x1e>
 80018e0:	7bfb      	ldrb	r3, [r7, #15]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d109      	bne.n	80018fa <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6959      	ldr	r1, [r3, #20]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	430a      	orrs	r2, r1
 80018f4:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	e006      	b.n	8001908 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018fe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
  }
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr

08001912 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b08a      	sub	sp, #40	@ 0x28
 8001916:	af00      	add	r7, sp, #0
 8001918:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800191a:	2300      	movs	r3, #0
 800191c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	695b      	ldr	r3, [r3, #20]
 8001924:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	68db      	ldr	r3, [r3, #12]
 800193c:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	691b      	ldr	r3, [r3, #16]
 8001944:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800194e:	6a3b      	ldr	r3, [r7, #32]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d07c      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001958:	69bb      	ldr	r3, [r7, #24]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d023      	beq.n	80019aa <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	2201      	movs	r2, #1
 8001968:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f983 	bl	8001c80 <HAL_CAN_TxMailbox0CompleteCallback>
 800197a:	e016      	b.n	80019aa <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800197c:	69bb      	ldr	r3, [r7, #24]
 800197e:	f003 0304 	and.w	r3, r3, #4
 8001982:	2b00      	cmp	r3, #0
 8001984:	d004      	beq.n	8001990 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001988:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800198c:	627b      	str	r3, [r7, #36]	@ 0x24
 800198e:	e00c      	b.n	80019aa <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	f003 0308 	and.w	r3, r3, #8
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800199a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800199c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019a2:	e002      	b.n	80019aa <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f000 f986 	bl	8001cb6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d024      	beq.n	80019fe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80019bc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d003      	beq.n	80019d0 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 f962 	bl	8001c92 <HAL_CAN_TxMailbox1CompleteCallback>
 80019ce:	e016      	b.n	80019fe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d004      	beq.n	80019e4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80019da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80019e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80019e2:	e00c      	b.n	80019fe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d004      	beq.n	80019f8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80019ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80019f6:	e002      	b.n	80019fe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80019f8:	6878      	ldr	r0, [r7, #4]
 80019fa:	f000 f965 	bl	8001cc8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d024      	beq.n	8001a52 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001a10:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a12:	69bb      	ldr	r3, [r7, #24]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a1c:	6878      	ldr	r0, [r7, #4]
 8001a1e:	f000 f941 	bl	8001ca4 <HAL_CAN_TxMailbox2CompleteCallback>
 8001a22:	e016      	b.n	8001a52 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d004      	beq.n	8001a38 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a30:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001a34:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a36:	e00c      	b.n	8001a52 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d004      	beq.n	8001a4c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a4a:	e002      	b.n	8001a52 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 f944 	bl	8001cda <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001a52:	6a3b      	ldr	r3, [r7, #32]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d00c      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d007      	beq.n	8001a76 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001a6c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	2210      	movs	r2, #16
 8001a74:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001a76:	6a3b      	ldr	r3, [r7, #32]
 8001a78:	f003 0304 	and.w	r3, r3, #4
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00b      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 0308 	and.w	r3, r3, #8
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d006      	beq.n	8001a98 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2208      	movs	r2, #8
 8001a90:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f000 f92a 	bl	8001cec <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001a98:	6a3b      	ldr	r3, [r7, #32]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d009      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f7fe fb6f 	bl	8000194 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001ab6:	6a3b      	ldr	r3, [r7, #32]
 8001ab8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00c      	beq.n	8001ada <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001ac0:	693b      	ldr	r3, [r7, #16]
 8001ac2:	f003 0310 	and.w	r3, r3, #16
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d007      	beq.n	8001ada <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ad0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	2210      	movs	r2, #16
 8001ad8:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001ada:	6a3b      	ldr	r3, [r7, #32]
 8001adc:	f003 0320 	and.w	r3, r3, #32
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00b      	beq.n	8001afc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	f003 0308 	and.w	r3, r3, #8
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d006      	beq.n	8001afc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2208      	movs	r2, #8
 8001af4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 f90a 	bl	8001d10 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001afc:	6a3b      	ldr	r3, [r7, #32]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d009      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	f003 0303 	and.w	r3, r3, #3
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d002      	beq.n	8001b1a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f8f2 	bl	8001cfe <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b1a:	6a3b      	ldr	r3, [r7, #32]
 8001b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00b      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	f003 0310 	and.w	r3, r3, #16
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d006      	beq.n	8001b3c <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2210      	movs	r2, #16
 8001b34:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f000 f8f3 	bl	8001d22 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00b      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0308 	and.w	r3, r3, #8
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d006      	beq.n	8001b5e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2208      	movs	r2, #8
 8001b56:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f8eb 	bl	8001d34 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001b5e:	6a3b      	ldr	r3, [r7, #32]
 8001b60:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d07b      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	f003 0304 	and.w	r3, r3, #4
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d072      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b72:	6a3b      	ldr	r3, [r7, #32]
 8001b74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d008      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d008      	beq.n	8001baa <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba4:	f043 0302 	orr.w	r3, r3, #2
 8001ba8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001baa:	6a3b      	ldr	r3, [r7, #32]
 8001bac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d003      	beq.n	8001bc6 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d043      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d03e      	beq.n	8001c58 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001be0:	2b60      	cmp	r3, #96	@ 0x60
 8001be2:	d02b      	beq.n	8001c3c <HAL_CAN_IRQHandler+0x32a>
 8001be4:	2b60      	cmp	r3, #96	@ 0x60
 8001be6:	d82e      	bhi.n	8001c46 <HAL_CAN_IRQHandler+0x334>
 8001be8:	2b50      	cmp	r3, #80	@ 0x50
 8001bea:	d022      	beq.n	8001c32 <HAL_CAN_IRQHandler+0x320>
 8001bec:	2b50      	cmp	r3, #80	@ 0x50
 8001bee:	d82a      	bhi.n	8001c46 <HAL_CAN_IRQHandler+0x334>
 8001bf0:	2b40      	cmp	r3, #64	@ 0x40
 8001bf2:	d019      	beq.n	8001c28 <HAL_CAN_IRQHandler+0x316>
 8001bf4:	2b40      	cmp	r3, #64	@ 0x40
 8001bf6:	d826      	bhi.n	8001c46 <HAL_CAN_IRQHandler+0x334>
 8001bf8:	2b30      	cmp	r3, #48	@ 0x30
 8001bfa:	d010      	beq.n	8001c1e <HAL_CAN_IRQHandler+0x30c>
 8001bfc:	2b30      	cmp	r3, #48	@ 0x30
 8001bfe:	d822      	bhi.n	8001c46 <HAL_CAN_IRQHandler+0x334>
 8001c00:	2b10      	cmp	r3, #16
 8001c02:	d002      	beq.n	8001c0a <HAL_CAN_IRQHandler+0x2f8>
 8001c04:	2b20      	cmp	r3, #32
 8001c06:	d005      	beq.n	8001c14 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c08:	e01d      	b.n	8001c46 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c0c:	f043 0308 	orr.w	r3, r3, #8
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c12:	e019      	b.n	8001c48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	f043 0310 	orr.w	r3, r3, #16
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c1c:	e014      	b.n	8001c48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c20:	f043 0320 	orr.w	r3, r3, #32
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c26:	e00f      	b.n	8001c48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c30:	e00a      	b.n	8001c48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c3a:	e005      	b.n	8001c48 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001c44:	e000      	b.n	8001c48 <HAL_CAN_IRQHandler+0x336>
            break;
 8001c46:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	699a      	ldr	r2, [r3, #24]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001c56:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d008      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6c:	431a      	orrs	r2, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7fe fb00 	bl	8000278 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3728      	adds	r7, #40	@ 0x28
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr

08001cda <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ce2:	bf00      	nop
 8001ce4:	370c      	adds	r7, #12
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bc80      	pop	{r7}
 8001cea:	4770      	bx	lr

08001cec <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001d18:	bf00      	nop
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc80      	pop	{r7}
 8001d20:	4770      	bx	lr

08001d22 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001d2a:	bf00      	nop
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bc80      	pop	{r7}
 8001d32:	4770      	bx	lr

08001d34 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bc80      	pop	{r7}
 8001d44:	4770      	bx	lr
	...

08001d48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5e:	68ba      	ldr	r2, [r7, #8]
 8001d60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d64:	4013      	ands	r3, r2
 8001d66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d7a:	4a04      	ldr	r2, [pc, #16]	@ (8001d8c <__NVIC_SetPriorityGrouping+0x44>)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	60d3      	str	r3, [r2, #12]
}
 8001d80:	bf00      	nop
 8001d82:	3714      	adds	r7, #20
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bc80      	pop	{r7}
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	e000ed00 	.word	0xe000ed00

08001d90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d94:	4b04      	ldr	r3, [pc, #16]	@ (8001da8 <__NVIC_GetPriorityGrouping+0x18>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	f003 0307 	and.w	r3, r3, #7
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	4603      	mov	r3, r0
 8001db4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	db0b      	blt.n	8001dd6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	f003 021f 	and.w	r2, r3, #31
 8001dc4:	4906      	ldr	r1, [pc, #24]	@ (8001de0 <__NVIC_EnableIRQ+0x34>)
 8001dc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dca:	095b      	lsrs	r3, r3, #5
 8001dcc:	2001      	movs	r0, #1
 8001dce:	fa00 f202 	lsl.w	r2, r0, r2
 8001dd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db0a      	blt.n	8001e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	490c      	ldr	r1, [pc, #48]	@ (8001e30 <__NVIC_SetPriority+0x4c>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e0c:	e00a      	b.n	8001e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4908      	ldr	r1, [pc, #32]	@ (8001e34 <__NVIC_SetPriority+0x50>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	761a      	strb	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f1c3 0307 	rsb	r3, r3, #7
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	bf28      	it	cs
 8001e56:	2304      	movcs	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d902      	bls.n	8001e68 <NVIC_EncodePriority+0x30>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3b03      	subs	r3, #3
 8001e66:	e000      	b.n	8001e6a <NVIC_EncodePriority+0x32>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43d9      	mvns	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	4313      	orrs	r3, r2
         );
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	@ 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr

08001e9c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001ea0:	f3bf 8f4f 	dsb	sy
}
 8001ea4:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8001ea6:	4b06      	ldr	r3, [pc, #24]	@ (8001ec0 <__NVIC_SystemReset+0x24>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001eae:	4904      	ldr	r1, [pc, #16]	@ (8001ec0 <__NVIC_SystemReset+0x24>)
 8001eb0:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <__NVIC_SystemReset+0x28>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8001eb6:	f3bf 8f4f 	dsb	sy
}
 8001eba:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8001ebc:	bf00      	nop
 8001ebe:	e7fd      	b.n	8001ebc <__NVIC_SystemReset+0x20>
 8001ec0:	e000ed00 	.word	0xe000ed00
 8001ec4:	05fa0004 	.word	0x05fa0004

08001ec8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001ed8:	d301      	bcc.n	8001ede <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eda:	2301      	movs	r3, #1
 8001edc:	e00f      	b.n	8001efe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ede:	4a0a      	ldr	r2, [pc, #40]	@ (8001f08 <SysTick_Config+0x40>)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	3b01      	subs	r3, #1
 8001ee4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ee6:	210f      	movs	r1, #15
 8001ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8001eec:	f7ff ff7a 	bl	8001de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ef0:	4b05      	ldr	r3, [pc, #20]	@ (8001f08 <SysTick_Config+0x40>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ef6:	4b04      	ldr	r3, [pc, #16]	@ (8001f08 <SysTick_Config+0x40>)
 8001ef8:	2207      	movs	r2, #7
 8001efa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3708      	adds	r7, #8
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	e000e010 	.word	0xe000e010

08001f0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff ff17 	bl	8001d48 <__NVIC_SetPriorityGrouping>
}
 8001f1a:	bf00      	nop
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b086      	sub	sp, #24
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	4603      	mov	r3, r0
 8001f2a:	60b9      	str	r1, [r7, #8]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f34:	f7ff ff2c 	bl	8001d90 <__NVIC_GetPriorityGrouping>
 8001f38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	68b9      	ldr	r1, [r7, #8]
 8001f3e:	6978      	ldr	r0, [r7, #20]
 8001f40:	f7ff ff7a 	bl	8001e38 <NVIC_EncodePriority>
 8001f44:	4602      	mov	r2, r0
 8001f46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7ff ff49 	bl	8001de4 <__NVIC_SetPriority>
}
 8001f52:	bf00      	nop
 8001f54:	3718      	adds	r7, #24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}

08001f5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b082      	sub	sp, #8
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	4603      	mov	r3, r0
 8001f62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff1f 	bl	8001dac <__NVIC_EnableIRQ>
}
 8001f6e:	bf00      	nop
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001f7a:	f7ff ff8f 	bl	8001e9c <__NVIC_SystemReset>

08001f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b082      	sub	sp, #8
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ff9e 	bl	8001ec8 <SysTick_Config>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b08b      	sub	sp, #44	@ 0x2c
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001faa:	e169      	b.n	8002280 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001fac:	2201      	movs	r2, #1
 8001fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	69fa      	ldr	r2, [r7, #28]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001fc0:	69ba      	ldr	r2, [r7, #24]
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	f040 8158 	bne.w	800227a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	4a9a      	ldr	r2, [pc, #616]	@ (8002238 <HAL_GPIO_Init+0x2a0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d05e      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
 8001fd4:	4a98      	ldr	r2, [pc, #608]	@ (8002238 <HAL_GPIO_Init+0x2a0>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d875      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 8001fda:	4a98      	ldr	r2, [pc, #608]	@ (800223c <HAL_GPIO_Init+0x2a4>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d058      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
 8001fe0:	4a96      	ldr	r2, [pc, #600]	@ (800223c <HAL_GPIO_Init+0x2a4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d86f      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 8001fe6:	4a96      	ldr	r2, [pc, #600]	@ (8002240 <HAL_GPIO_Init+0x2a8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d052      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
 8001fec:	4a94      	ldr	r2, [pc, #592]	@ (8002240 <HAL_GPIO_Init+0x2a8>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d869      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 8001ff2:	4a94      	ldr	r2, [pc, #592]	@ (8002244 <HAL_GPIO_Init+0x2ac>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d04c      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
 8001ff8:	4a92      	ldr	r2, [pc, #584]	@ (8002244 <HAL_GPIO_Init+0x2ac>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d863      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 8001ffe:	4a92      	ldr	r2, [pc, #584]	@ (8002248 <HAL_GPIO_Init+0x2b0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d046      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
 8002004:	4a90      	ldr	r2, [pc, #576]	@ (8002248 <HAL_GPIO_Init+0x2b0>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d85d      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 800200a:	2b12      	cmp	r3, #18
 800200c:	d82a      	bhi.n	8002064 <HAL_GPIO_Init+0xcc>
 800200e:	2b12      	cmp	r3, #18
 8002010:	d859      	bhi.n	80020c6 <HAL_GPIO_Init+0x12e>
 8002012:	a201      	add	r2, pc, #4	@ (adr r2, 8002018 <HAL_GPIO_Init+0x80>)
 8002014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002018:	08002093 	.word	0x08002093
 800201c:	0800206d 	.word	0x0800206d
 8002020:	0800207f 	.word	0x0800207f
 8002024:	080020c1 	.word	0x080020c1
 8002028:	080020c7 	.word	0x080020c7
 800202c:	080020c7 	.word	0x080020c7
 8002030:	080020c7 	.word	0x080020c7
 8002034:	080020c7 	.word	0x080020c7
 8002038:	080020c7 	.word	0x080020c7
 800203c:	080020c7 	.word	0x080020c7
 8002040:	080020c7 	.word	0x080020c7
 8002044:	080020c7 	.word	0x080020c7
 8002048:	080020c7 	.word	0x080020c7
 800204c:	080020c7 	.word	0x080020c7
 8002050:	080020c7 	.word	0x080020c7
 8002054:	080020c7 	.word	0x080020c7
 8002058:	080020c7 	.word	0x080020c7
 800205c:	08002075 	.word	0x08002075
 8002060:	08002089 	.word	0x08002089
 8002064:	4a79      	ldr	r2, [pc, #484]	@ (800224c <HAL_GPIO_Init+0x2b4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d013      	beq.n	8002092 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800206a:	e02c      	b.n	80020c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	623b      	str	r3, [r7, #32]
          break;
 8002072:	e029      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	3304      	adds	r3, #4
 800207a:	623b      	str	r3, [r7, #32]
          break;
 800207c:	e024      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	3308      	adds	r3, #8
 8002084:	623b      	str	r3, [r7, #32]
          break;
 8002086:	e01f      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	330c      	adds	r3, #12
 800208e:	623b      	str	r3, [r7, #32]
          break;
 8002090:	e01a      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d102      	bne.n	80020a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800209a:	2304      	movs	r3, #4
 800209c:	623b      	str	r3, [r7, #32]
          break;
 800209e:	e013      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d105      	bne.n	80020b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020a8:	2308      	movs	r3, #8
 80020aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	69fa      	ldr	r2, [r7, #28]
 80020b0:	611a      	str	r2, [r3, #16]
          break;
 80020b2:	e009      	b.n	80020c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80020b4:	2308      	movs	r3, #8
 80020b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	615a      	str	r2, [r3, #20]
          break;
 80020be:	e003      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80020c0:	2300      	movs	r3, #0
 80020c2:	623b      	str	r3, [r7, #32]
          break;
 80020c4:	e000      	b.n	80020c8 <HAL_GPIO_Init+0x130>
          break;
 80020c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	2bff      	cmp	r3, #255	@ 0xff
 80020cc:	d801      	bhi.n	80020d2 <HAL_GPIO_Init+0x13a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	e001      	b.n	80020d6 <HAL_GPIO_Init+0x13e>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3304      	adds	r3, #4
 80020d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	2bff      	cmp	r3, #255	@ 0xff
 80020dc:	d802      	bhi.n	80020e4 <HAL_GPIO_Init+0x14c>
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	e002      	b.n	80020ea <HAL_GPIO_Init+0x152>
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	3b08      	subs	r3, #8
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	210f      	movs	r1, #15
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	fa01 f303 	lsl.w	r3, r1, r3
 80020f8:	43db      	mvns	r3, r3
 80020fa:	401a      	ands	r2, r3
 80020fc:	6a39      	ldr	r1, [r7, #32]
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	431a      	orrs	r2, r3
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80b1 	beq.w	800227a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002118:	4b4d      	ldr	r3, [pc, #308]	@ (8002250 <HAL_GPIO_Init+0x2b8>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	4a4c      	ldr	r2, [pc, #304]	@ (8002250 <HAL_GPIO_Init+0x2b8>)
 800211e:	f043 0301 	orr.w	r3, r3, #1
 8002122:	6193      	str	r3, [r2, #24]
 8002124:	4b4a      	ldr	r3, [pc, #296]	@ (8002250 <HAL_GPIO_Init+0x2b8>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	60bb      	str	r3, [r7, #8]
 800212e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002130:	4a48      	ldr	r2, [pc, #288]	@ (8002254 <HAL_GPIO_Init+0x2bc>)
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	089b      	lsrs	r3, r3, #2
 8002136:	3302      	adds	r3, #2
 8002138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800213c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800213e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002140:	f003 0303 	and.w	r3, r3, #3
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	220f      	movs	r2, #15
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	4013      	ands	r3, r2
 8002152:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a40      	ldr	r2, [pc, #256]	@ (8002258 <HAL_GPIO_Init+0x2c0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d013      	beq.n	8002184 <HAL_GPIO_Init+0x1ec>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4a3f      	ldr	r2, [pc, #252]	@ (800225c <HAL_GPIO_Init+0x2c4>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d00d      	beq.n	8002180 <HAL_GPIO_Init+0x1e8>
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a3e      	ldr	r2, [pc, #248]	@ (8002260 <HAL_GPIO_Init+0x2c8>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d007      	beq.n	800217c <HAL_GPIO_Init+0x1e4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	4a3d      	ldr	r2, [pc, #244]	@ (8002264 <HAL_GPIO_Init+0x2cc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d101      	bne.n	8002178 <HAL_GPIO_Init+0x1e0>
 8002174:	2303      	movs	r3, #3
 8002176:	e006      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 8002178:	2304      	movs	r3, #4
 800217a:	e004      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 800217c:	2302      	movs	r3, #2
 800217e:	e002      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 8002180:	2301      	movs	r3, #1
 8002182:	e000      	b.n	8002186 <HAL_GPIO_Init+0x1ee>
 8002184:	2300      	movs	r3, #0
 8002186:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002188:	f002 0203 	and.w	r2, r2, #3
 800218c:	0092      	lsls	r2, r2, #2
 800218e:	4093      	lsls	r3, r2
 8002190:	68fa      	ldr	r2, [r7, #12]
 8002192:	4313      	orrs	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002196:	492f      	ldr	r1, [pc, #188]	@ (8002254 <HAL_GPIO_Init+0x2bc>)
 8002198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	3302      	adds	r3, #2
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d006      	beq.n	80021be <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80021b0:	4b2d      	ldr	r3, [pc, #180]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021b2:	689a      	ldr	r2, [r3, #8]
 80021b4:	492c      	ldr	r1, [pc, #176]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	608b      	str	r3, [r1, #8]
 80021bc:	e006      	b.n	80021cc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021be:	4b2a      	ldr	r3, [pc, #168]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021c0:	689a      	ldr	r2, [r3, #8]
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	4928      	ldr	r1, [pc, #160]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021c8:	4013      	ands	r3, r2
 80021ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d006      	beq.n	80021e6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021d8:	4b23      	ldr	r3, [pc, #140]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021da:	68da      	ldr	r2, [r3, #12]
 80021dc:	4922      	ldr	r1, [pc, #136]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60cb      	str	r3, [r1, #12]
 80021e4:	e006      	b.n	80021f4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021e6:	4b20      	ldr	r3, [pc, #128]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	491e      	ldr	r1, [pc, #120]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d006      	beq.n	800220e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002200:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	4918      	ldr	r1, [pc, #96]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800220e:	4b16      	ldr	r3, [pc, #88]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	69bb      	ldr	r3, [r7, #24]
 8002214:	43db      	mvns	r3, r3
 8002216:	4914      	ldr	r1, [pc, #80]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 8002218:	4013      	ands	r3, r2
 800221a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d021      	beq.n	800226c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002228:	4b0f      	ldr	r3, [pc, #60]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	490e      	ldr	r1, [pc, #56]	@ (8002268 <HAL_GPIO_Init+0x2d0>)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
 8002234:	e021      	b.n	800227a <HAL_GPIO_Init+0x2e2>
 8002236:	bf00      	nop
 8002238:	10320000 	.word	0x10320000
 800223c:	10310000 	.word	0x10310000
 8002240:	10220000 	.word	0x10220000
 8002244:	10210000 	.word	0x10210000
 8002248:	10120000 	.word	0x10120000
 800224c:	10110000 	.word	0x10110000
 8002250:	40021000 	.word	0x40021000
 8002254:	40010000 	.word	0x40010000
 8002258:	40010800 	.word	0x40010800
 800225c:	40010c00 	.word	0x40010c00
 8002260:	40011000 	.word	0x40011000
 8002264:	40011400 	.word	0x40011400
 8002268:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800226c:	4b0b      	ldr	r3, [pc, #44]	@ (800229c <HAL_GPIO_Init+0x304>)
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	43db      	mvns	r3, r3
 8002274:	4909      	ldr	r1, [pc, #36]	@ (800229c <HAL_GPIO_Init+0x304>)
 8002276:	4013      	ands	r3, r2
 8002278:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	3301      	adds	r3, #1
 800227e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002286:	fa22 f303 	lsr.w	r3, r2, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	f47f ae8e 	bne.w	8001fac <HAL_GPIO_Init+0x14>
  }
}
 8002290:	bf00      	nop
 8002292:	bf00      	nop
 8002294:	372c      	adds	r7, #44	@ 0x2c
 8002296:	46bd      	mov	sp, r7
 8002298:	bc80      	pop	{r7}
 800229a:	4770      	bx	lr
 800229c:	40010400 	.word	0x40010400

080022a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	460b      	mov	r3, r1
 80022aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	887b      	ldrh	r3, [r7, #2]
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d002      	beq.n	80022be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80022b8:	2301      	movs	r3, #1
 80022ba:	73fb      	strb	r3, [r7, #15]
 80022bc:	e001      	b.n	80022c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80022be:	2300      	movs	r3, #0
 80022c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80022c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3714      	adds	r7, #20
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	460b      	mov	r3, r1
 80022d8:	807b      	strh	r3, [r7, #2]
 80022da:	4613      	mov	r3, r2
 80022dc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022de:	787b      	ldrb	r3, [r7, #1]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d003      	beq.n	80022ec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022e4:	887a      	ldrh	r2, [r7, #2]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022ea:	e003      	b.n	80022f4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022ec:	887b      	ldrh	r3, [r7, #2]
 80022ee:	041a      	lsls	r2, r3, #16
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	611a      	str	r2, [r3, #16]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bc80      	pop	{r7}
 80022fc:	4770      	bx	lr

080022fe <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80022fe:	b480      	push	{r7}
 8002300:	b085      	sub	sp, #20
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
 8002306:	460b      	mov	r3, r1
 8002308:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002310:	887a      	ldrh	r2, [r7, #2]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	4013      	ands	r3, r2
 8002316:	041a      	lsls	r2, r3, #16
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	43d9      	mvns	r1, r3
 800231c:	887b      	ldrh	r3, [r7, #2]
 800231e:	400b      	ands	r3, r1
 8002320:	431a      	orrs	r2, r3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	611a      	str	r2, [r3, #16]
}
 8002326:	bf00      	nop
 8002328:	3714      	adds	r7, #20
 800232a:	46bd      	mov	sp, r7
 800232c:	bc80      	pop	{r7}
 800232e:	4770      	bx	lr

08002330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b086      	sub	sp, #24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e272      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	f000 8087 	beq.w	800245e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002350:	4b92      	ldr	r3, [pc, #584]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 030c 	and.w	r3, r3, #12
 8002358:	2b04      	cmp	r3, #4
 800235a:	d00c      	beq.n	8002376 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800235c:	4b8f      	ldr	r3, [pc, #572]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b08      	cmp	r3, #8
 8002366:	d112      	bne.n	800238e <HAL_RCC_OscConfig+0x5e>
 8002368:	4b8c      	ldr	r3, [pc, #560]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002374:	d10b      	bne.n	800238e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002376:	4b89      	ldr	r3, [pc, #548]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d06c      	beq.n	800245c <HAL_RCC_OscConfig+0x12c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d168      	bne.n	800245c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e24c      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002396:	d106      	bne.n	80023a6 <HAL_RCC_OscConfig+0x76>
 8002398:	4b80      	ldr	r3, [pc, #512]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a7f      	ldr	r2, [pc, #508]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 800239e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023a2:	6013      	str	r3, [r2, #0]
 80023a4:	e02e      	b.n	8002404 <HAL_RCC_OscConfig+0xd4>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d10c      	bne.n	80023c8 <HAL_RCC_OscConfig+0x98>
 80023ae:	4b7b      	ldr	r3, [pc, #492]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7a      	ldr	r2, [pc, #488]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	4b78      	ldr	r3, [pc, #480]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a77      	ldr	r2, [pc, #476]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	e01d      	b.n	8002404 <HAL_RCC_OscConfig+0xd4>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80023d0:	d10c      	bne.n	80023ec <HAL_RCC_OscConfig+0xbc>
 80023d2:	4b72      	ldr	r3, [pc, #456]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a71      	ldr	r2, [pc, #452]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023dc:	6013      	str	r3, [r2, #0]
 80023de:	4b6f      	ldr	r3, [pc, #444]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	4a6e      	ldr	r2, [pc, #440]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e8:	6013      	str	r3, [r2, #0]
 80023ea:	e00b      	b.n	8002404 <HAL_RCC_OscConfig+0xd4>
 80023ec:	4b6b      	ldr	r3, [pc, #428]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a6a      	ldr	r2, [pc, #424]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f6:	6013      	str	r3, [r2, #0]
 80023f8:	4b68      	ldr	r3, [pc, #416]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a67      	ldr	r2, [pc, #412]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80023fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002402:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d013      	beq.n	8002434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800240c:	f7fe fe02 	bl	8001014 <HAL_GetTick>
 8002410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002412:	e008      	b.n	8002426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002414:	f7fe fdfe 	bl	8001014 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b64      	cmp	r3, #100	@ 0x64
 8002420:	d901      	bls.n	8002426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e200      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002426:	4b5d      	ldr	r3, [pc, #372]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d0f0      	beq.n	8002414 <HAL_RCC_OscConfig+0xe4>
 8002432:	e014      	b.n	800245e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002434:	f7fe fdee 	bl	8001014 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243a:	e008      	b.n	800244e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800243c:	f7fe fdea 	bl	8001014 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	2b64      	cmp	r3, #100	@ 0x64
 8002448:	d901      	bls.n	800244e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e1ec      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800244e:	4b53      	ldr	r3, [pc, #332]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d1f0      	bne.n	800243c <HAL_RCC_OscConfig+0x10c>
 800245a:	e000      	b.n	800245e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800245c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d063      	beq.n	8002532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800246a:	4b4c      	ldr	r3, [pc, #304]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f003 030c 	and.w	r3, r3, #12
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00b      	beq.n	800248e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002476:	4b49      	ldr	r3, [pc, #292]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f003 030c 	and.w	r3, r3, #12
 800247e:	2b08      	cmp	r3, #8
 8002480:	d11c      	bne.n	80024bc <HAL_RCC_OscConfig+0x18c>
 8002482:	4b46      	ldr	r3, [pc, #280]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d116      	bne.n	80024bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800248e:	4b43      	ldr	r3, [pc, #268]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d005      	beq.n	80024a6 <HAL_RCC_OscConfig+0x176>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d001      	beq.n	80024a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e1c0      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024a6:	4b3d      	ldr	r3, [pc, #244]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4939      	ldr	r1, [pc, #228]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ba:	e03a      	b.n	8002532 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d020      	beq.n	8002506 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c4:	4b36      	ldr	r3, [pc, #216]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 80024c6:	2201      	movs	r2, #1
 80024c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ca:	f7fe fda3 	bl	8001014 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d2:	f7fe fd9f 	bl	8001014 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e1a1      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e4:	4b2d      	ldr	r3, [pc, #180]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f0:	4b2a      	ldr	r3, [pc, #168]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	695b      	ldr	r3, [r3, #20]
 80024fc:	00db      	lsls	r3, r3, #3
 80024fe:	4927      	ldr	r1, [pc, #156]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
 8002504:	e015      	b.n	8002532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002506:	4b26      	ldr	r3, [pc, #152]	@ (80025a0 <HAL_RCC_OscConfig+0x270>)
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250c:	f7fe fd82 	bl	8001014 <HAL_GetTick>
 8002510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002512:	e008      	b.n	8002526 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002514:	f7fe fd7e 	bl	8001014 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e180      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002526:	4b1d      	ldr	r3, [pc, #116]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1f0      	bne.n	8002514 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0308 	and.w	r3, r3, #8
 800253a:	2b00      	cmp	r3, #0
 800253c:	d03a      	beq.n	80025b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d019      	beq.n	800257a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002546:	4b17      	ldr	r3, [pc, #92]	@ (80025a4 <HAL_RCC_OscConfig+0x274>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800254c:	f7fe fd62 	bl	8001014 <HAL_GetTick>
 8002550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002552:	e008      	b.n	8002566 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002554:	f7fe fd5e 	bl	8001014 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e160      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002566:	4b0d      	ldr	r3, [pc, #52]	@ (800259c <HAL_RCC_OscConfig+0x26c>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d0f0      	beq.n	8002554 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002572:	2001      	movs	r0, #1
 8002574:	f000 face 	bl	8002b14 <RCC_Delay>
 8002578:	e01c      	b.n	80025b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800257a:	4b0a      	ldr	r3, [pc, #40]	@ (80025a4 <HAL_RCC_OscConfig+0x274>)
 800257c:	2200      	movs	r2, #0
 800257e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002580:	f7fe fd48 	bl	8001014 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002586:	e00f      	b.n	80025a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002588:	f7fe fd44 	bl	8001014 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d908      	bls.n	80025a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e146      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
 800259a:	bf00      	nop
 800259c:	40021000 	.word	0x40021000
 80025a0:	42420000 	.word	0x42420000
 80025a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025a8:	4b92      	ldr	r3, [pc, #584]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ac:	f003 0302 	and.w	r3, r3, #2
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d1e9      	bne.n	8002588 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0304 	and.w	r3, r3, #4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 80a6 	beq.w	800270e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c2:	2300      	movs	r3, #0
 80025c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025c6:	4b8b      	ldr	r3, [pc, #556]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10d      	bne.n	80025ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d2:	4b88      	ldr	r3, [pc, #544]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	4a87      	ldr	r2, [pc, #540]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025dc:	61d3      	str	r3, [r2, #28]
 80025de:	4b85      	ldr	r3, [pc, #532]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025e6:	60bb      	str	r3, [r7, #8]
 80025e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025ea:	2301      	movs	r3, #1
 80025ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ee:	4b82      	ldr	r3, [pc, #520]	@ (80027f8 <HAL_RCC_OscConfig+0x4c8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d118      	bne.n	800262c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025fa:	4b7f      	ldr	r3, [pc, #508]	@ (80027f8 <HAL_RCC_OscConfig+0x4c8>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a7e      	ldr	r2, [pc, #504]	@ (80027f8 <HAL_RCC_OscConfig+0x4c8>)
 8002600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002606:	f7fe fd05 	bl	8001014 <HAL_GetTick>
 800260a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800260c:	e008      	b.n	8002620 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260e:	f7fe fd01 	bl	8001014 <HAL_GetTick>
 8002612:	4602      	mov	r2, r0
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	1ad3      	subs	r3, r2, r3
 8002618:	2b64      	cmp	r3, #100	@ 0x64
 800261a:	d901      	bls.n	8002620 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e103      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002620:	4b75      	ldr	r3, [pc, #468]	@ (80027f8 <HAL_RCC_OscConfig+0x4c8>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d0f0      	beq.n	800260e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d106      	bne.n	8002642 <HAL_RCC_OscConfig+0x312>
 8002634:	4b6f      	ldr	r3, [pc, #444]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	4a6e      	ldr	r2, [pc, #440]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800263a:	f043 0301 	orr.w	r3, r3, #1
 800263e:	6213      	str	r3, [r2, #32]
 8002640:	e02d      	b.n	800269e <HAL_RCC_OscConfig+0x36e>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10c      	bne.n	8002664 <HAL_RCC_OscConfig+0x334>
 800264a:	4b6a      	ldr	r3, [pc, #424]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	4a69      	ldr	r2, [pc, #420]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002650:	f023 0301 	bic.w	r3, r3, #1
 8002654:	6213      	str	r3, [r2, #32]
 8002656:	4b67      	ldr	r3, [pc, #412]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	4a66      	ldr	r2, [pc, #408]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800265c:	f023 0304 	bic.w	r3, r3, #4
 8002660:	6213      	str	r3, [r2, #32]
 8002662:	e01c      	b.n	800269e <HAL_RCC_OscConfig+0x36e>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	2b05      	cmp	r3, #5
 800266a:	d10c      	bne.n	8002686 <HAL_RCC_OscConfig+0x356>
 800266c:	4b61      	ldr	r3, [pc, #388]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800266e:	6a1b      	ldr	r3, [r3, #32]
 8002670:	4a60      	ldr	r2, [pc, #384]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002672:	f043 0304 	orr.w	r3, r3, #4
 8002676:	6213      	str	r3, [r2, #32]
 8002678:	4b5e      	ldr	r3, [pc, #376]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	4a5d      	ldr	r2, [pc, #372]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	6213      	str	r3, [r2, #32]
 8002684:	e00b      	b.n	800269e <HAL_RCC_OscConfig+0x36e>
 8002686:	4b5b      	ldr	r3, [pc, #364]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	4a5a      	ldr	r2, [pc, #360]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800268c:	f023 0301 	bic.w	r3, r3, #1
 8002690:	6213      	str	r3, [r2, #32]
 8002692:	4b58      	ldr	r3, [pc, #352]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	4a57      	ldr	r2, [pc, #348]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d015      	beq.n	80026d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a6:	f7fe fcb5 	bl	8001014 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe fcb1 	bl	8001014 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e0b1      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	4b4b      	ldr	r3, [pc, #300]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ee      	beq.n	80026ae <HAL_RCC_OscConfig+0x37e>
 80026d0:	e014      	b.n	80026fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fc9f 	bl	8001014 <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d8:	e00a      	b.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026da:	f7fe fc9b 	bl	8001014 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d901      	bls.n	80026f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80026ec:	2303      	movs	r3, #3
 80026ee:	e09b      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	4b40      	ldr	r3, [pc, #256]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80026f2:	6a1b      	ldr	r3, [r3, #32]
 80026f4:	f003 0302 	and.w	r3, r3, #2
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1ee      	bne.n	80026da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026fc:	7dfb      	ldrb	r3, [r7, #23]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d105      	bne.n	800270e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002702:	4b3c      	ldr	r3, [pc, #240]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	4a3b      	ldr	r2, [pc, #236]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800270c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 8087 	beq.w	8002826 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002718:	4b36      	ldr	r3, [pc, #216]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 030c 	and.w	r3, r3, #12
 8002720:	2b08      	cmp	r3, #8
 8002722:	d061      	beq.n	80027e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69db      	ldr	r3, [r3, #28]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d146      	bne.n	80027ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800272c:	4b33      	ldr	r3, [pc, #204]	@ (80027fc <HAL_RCC_OscConfig+0x4cc>)
 800272e:	2200      	movs	r2, #0
 8002730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002732:	f7fe fc6f 	bl	8001014 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002738:	e008      	b.n	800274c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273a:	f7fe fc6b 	bl	8001014 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	2b02      	cmp	r3, #2
 8002746:	d901      	bls.n	800274c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e06d      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800274c:	4b29      	ldr	r3, [pc, #164]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f0      	bne.n	800273a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002760:	d108      	bne.n	8002774 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002764:	685b      	ldr	r3, [r3, #4]
 8002766:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	4921      	ldr	r1, [pc, #132]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	4313      	orrs	r3, r2
 8002772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002774:	4b1f      	ldr	r3, [pc, #124]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6a19      	ldr	r1, [r3, #32]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002784:	430b      	orrs	r3, r1
 8002786:	491b      	ldr	r1, [pc, #108]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800278c:	4b1b      	ldr	r3, [pc, #108]	@ (80027fc <HAL_RCC_OscConfig+0x4cc>)
 800278e:	2201      	movs	r2, #1
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7fe fc3f 	bl	8001014 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe fc3b 	bl	8001014 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e03d      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ac:	4b11      	ldr	r3, [pc, #68]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0f0      	beq.n	800279a <HAL_RCC_OscConfig+0x46a>
 80027b8:	e035      	b.n	8002826 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <HAL_RCC_OscConfig+0x4cc>)
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027c0:	f7fe fc28 	bl	8001014 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7fe fc24 	bl	8001014 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e026      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80027da:	4b06      	ldr	r3, [pc, #24]	@ (80027f4 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d1f0      	bne.n	80027c8 <HAL_RCC_OscConfig+0x498>
 80027e6:	e01e      	b.n	8002826 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d107      	bne.n	8002800 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e019      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
 80027fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002800:	4b0b      	ldr	r3, [pc, #44]	@ (8002830 <HAL_RCC_OscConfig+0x500>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	429a      	cmp	r2, r3
 8002812:	d106      	bne.n	8002822 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800281e:	429a      	cmp	r2, r3
 8002820:	d001      	beq.n	8002826 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002826:	2300      	movs	r3, #0
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	40021000 	.word	0x40021000

08002834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
 800283c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d101      	bne.n	8002848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002844:	2301      	movs	r3, #1
 8002846:	e0d0      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002848:	4b6a      	ldr	r3, [pc, #424]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0307 	and.w	r3, r3, #7
 8002850:	683a      	ldr	r2, [r7, #0]
 8002852:	429a      	cmp	r2, r3
 8002854:	d910      	bls.n	8002878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002856:	4b67      	ldr	r3, [pc, #412]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 0207 	bic.w	r2, r3, #7
 800285e:	4965      	ldr	r1, [pc, #404]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002866:	4b63      	ldr	r3, [pc, #396]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	429a      	cmp	r2, r3
 8002872:	d001      	beq.n	8002878 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e0b8      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0302 	and.w	r3, r3, #2
 8002880:	2b00      	cmp	r3, #0
 8002882:	d020      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0304 	and.w	r3, r3, #4
 800288c:	2b00      	cmp	r3, #0
 800288e:	d005      	beq.n	800289c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002890:	4b59      	ldr	r3, [pc, #356]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	4a58      	ldr	r2, [pc, #352]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800289a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 0308 	and.w	r3, r3, #8
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d005      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a8:	4b53      	ldr	r3, [pc, #332]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	4a52      	ldr	r2, [pc, #328]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b4:	4b50      	ldr	r3, [pc, #320]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	494d      	ldr	r1, [pc, #308]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0301 	and.w	r3, r3, #1
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d040      	beq.n	8002954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028da:	4b47      	ldr	r3, [pc, #284]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d115      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e07f      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d107      	bne.n	8002902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f2:	4b41      	ldr	r3, [pc, #260]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d109      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e073      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002902:	4b3d      	ldr	r3, [pc, #244]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0302 	and.w	r3, r3, #2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d101      	bne.n	8002912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e06b      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002912:	4b39      	ldr	r3, [pc, #228]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f023 0203 	bic.w	r2, r3, #3
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	4936      	ldr	r1, [pc, #216]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002920:	4313      	orrs	r3, r2
 8002922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002924:	f7fe fb76 	bl	8001014 <HAL_GetTick>
 8002928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	e00a      	b.n	8002942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800292c:	f7fe fb72 	bl	8001014 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800293a:	4293      	cmp	r3, r2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e053      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002942:	4b2d      	ldr	r3, [pc, #180]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f003 020c 	and.w	r2, r3, #12
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	429a      	cmp	r2, r3
 8002952:	d1eb      	bne.n	800292c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002954:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0307 	and.w	r3, r3, #7
 800295c:	683a      	ldr	r2, [r7, #0]
 800295e:	429a      	cmp	r2, r3
 8002960:	d210      	bcs.n	8002984 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002962:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f023 0207 	bic.w	r2, r3, #7
 800296a:	4922      	ldr	r1, [pc, #136]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	4313      	orrs	r3, r2
 8002970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002972:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0307 	and.w	r3, r3, #7
 800297a:	683a      	ldr	r2, [r7, #0]
 800297c:	429a      	cmp	r2, r3
 800297e:	d001      	beq.n	8002984 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e032      	b.n	80029ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0304 	and.w	r3, r3, #4
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002990:	4b19      	ldr	r3, [pc, #100]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	4916      	ldr	r1, [pc, #88]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d009      	beq.n	80029c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029ae:	4b12      	ldr	r3, [pc, #72]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	00db      	lsls	r3, r3, #3
 80029bc:	490e      	ldr	r1, [pc, #56]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80029c2:	f000 f821 	bl	8002a08 <HAL_RCC_GetSysClockFreq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4b0b      	ldr	r3, [pc, #44]	@ (80029f8 <HAL_RCC_ClockConfig+0x1c4>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	490a      	ldr	r1, [pc, #40]	@ (80029fc <HAL_RCC_ClockConfig+0x1c8>)
 80029d4:	5ccb      	ldrb	r3, [r1, r3]
 80029d6:	fa22 f303 	lsr.w	r3, r2, r3
 80029da:	4a09      	ldr	r2, [pc, #36]	@ (8002a00 <HAL_RCC_ClockConfig+0x1cc>)
 80029dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029de:	4b09      	ldr	r3, [pc, #36]	@ (8002a04 <HAL_RCC_ClockConfig+0x1d0>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7fe fad4 	bl	8000f90 <HAL_InitTick>

  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3710      	adds	r7, #16
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40022000 	.word	0x40022000
 80029f8:	40021000 	.word	0x40021000
 80029fc:	08003958 	.word	0x08003958
 8002a00:	20000004 	.word	0x20000004
 8002a04:	20000008 	.word	0x20000008

08002a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b087      	sub	sp, #28
 8002a0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	2300      	movs	r3, #0
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a22:	4b1e      	ldr	r3, [pc, #120]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 030c 	and.w	r3, r3, #12
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d002      	beq.n	8002a38 <HAL_RCC_GetSysClockFreq+0x30>
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d003      	beq.n	8002a3e <HAL_RCC_GetSysClockFreq+0x36>
 8002a36:	e027      	b.n	8002a88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a38:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a3a:	613b      	str	r3, [r7, #16]
      break;
 8002a3c:	e027      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	0c9b      	lsrs	r3, r3, #18
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	4a17      	ldr	r2, [pc, #92]	@ (8002aa4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a48:	5cd3      	ldrb	r3, [r2, r3]
 8002a4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d010      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a56:	4b11      	ldr	r3, [pc, #68]	@ (8002a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	0c5b      	lsrs	r3, r3, #17
 8002a5c:	f003 0301 	and.w	r3, r3, #1
 8002a60:	4a11      	ldr	r2, [pc, #68]	@ (8002aa8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002a62:	5cd3      	ldrb	r3, [r2, r3]
 8002a64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a0d      	ldr	r2, [pc, #52]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a6a:	fb03 f202 	mul.w	r2, r3, r2
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a74:	617b      	str	r3, [r7, #20]
 8002a76:	e004      	b.n	8002a82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8002aac <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a7c:	fb02 f303 	mul.w	r3, r2, r3
 8002a80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	613b      	str	r3, [r7, #16]
      break;
 8002a86:	e002      	b.n	8002a8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a88:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a8a:	613b      	str	r3, [r7, #16]
      break;
 8002a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a8e:	693b      	ldr	r3, [r7, #16]
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	371c      	adds	r7, #28
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bc80      	pop	{r7}
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	007a1200 	.word	0x007a1200
 8002aa4:	08003970 	.word	0x08003970
 8002aa8:	08003980 	.word	0x08003980
 8002aac:	003d0900 	.word	0x003d0900

08002ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ab4:	4b02      	ldr	r3, [pc, #8]	@ (8002ac0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bc80      	pop	{r7}
 8002abe:	4770      	bx	lr
 8002ac0:	20000004 	.word	0x20000004

08002ac4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ac8:	f7ff fff2 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002acc:	4602      	mov	r2, r0
 8002ace:	4b05      	ldr	r3, [pc, #20]	@ (8002ae4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	0a1b      	lsrs	r3, r3, #8
 8002ad4:	f003 0307 	and.w	r3, r3, #7
 8002ad8:	4903      	ldr	r1, [pc, #12]	@ (8002ae8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ada:	5ccb      	ldrb	r3, [r1, r3]
 8002adc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	40021000 	.word	0x40021000
 8002ae8:	08003968 	.word	0x08003968

08002aec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002af0:	f7ff ffde 	bl	8002ab0 <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	0adb      	lsrs	r3, r3, #11
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4903      	ldr	r1, [pc, #12]	@ (8002b10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	40021000 	.word	0x40021000
 8002b10:	08003968 	.word	0x08003968

08002b14 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b085      	sub	sp, #20
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b48 <RCC_Delay+0x34>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0a      	ldr	r2, [pc, #40]	@ (8002b4c <RCC_Delay+0x38>)
 8002b22:	fba2 2303 	umull	r2, r3, r2, r3
 8002b26:	0a5b      	lsrs	r3, r3, #9
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	fb02 f303 	mul.w	r3, r2, r3
 8002b2e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b30:	bf00      	nop
  }
  while (Delay --);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1e5a      	subs	r2, r3, #1
 8002b36:	60fa      	str	r2, [r7, #12]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1f9      	bne.n	8002b30 <RCC_Delay+0x1c>
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	20000004 	.word	0x20000004
 8002b4c:	10624dd3 	.word	0x10624dd3

08002b50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b082      	sub	sp, #8
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d101      	bne.n	8002b62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e042      	b.n	8002be8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d106      	bne.n	8002b7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b76:	6878      	ldr	r0, [r7, #4]
 8002b78:	f7fe f906 	bl	8000d88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2224      	movs	r2, #36	@ 0x24
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f971 	bl	8002e7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	691a      	ldr	r2, [r3, #16]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002ba8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	695a      	ldr	r2, [r3, #20]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	68da      	ldr	r2, [r3, #12]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002bc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2220      	movs	r2, #32
 8002bdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002be6:	2300      	movs	r3, #0
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08a      	sub	sp, #40	@ 0x28
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	60f8      	str	r0, [r7, #12]
 8002bf8:	60b9      	str	r1, [r7, #8]
 8002bfa:	603b      	str	r3, [r7, #0]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b20      	cmp	r3, #32
 8002c0e:	d175      	bne.n	8002cfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d002      	beq.n	8002c1c <HAL_UART_Transmit+0x2c>
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d101      	bne.n	8002c20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e06e      	b.n	8002cfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2200      	movs	r2, #0
 8002c24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2221      	movs	r2, #33	@ 0x21
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c2e:	f7fe f9f1 	bl	8001014 <HAL_GetTick>
 8002c32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	88fa      	ldrh	r2, [r7, #6]
 8002c38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	88fa      	ldrh	r2, [r7, #6]
 8002c3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c48:	d108      	bne.n	8002c5c <HAL_UART_Transmit+0x6c>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d104      	bne.n	8002c5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e003      	b.n	8002c64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c64:	e02e      	b.n	8002cc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	9300      	str	r3, [sp, #0]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	2180      	movs	r1, #128	@ 0x80
 8002c70:	68f8      	ldr	r0, [r7, #12]
 8002c72:	f000 f848 	bl	8002d06 <UART_WaitOnFlagUntilTimeout>
 8002c76:	4603      	mov	r3, r0
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d005      	beq.n	8002c88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e03a      	b.n	8002cfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d10b      	bne.n	8002ca6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c8e:	69bb      	ldr	r3, [r7, #24]
 8002c90:	881b      	ldrh	r3, [r3, #0]
 8002c92:	461a      	mov	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	3302      	adds	r3, #2
 8002ca2:	61bb      	str	r3, [r7, #24]
 8002ca4:	e007      	b.n	8002cb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	781a      	ldrb	r2, [r3, #0]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b29a      	uxth	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002cc8:	b29b      	uxth	r3, r3
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1cb      	bne.n	8002c66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	9300      	str	r3, [sp, #0]
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	2140      	movs	r1, #64	@ 0x40
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f814 	bl	8002d06 <UART_WaitOnFlagUntilTimeout>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2220      	movs	r2, #32
 8002ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e006      	b.n	8002cfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2220      	movs	r2, #32
 8002cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	e000      	b.n	8002cfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002cfc:	2302      	movs	r3, #2
  }
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3720      	adds	r7, #32
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b086      	sub	sp, #24
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	60f8      	str	r0, [r7, #12]
 8002d0e:	60b9      	str	r1, [r7, #8]
 8002d10:	603b      	str	r3, [r7, #0]
 8002d12:	4613      	mov	r3, r2
 8002d14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d16:	e03b      	b.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d1e:	d037      	beq.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d20:	f7fe f978 	bl	8001014 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	6a3a      	ldr	r2, [r7, #32]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d302      	bcc.n	8002d36 <UART_WaitOnFlagUntilTimeout+0x30>
 8002d30:	6a3b      	ldr	r3, [r7, #32]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e03a      	b.n	8002db0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	f003 0304 	and.w	r3, r3, #4
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d023      	beq.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d48:	68bb      	ldr	r3, [r7, #8]
 8002d4a:	2b80      	cmp	r3, #128	@ 0x80
 8002d4c:	d020      	beq.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	2b40      	cmp	r3, #64	@ 0x40
 8002d52:	d01d      	beq.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f003 0308 	and.w	r3, r3, #8
 8002d5e:	2b08      	cmp	r3, #8
 8002d60:	d116      	bne.n	8002d90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	617b      	str	r3, [r7, #20]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	617b      	str	r3, [r7, #20]
 8002d76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	f000 f81d 	bl	8002db8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	2208      	movs	r2, #8
 8002d82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2200      	movs	r2, #0
 8002d88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e00f      	b.n	8002db0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	bf0c      	ite	eq
 8002da0:	2301      	moveq	r3, #1
 8002da2:	2300      	movne	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	461a      	mov	r2, r3
 8002da8:	79fb      	ldrb	r3, [r7, #7]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d0b4      	beq.n	8002d18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b095      	sub	sp, #84	@ 0x54
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	330c      	adds	r3, #12
 8002dc6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002dca:	e853 3f00 	ldrex	r3, [r3]
 8002dce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	330c      	adds	r3, #12
 8002dde:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002de0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002de2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002de4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002de6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002de8:	e841 2300 	strex	r3, r2, [r1]
 8002dec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e5      	bne.n	8002dc0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3314      	adds	r3, #20
 8002dfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	e853 3f00 	ldrex	r3, [r3]
 8002e02:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f023 0301 	bic.w	r3, r3, #1
 8002e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	3314      	adds	r3, #20
 8002e12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e14:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e5      	bne.n	8002df4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d119      	bne.n	8002e64 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	330c      	adds	r3, #12
 8002e36:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	e853 3f00 	ldrex	r3, [r3]
 8002e3e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	f023 0310 	bic.w	r3, r3, #16
 8002e46:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	330c      	adds	r3, #12
 8002e4e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002e50:	61ba      	str	r2, [r7, #24]
 8002e52:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	6979      	ldr	r1, [r7, #20]
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	e841 2300 	strex	r3, r2, [r1]
 8002e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d1e5      	bne.n	8002e30 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2220      	movs	r2, #32
 8002e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002e72:	bf00      	nop
 8002e74:	3754      	adds	r7, #84	@ 0x54
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	68da      	ldr	r2, [r3, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689a      	ldr	r2, [r3, #8]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	691b      	ldr	r3, [r3, #16]
 8002ea2:	431a      	orrs	r2, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	695b      	ldr	r3, [r3, #20]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002eb6:	f023 030c 	bic.w	r3, r3, #12
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	68b9      	ldr	r1, [r7, #8]
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	695b      	ldr	r3, [r3, #20]
 8002eca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2c      	ldr	r2, [pc, #176]	@ (8002f90 <UART_SetConfig+0x114>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d103      	bne.n	8002eec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002ee4:	f7ff fe02 	bl	8002aec <HAL_RCC_GetPCLK2Freq>
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	e002      	b.n	8002ef2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002eec:	f7ff fdea 	bl	8002ac4 <HAL_RCC_GetPCLK1Freq>
 8002ef0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	009a      	lsls	r2, r3, #2
 8002efc:	441a      	add	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f08:	4a22      	ldr	r2, [pc, #136]	@ (8002f94 <UART_SetConfig+0x118>)
 8002f0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0e:	095b      	lsrs	r3, r3, #5
 8002f10:	0119      	lsls	r1, r3, #4
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	4613      	mov	r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	4413      	add	r3, r2
 8002f1a:	009a      	lsls	r2, r3, #2
 8002f1c:	441a      	add	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f28:	4b1a      	ldr	r3, [pc, #104]	@ (8002f94 <UART_SetConfig+0x118>)
 8002f2a:	fba3 0302 	umull	r0, r3, r3, r2
 8002f2e:	095b      	lsrs	r3, r3, #5
 8002f30:	2064      	movs	r0, #100	@ 0x64
 8002f32:	fb00 f303 	mul.w	r3, r0, r3
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	011b      	lsls	r3, r3, #4
 8002f3a:	3332      	adds	r3, #50	@ 0x32
 8002f3c:	4a15      	ldr	r2, [pc, #84]	@ (8002f94 <UART_SetConfig+0x118>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	095b      	lsrs	r3, r3, #5
 8002f44:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f48:	4419      	add	r1, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	4413      	add	r3, r2
 8002f52:	009a      	lsls	r2, r3, #2
 8002f54:	441a      	add	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002f60:	4b0c      	ldr	r3, [pc, #48]	@ (8002f94 <UART_SetConfig+0x118>)
 8002f62:	fba3 0302 	umull	r0, r3, r3, r2
 8002f66:	095b      	lsrs	r3, r3, #5
 8002f68:	2064      	movs	r0, #100	@ 0x64
 8002f6a:	fb00 f303 	mul.w	r3, r0, r3
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	011b      	lsls	r3, r3, #4
 8002f72:	3332      	adds	r3, #50	@ 0x32
 8002f74:	4a07      	ldr	r2, [pc, #28]	@ (8002f94 <UART_SetConfig+0x118>)
 8002f76:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7a:	095b      	lsrs	r3, r3, #5
 8002f7c:	f003 020f 	and.w	r2, r3, #15
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	440a      	add	r2, r1
 8002f86:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002f88:	bf00      	nop
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	40013800 	.word	0x40013800
 8002f94:	51eb851f 	.word	0x51eb851f

08002f98 <siprintf>:
 8002f98:	b40e      	push	{r1, r2, r3}
 8002f9a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8002f9e:	b500      	push	{lr}
 8002fa0:	b09c      	sub	sp, #112	@ 0x70
 8002fa2:	ab1d      	add	r3, sp, #116	@ 0x74
 8002fa4:	9002      	str	r0, [sp, #8]
 8002fa6:	9006      	str	r0, [sp, #24]
 8002fa8:	9107      	str	r1, [sp, #28]
 8002faa:	9104      	str	r1, [sp, #16]
 8002fac:	4808      	ldr	r0, [pc, #32]	@ (8002fd0 <siprintf+0x38>)
 8002fae:	4909      	ldr	r1, [pc, #36]	@ (8002fd4 <siprintf+0x3c>)
 8002fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8002fb4:	9105      	str	r1, [sp, #20]
 8002fb6:	6800      	ldr	r0, [r0, #0]
 8002fb8:	a902      	add	r1, sp, #8
 8002fba:	9301      	str	r3, [sp, #4]
 8002fbc:	f000 f992 	bl	80032e4 <_svfiprintf_r>
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	9b02      	ldr	r3, [sp, #8]
 8002fc4:	701a      	strb	r2, [r3, #0]
 8002fc6:	b01c      	add	sp, #112	@ 0x70
 8002fc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8002fcc:	b003      	add	sp, #12
 8002fce:	4770      	bx	lr
 8002fd0:	20000010 	.word	0x20000010
 8002fd4:	ffff0208 	.word	0xffff0208

08002fd8 <memset>:
 8002fd8:	4603      	mov	r3, r0
 8002fda:	4402      	add	r2, r0
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d100      	bne.n	8002fe2 <memset+0xa>
 8002fe0:	4770      	bx	lr
 8002fe2:	f803 1b01 	strb.w	r1, [r3], #1
 8002fe6:	e7f9      	b.n	8002fdc <memset+0x4>

08002fe8 <__errno>:
 8002fe8:	4b01      	ldr	r3, [pc, #4]	@ (8002ff0 <__errno+0x8>)
 8002fea:	6818      	ldr	r0, [r3, #0]
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	20000010 	.word	0x20000010

08002ff4 <__libc_init_array>:
 8002ff4:	b570      	push	{r4, r5, r6, lr}
 8002ff6:	2600      	movs	r6, #0
 8002ff8:	4d0c      	ldr	r5, [pc, #48]	@ (800302c <__libc_init_array+0x38>)
 8002ffa:	4c0d      	ldr	r4, [pc, #52]	@ (8003030 <__libc_init_array+0x3c>)
 8002ffc:	1b64      	subs	r4, r4, r5
 8002ffe:	10a4      	asrs	r4, r4, #2
 8003000:	42a6      	cmp	r6, r4
 8003002:	d109      	bne.n	8003018 <__libc_init_array+0x24>
 8003004:	f000 fc78 	bl	80038f8 <_init>
 8003008:	2600      	movs	r6, #0
 800300a:	4d0a      	ldr	r5, [pc, #40]	@ (8003034 <__libc_init_array+0x40>)
 800300c:	4c0a      	ldr	r4, [pc, #40]	@ (8003038 <__libc_init_array+0x44>)
 800300e:	1b64      	subs	r4, r4, r5
 8003010:	10a4      	asrs	r4, r4, #2
 8003012:	42a6      	cmp	r6, r4
 8003014:	d105      	bne.n	8003022 <__libc_init_array+0x2e>
 8003016:	bd70      	pop	{r4, r5, r6, pc}
 8003018:	f855 3b04 	ldr.w	r3, [r5], #4
 800301c:	4798      	blx	r3
 800301e:	3601      	adds	r6, #1
 8003020:	e7ee      	b.n	8003000 <__libc_init_array+0xc>
 8003022:	f855 3b04 	ldr.w	r3, [r5], #4
 8003026:	4798      	blx	r3
 8003028:	3601      	adds	r6, #1
 800302a:	e7f2      	b.n	8003012 <__libc_init_array+0x1e>
 800302c:	080039c0 	.word	0x080039c0
 8003030:	080039c0 	.word	0x080039c0
 8003034:	080039c0 	.word	0x080039c0
 8003038:	080039c4 	.word	0x080039c4

0800303c <__retarget_lock_acquire_recursive>:
 800303c:	4770      	bx	lr

0800303e <__retarget_lock_release_recursive>:
 800303e:	4770      	bx	lr

08003040 <_free_r>:
 8003040:	b538      	push	{r3, r4, r5, lr}
 8003042:	4605      	mov	r5, r0
 8003044:	2900      	cmp	r1, #0
 8003046:	d040      	beq.n	80030ca <_free_r+0x8a>
 8003048:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800304c:	1f0c      	subs	r4, r1, #4
 800304e:	2b00      	cmp	r3, #0
 8003050:	bfb8      	it	lt
 8003052:	18e4      	addlt	r4, r4, r3
 8003054:	f000 f8de 	bl	8003214 <__malloc_lock>
 8003058:	4a1c      	ldr	r2, [pc, #112]	@ (80030cc <_free_r+0x8c>)
 800305a:	6813      	ldr	r3, [r2, #0]
 800305c:	b933      	cbnz	r3, 800306c <_free_r+0x2c>
 800305e:	6063      	str	r3, [r4, #4]
 8003060:	6014      	str	r4, [r2, #0]
 8003062:	4628      	mov	r0, r5
 8003064:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003068:	f000 b8da 	b.w	8003220 <__malloc_unlock>
 800306c:	42a3      	cmp	r3, r4
 800306e:	d908      	bls.n	8003082 <_free_r+0x42>
 8003070:	6820      	ldr	r0, [r4, #0]
 8003072:	1821      	adds	r1, r4, r0
 8003074:	428b      	cmp	r3, r1
 8003076:	bf01      	itttt	eq
 8003078:	6819      	ldreq	r1, [r3, #0]
 800307a:	685b      	ldreq	r3, [r3, #4]
 800307c:	1809      	addeq	r1, r1, r0
 800307e:	6021      	streq	r1, [r4, #0]
 8003080:	e7ed      	b.n	800305e <_free_r+0x1e>
 8003082:	461a      	mov	r2, r3
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	b10b      	cbz	r3, 800308c <_free_r+0x4c>
 8003088:	42a3      	cmp	r3, r4
 800308a:	d9fa      	bls.n	8003082 <_free_r+0x42>
 800308c:	6811      	ldr	r1, [r2, #0]
 800308e:	1850      	adds	r0, r2, r1
 8003090:	42a0      	cmp	r0, r4
 8003092:	d10b      	bne.n	80030ac <_free_r+0x6c>
 8003094:	6820      	ldr	r0, [r4, #0]
 8003096:	4401      	add	r1, r0
 8003098:	1850      	adds	r0, r2, r1
 800309a:	4283      	cmp	r3, r0
 800309c:	6011      	str	r1, [r2, #0]
 800309e:	d1e0      	bne.n	8003062 <_free_r+0x22>
 80030a0:	6818      	ldr	r0, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4408      	add	r0, r1
 80030a6:	6010      	str	r0, [r2, #0]
 80030a8:	6053      	str	r3, [r2, #4]
 80030aa:	e7da      	b.n	8003062 <_free_r+0x22>
 80030ac:	d902      	bls.n	80030b4 <_free_r+0x74>
 80030ae:	230c      	movs	r3, #12
 80030b0:	602b      	str	r3, [r5, #0]
 80030b2:	e7d6      	b.n	8003062 <_free_r+0x22>
 80030b4:	6820      	ldr	r0, [r4, #0]
 80030b6:	1821      	adds	r1, r4, r0
 80030b8:	428b      	cmp	r3, r1
 80030ba:	bf01      	itttt	eq
 80030bc:	6819      	ldreq	r1, [r3, #0]
 80030be:	685b      	ldreq	r3, [r3, #4]
 80030c0:	1809      	addeq	r1, r1, r0
 80030c2:	6021      	streq	r1, [r4, #0]
 80030c4:	6063      	str	r3, [r4, #4]
 80030c6:	6054      	str	r4, [r2, #4]
 80030c8:	e7cb      	b.n	8003062 <_free_r+0x22>
 80030ca:	bd38      	pop	{r3, r4, r5, pc}
 80030cc:	200002fc 	.word	0x200002fc

080030d0 <sbrk_aligned>:
 80030d0:	b570      	push	{r4, r5, r6, lr}
 80030d2:	4e0f      	ldr	r6, [pc, #60]	@ (8003110 <sbrk_aligned+0x40>)
 80030d4:	460c      	mov	r4, r1
 80030d6:	6831      	ldr	r1, [r6, #0]
 80030d8:	4605      	mov	r5, r0
 80030da:	b911      	cbnz	r1, 80030e2 <sbrk_aligned+0x12>
 80030dc:	f000 fbaa 	bl	8003834 <_sbrk_r>
 80030e0:	6030      	str	r0, [r6, #0]
 80030e2:	4621      	mov	r1, r4
 80030e4:	4628      	mov	r0, r5
 80030e6:	f000 fba5 	bl	8003834 <_sbrk_r>
 80030ea:	1c43      	adds	r3, r0, #1
 80030ec:	d103      	bne.n	80030f6 <sbrk_aligned+0x26>
 80030ee:	f04f 34ff 	mov.w	r4, #4294967295
 80030f2:	4620      	mov	r0, r4
 80030f4:	bd70      	pop	{r4, r5, r6, pc}
 80030f6:	1cc4      	adds	r4, r0, #3
 80030f8:	f024 0403 	bic.w	r4, r4, #3
 80030fc:	42a0      	cmp	r0, r4
 80030fe:	d0f8      	beq.n	80030f2 <sbrk_aligned+0x22>
 8003100:	1a21      	subs	r1, r4, r0
 8003102:	4628      	mov	r0, r5
 8003104:	f000 fb96 	bl	8003834 <_sbrk_r>
 8003108:	3001      	adds	r0, #1
 800310a:	d1f2      	bne.n	80030f2 <sbrk_aligned+0x22>
 800310c:	e7ef      	b.n	80030ee <sbrk_aligned+0x1e>
 800310e:	bf00      	nop
 8003110:	200002f8 	.word	0x200002f8

08003114 <_malloc_r>:
 8003114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003118:	1ccd      	adds	r5, r1, #3
 800311a:	f025 0503 	bic.w	r5, r5, #3
 800311e:	3508      	adds	r5, #8
 8003120:	2d0c      	cmp	r5, #12
 8003122:	bf38      	it	cc
 8003124:	250c      	movcc	r5, #12
 8003126:	2d00      	cmp	r5, #0
 8003128:	4606      	mov	r6, r0
 800312a:	db01      	blt.n	8003130 <_malloc_r+0x1c>
 800312c:	42a9      	cmp	r1, r5
 800312e:	d904      	bls.n	800313a <_malloc_r+0x26>
 8003130:	230c      	movs	r3, #12
 8003132:	6033      	str	r3, [r6, #0]
 8003134:	2000      	movs	r0, #0
 8003136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800313a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003210 <_malloc_r+0xfc>
 800313e:	f000 f869 	bl	8003214 <__malloc_lock>
 8003142:	f8d8 3000 	ldr.w	r3, [r8]
 8003146:	461c      	mov	r4, r3
 8003148:	bb44      	cbnz	r4, 800319c <_malloc_r+0x88>
 800314a:	4629      	mov	r1, r5
 800314c:	4630      	mov	r0, r6
 800314e:	f7ff ffbf 	bl	80030d0 <sbrk_aligned>
 8003152:	1c43      	adds	r3, r0, #1
 8003154:	4604      	mov	r4, r0
 8003156:	d158      	bne.n	800320a <_malloc_r+0xf6>
 8003158:	f8d8 4000 	ldr.w	r4, [r8]
 800315c:	4627      	mov	r7, r4
 800315e:	2f00      	cmp	r7, #0
 8003160:	d143      	bne.n	80031ea <_malloc_r+0xd6>
 8003162:	2c00      	cmp	r4, #0
 8003164:	d04b      	beq.n	80031fe <_malloc_r+0xea>
 8003166:	6823      	ldr	r3, [r4, #0]
 8003168:	4639      	mov	r1, r7
 800316a:	4630      	mov	r0, r6
 800316c:	eb04 0903 	add.w	r9, r4, r3
 8003170:	f000 fb60 	bl	8003834 <_sbrk_r>
 8003174:	4581      	cmp	r9, r0
 8003176:	d142      	bne.n	80031fe <_malloc_r+0xea>
 8003178:	6821      	ldr	r1, [r4, #0]
 800317a:	4630      	mov	r0, r6
 800317c:	1a6d      	subs	r5, r5, r1
 800317e:	4629      	mov	r1, r5
 8003180:	f7ff ffa6 	bl	80030d0 <sbrk_aligned>
 8003184:	3001      	adds	r0, #1
 8003186:	d03a      	beq.n	80031fe <_malloc_r+0xea>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	442b      	add	r3, r5
 800318c:	6023      	str	r3, [r4, #0]
 800318e:	f8d8 3000 	ldr.w	r3, [r8]
 8003192:	685a      	ldr	r2, [r3, #4]
 8003194:	bb62      	cbnz	r2, 80031f0 <_malloc_r+0xdc>
 8003196:	f8c8 7000 	str.w	r7, [r8]
 800319a:	e00f      	b.n	80031bc <_malloc_r+0xa8>
 800319c:	6822      	ldr	r2, [r4, #0]
 800319e:	1b52      	subs	r2, r2, r5
 80031a0:	d420      	bmi.n	80031e4 <_malloc_r+0xd0>
 80031a2:	2a0b      	cmp	r2, #11
 80031a4:	d917      	bls.n	80031d6 <_malloc_r+0xc2>
 80031a6:	1961      	adds	r1, r4, r5
 80031a8:	42a3      	cmp	r3, r4
 80031aa:	6025      	str	r5, [r4, #0]
 80031ac:	bf18      	it	ne
 80031ae:	6059      	strne	r1, [r3, #4]
 80031b0:	6863      	ldr	r3, [r4, #4]
 80031b2:	bf08      	it	eq
 80031b4:	f8c8 1000 	streq.w	r1, [r8]
 80031b8:	5162      	str	r2, [r4, r5]
 80031ba:	604b      	str	r3, [r1, #4]
 80031bc:	4630      	mov	r0, r6
 80031be:	f000 f82f 	bl	8003220 <__malloc_unlock>
 80031c2:	f104 000b 	add.w	r0, r4, #11
 80031c6:	1d23      	adds	r3, r4, #4
 80031c8:	f020 0007 	bic.w	r0, r0, #7
 80031cc:	1ac2      	subs	r2, r0, r3
 80031ce:	bf1c      	itt	ne
 80031d0:	1a1b      	subne	r3, r3, r0
 80031d2:	50a3      	strne	r3, [r4, r2]
 80031d4:	e7af      	b.n	8003136 <_malloc_r+0x22>
 80031d6:	6862      	ldr	r2, [r4, #4]
 80031d8:	42a3      	cmp	r3, r4
 80031da:	bf0c      	ite	eq
 80031dc:	f8c8 2000 	streq.w	r2, [r8]
 80031e0:	605a      	strne	r2, [r3, #4]
 80031e2:	e7eb      	b.n	80031bc <_malloc_r+0xa8>
 80031e4:	4623      	mov	r3, r4
 80031e6:	6864      	ldr	r4, [r4, #4]
 80031e8:	e7ae      	b.n	8003148 <_malloc_r+0x34>
 80031ea:	463c      	mov	r4, r7
 80031ec:	687f      	ldr	r7, [r7, #4]
 80031ee:	e7b6      	b.n	800315e <_malloc_r+0x4a>
 80031f0:	461a      	mov	r2, r3
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	42a3      	cmp	r3, r4
 80031f6:	d1fb      	bne.n	80031f0 <_malloc_r+0xdc>
 80031f8:	2300      	movs	r3, #0
 80031fa:	6053      	str	r3, [r2, #4]
 80031fc:	e7de      	b.n	80031bc <_malloc_r+0xa8>
 80031fe:	230c      	movs	r3, #12
 8003200:	4630      	mov	r0, r6
 8003202:	6033      	str	r3, [r6, #0]
 8003204:	f000 f80c 	bl	8003220 <__malloc_unlock>
 8003208:	e794      	b.n	8003134 <_malloc_r+0x20>
 800320a:	6005      	str	r5, [r0, #0]
 800320c:	e7d6      	b.n	80031bc <_malloc_r+0xa8>
 800320e:	bf00      	nop
 8003210:	200002fc 	.word	0x200002fc

08003214 <__malloc_lock>:
 8003214:	4801      	ldr	r0, [pc, #4]	@ (800321c <__malloc_lock+0x8>)
 8003216:	f7ff bf11 	b.w	800303c <__retarget_lock_acquire_recursive>
 800321a:	bf00      	nop
 800321c:	200002f4 	.word	0x200002f4

08003220 <__malloc_unlock>:
 8003220:	4801      	ldr	r0, [pc, #4]	@ (8003228 <__malloc_unlock+0x8>)
 8003222:	f7ff bf0c 	b.w	800303e <__retarget_lock_release_recursive>
 8003226:	bf00      	nop
 8003228:	200002f4 	.word	0x200002f4

0800322c <__ssputs_r>:
 800322c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003230:	461f      	mov	r7, r3
 8003232:	688e      	ldr	r6, [r1, #8]
 8003234:	4682      	mov	sl, r0
 8003236:	42be      	cmp	r6, r7
 8003238:	460c      	mov	r4, r1
 800323a:	4690      	mov	r8, r2
 800323c:	680b      	ldr	r3, [r1, #0]
 800323e:	d82d      	bhi.n	800329c <__ssputs_r+0x70>
 8003240:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003244:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003248:	d026      	beq.n	8003298 <__ssputs_r+0x6c>
 800324a:	6965      	ldr	r5, [r4, #20]
 800324c:	6909      	ldr	r1, [r1, #16]
 800324e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003252:	eba3 0901 	sub.w	r9, r3, r1
 8003256:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800325a:	1c7b      	adds	r3, r7, #1
 800325c:	444b      	add	r3, r9
 800325e:	106d      	asrs	r5, r5, #1
 8003260:	429d      	cmp	r5, r3
 8003262:	bf38      	it	cc
 8003264:	461d      	movcc	r5, r3
 8003266:	0553      	lsls	r3, r2, #21
 8003268:	d527      	bpl.n	80032ba <__ssputs_r+0x8e>
 800326a:	4629      	mov	r1, r5
 800326c:	f7ff ff52 	bl	8003114 <_malloc_r>
 8003270:	4606      	mov	r6, r0
 8003272:	b360      	cbz	r0, 80032ce <__ssputs_r+0xa2>
 8003274:	464a      	mov	r2, r9
 8003276:	6921      	ldr	r1, [r4, #16]
 8003278:	f000 fafa 	bl	8003870 <memcpy>
 800327c:	89a3      	ldrh	r3, [r4, #12]
 800327e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003282:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003286:	81a3      	strh	r3, [r4, #12]
 8003288:	6126      	str	r6, [r4, #16]
 800328a:	444e      	add	r6, r9
 800328c:	6026      	str	r6, [r4, #0]
 800328e:	463e      	mov	r6, r7
 8003290:	6165      	str	r5, [r4, #20]
 8003292:	eba5 0509 	sub.w	r5, r5, r9
 8003296:	60a5      	str	r5, [r4, #8]
 8003298:	42be      	cmp	r6, r7
 800329a:	d900      	bls.n	800329e <__ssputs_r+0x72>
 800329c:	463e      	mov	r6, r7
 800329e:	4632      	mov	r2, r6
 80032a0:	4641      	mov	r1, r8
 80032a2:	6820      	ldr	r0, [r4, #0]
 80032a4:	f000 faac 	bl	8003800 <memmove>
 80032a8:	2000      	movs	r0, #0
 80032aa:	68a3      	ldr	r3, [r4, #8]
 80032ac:	1b9b      	subs	r3, r3, r6
 80032ae:	60a3      	str	r3, [r4, #8]
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	4433      	add	r3, r6
 80032b4:	6023      	str	r3, [r4, #0]
 80032b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032ba:	462a      	mov	r2, r5
 80032bc:	f000 fae6 	bl	800388c <_realloc_r>
 80032c0:	4606      	mov	r6, r0
 80032c2:	2800      	cmp	r0, #0
 80032c4:	d1e0      	bne.n	8003288 <__ssputs_r+0x5c>
 80032c6:	4650      	mov	r0, sl
 80032c8:	6921      	ldr	r1, [r4, #16]
 80032ca:	f7ff feb9 	bl	8003040 <_free_r>
 80032ce:	230c      	movs	r3, #12
 80032d0:	f8ca 3000 	str.w	r3, [sl]
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	f04f 30ff 	mov.w	r0, #4294967295
 80032da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032de:	81a3      	strh	r3, [r4, #12]
 80032e0:	e7e9      	b.n	80032b6 <__ssputs_r+0x8a>
	...

080032e4 <_svfiprintf_r>:
 80032e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032e8:	4698      	mov	r8, r3
 80032ea:	898b      	ldrh	r3, [r1, #12]
 80032ec:	4607      	mov	r7, r0
 80032ee:	061b      	lsls	r3, r3, #24
 80032f0:	460d      	mov	r5, r1
 80032f2:	4614      	mov	r4, r2
 80032f4:	b09d      	sub	sp, #116	@ 0x74
 80032f6:	d510      	bpl.n	800331a <_svfiprintf_r+0x36>
 80032f8:	690b      	ldr	r3, [r1, #16]
 80032fa:	b973      	cbnz	r3, 800331a <_svfiprintf_r+0x36>
 80032fc:	2140      	movs	r1, #64	@ 0x40
 80032fe:	f7ff ff09 	bl	8003114 <_malloc_r>
 8003302:	6028      	str	r0, [r5, #0]
 8003304:	6128      	str	r0, [r5, #16]
 8003306:	b930      	cbnz	r0, 8003316 <_svfiprintf_r+0x32>
 8003308:	230c      	movs	r3, #12
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	f04f 30ff 	mov.w	r0, #4294967295
 8003310:	b01d      	add	sp, #116	@ 0x74
 8003312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003316:	2340      	movs	r3, #64	@ 0x40
 8003318:	616b      	str	r3, [r5, #20]
 800331a:	2300      	movs	r3, #0
 800331c:	9309      	str	r3, [sp, #36]	@ 0x24
 800331e:	2320      	movs	r3, #32
 8003320:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003324:	2330      	movs	r3, #48	@ 0x30
 8003326:	f04f 0901 	mov.w	r9, #1
 800332a:	f8cd 800c 	str.w	r8, [sp, #12]
 800332e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80034c8 <_svfiprintf_r+0x1e4>
 8003332:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003336:	4623      	mov	r3, r4
 8003338:	469a      	mov	sl, r3
 800333a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800333e:	b10a      	cbz	r2, 8003344 <_svfiprintf_r+0x60>
 8003340:	2a25      	cmp	r2, #37	@ 0x25
 8003342:	d1f9      	bne.n	8003338 <_svfiprintf_r+0x54>
 8003344:	ebba 0b04 	subs.w	fp, sl, r4
 8003348:	d00b      	beq.n	8003362 <_svfiprintf_r+0x7e>
 800334a:	465b      	mov	r3, fp
 800334c:	4622      	mov	r2, r4
 800334e:	4629      	mov	r1, r5
 8003350:	4638      	mov	r0, r7
 8003352:	f7ff ff6b 	bl	800322c <__ssputs_r>
 8003356:	3001      	adds	r0, #1
 8003358:	f000 80a7 	beq.w	80034aa <_svfiprintf_r+0x1c6>
 800335c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800335e:	445a      	add	r2, fp
 8003360:	9209      	str	r2, [sp, #36]	@ 0x24
 8003362:	f89a 3000 	ldrb.w	r3, [sl]
 8003366:	2b00      	cmp	r3, #0
 8003368:	f000 809f 	beq.w	80034aa <_svfiprintf_r+0x1c6>
 800336c:	2300      	movs	r3, #0
 800336e:	f04f 32ff 	mov.w	r2, #4294967295
 8003372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003376:	f10a 0a01 	add.w	sl, sl, #1
 800337a:	9304      	str	r3, [sp, #16]
 800337c:	9307      	str	r3, [sp, #28]
 800337e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003382:	931a      	str	r3, [sp, #104]	@ 0x68
 8003384:	4654      	mov	r4, sl
 8003386:	2205      	movs	r2, #5
 8003388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800338c:	484e      	ldr	r0, [pc, #312]	@ (80034c8 <_svfiprintf_r+0x1e4>)
 800338e:	f000 fa61 	bl	8003854 <memchr>
 8003392:	9a04      	ldr	r2, [sp, #16]
 8003394:	b9d8      	cbnz	r0, 80033ce <_svfiprintf_r+0xea>
 8003396:	06d0      	lsls	r0, r2, #27
 8003398:	bf44      	itt	mi
 800339a:	2320      	movmi	r3, #32
 800339c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033a0:	0711      	lsls	r1, r2, #28
 80033a2:	bf44      	itt	mi
 80033a4:	232b      	movmi	r3, #43	@ 0x2b
 80033a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80033aa:	f89a 3000 	ldrb.w	r3, [sl]
 80033ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80033b0:	d015      	beq.n	80033de <_svfiprintf_r+0xfa>
 80033b2:	4654      	mov	r4, sl
 80033b4:	2000      	movs	r0, #0
 80033b6:	f04f 0c0a 	mov.w	ip, #10
 80033ba:	9a07      	ldr	r2, [sp, #28]
 80033bc:	4621      	mov	r1, r4
 80033be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033c2:	3b30      	subs	r3, #48	@ 0x30
 80033c4:	2b09      	cmp	r3, #9
 80033c6:	d94b      	bls.n	8003460 <_svfiprintf_r+0x17c>
 80033c8:	b1b0      	cbz	r0, 80033f8 <_svfiprintf_r+0x114>
 80033ca:	9207      	str	r2, [sp, #28]
 80033cc:	e014      	b.n	80033f8 <_svfiprintf_r+0x114>
 80033ce:	eba0 0308 	sub.w	r3, r0, r8
 80033d2:	fa09 f303 	lsl.w	r3, r9, r3
 80033d6:	4313      	orrs	r3, r2
 80033d8:	46a2      	mov	sl, r4
 80033da:	9304      	str	r3, [sp, #16]
 80033dc:	e7d2      	b.n	8003384 <_svfiprintf_r+0xa0>
 80033de:	9b03      	ldr	r3, [sp, #12]
 80033e0:	1d19      	adds	r1, r3, #4
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	9103      	str	r1, [sp, #12]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	bfbb      	ittet	lt
 80033ea:	425b      	neglt	r3, r3
 80033ec:	f042 0202 	orrlt.w	r2, r2, #2
 80033f0:	9307      	strge	r3, [sp, #28]
 80033f2:	9307      	strlt	r3, [sp, #28]
 80033f4:	bfb8      	it	lt
 80033f6:	9204      	strlt	r2, [sp, #16]
 80033f8:	7823      	ldrb	r3, [r4, #0]
 80033fa:	2b2e      	cmp	r3, #46	@ 0x2e
 80033fc:	d10a      	bne.n	8003414 <_svfiprintf_r+0x130>
 80033fe:	7863      	ldrb	r3, [r4, #1]
 8003400:	2b2a      	cmp	r3, #42	@ 0x2a
 8003402:	d132      	bne.n	800346a <_svfiprintf_r+0x186>
 8003404:	9b03      	ldr	r3, [sp, #12]
 8003406:	3402      	adds	r4, #2
 8003408:	1d1a      	adds	r2, r3, #4
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	9203      	str	r2, [sp, #12]
 800340e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003412:	9305      	str	r3, [sp, #20]
 8003414:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80034cc <_svfiprintf_r+0x1e8>
 8003418:	2203      	movs	r2, #3
 800341a:	4650      	mov	r0, sl
 800341c:	7821      	ldrb	r1, [r4, #0]
 800341e:	f000 fa19 	bl	8003854 <memchr>
 8003422:	b138      	cbz	r0, 8003434 <_svfiprintf_r+0x150>
 8003424:	2240      	movs	r2, #64	@ 0x40
 8003426:	9b04      	ldr	r3, [sp, #16]
 8003428:	eba0 000a 	sub.w	r0, r0, sl
 800342c:	4082      	lsls	r2, r0
 800342e:	4313      	orrs	r3, r2
 8003430:	3401      	adds	r4, #1
 8003432:	9304      	str	r3, [sp, #16]
 8003434:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003438:	2206      	movs	r2, #6
 800343a:	4825      	ldr	r0, [pc, #148]	@ (80034d0 <_svfiprintf_r+0x1ec>)
 800343c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003440:	f000 fa08 	bl	8003854 <memchr>
 8003444:	2800      	cmp	r0, #0
 8003446:	d036      	beq.n	80034b6 <_svfiprintf_r+0x1d2>
 8003448:	4b22      	ldr	r3, [pc, #136]	@ (80034d4 <_svfiprintf_r+0x1f0>)
 800344a:	bb1b      	cbnz	r3, 8003494 <_svfiprintf_r+0x1b0>
 800344c:	9b03      	ldr	r3, [sp, #12]
 800344e:	3307      	adds	r3, #7
 8003450:	f023 0307 	bic.w	r3, r3, #7
 8003454:	3308      	adds	r3, #8
 8003456:	9303      	str	r3, [sp, #12]
 8003458:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800345a:	4433      	add	r3, r6
 800345c:	9309      	str	r3, [sp, #36]	@ 0x24
 800345e:	e76a      	b.n	8003336 <_svfiprintf_r+0x52>
 8003460:	460c      	mov	r4, r1
 8003462:	2001      	movs	r0, #1
 8003464:	fb0c 3202 	mla	r2, ip, r2, r3
 8003468:	e7a8      	b.n	80033bc <_svfiprintf_r+0xd8>
 800346a:	2300      	movs	r3, #0
 800346c:	f04f 0c0a 	mov.w	ip, #10
 8003470:	4619      	mov	r1, r3
 8003472:	3401      	adds	r4, #1
 8003474:	9305      	str	r3, [sp, #20]
 8003476:	4620      	mov	r0, r4
 8003478:	f810 2b01 	ldrb.w	r2, [r0], #1
 800347c:	3a30      	subs	r2, #48	@ 0x30
 800347e:	2a09      	cmp	r2, #9
 8003480:	d903      	bls.n	800348a <_svfiprintf_r+0x1a6>
 8003482:	2b00      	cmp	r3, #0
 8003484:	d0c6      	beq.n	8003414 <_svfiprintf_r+0x130>
 8003486:	9105      	str	r1, [sp, #20]
 8003488:	e7c4      	b.n	8003414 <_svfiprintf_r+0x130>
 800348a:	4604      	mov	r4, r0
 800348c:	2301      	movs	r3, #1
 800348e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003492:	e7f0      	b.n	8003476 <_svfiprintf_r+0x192>
 8003494:	ab03      	add	r3, sp, #12
 8003496:	9300      	str	r3, [sp, #0]
 8003498:	462a      	mov	r2, r5
 800349a:	4638      	mov	r0, r7
 800349c:	4b0e      	ldr	r3, [pc, #56]	@ (80034d8 <_svfiprintf_r+0x1f4>)
 800349e:	a904      	add	r1, sp, #16
 80034a0:	f3af 8000 	nop.w
 80034a4:	1c42      	adds	r2, r0, #1
 80034a6:	4606      	mov	r6, r0
 80034a8:	d1d6      	bne.n	8003458 <_svfiprintf_r+0x174>
 80034aa:	89ab      	ldrh	r3, [r5, #12]
 80034ac:	065b      	lsls	r3, r3, #25
 80034ae:	f53f af2d 	bmi.w	800330c <_svfiprintf_r+0x28>
 80034b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034b4:	e72c      	b.n	8003310 <_svfiprintf_r+0x2c>
 80034b6:	ab03      	add	r3, sp, #12
 80034b8:	9300      	str	r3, [sp, #0]
 80034ba:	462a      	mov	r2, r5
 80034bc:	4638      	mov	r0, r7
 80034be:	4b06      	ldr	r3, [pc, #24]	@ (80034d8 <_svfiprintf_r+0x1f4>)
 80034c0:	a904      	add	r1, sp, #16
 80034c2:	f000 f87d 	bl	80035c0 <_printf_i>
 80034c6:	e7ed      	b.n	80034a4 <_svfiprintf_r+0x1c0>
 80034c8:	08003982 	.word	0x08003982
 80034cc:	08003988 	.word	0x08003988
 80034d0:	0800398c 	.word	0x0800398c
 80034d4:	00000000 	.word	0x00000000
 80034d8:	0800322d 	.word	0x0800322d

080034dc <_printf_common>:
 80034dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e0:	4616      	mov	r6, r2
 80034e2:	4698      	mov	r8, r3
 80034e4:	688a      	ldr	r2, [r1, #8]
 80034e6:	690b      	ldr	r3, [r1, #16]
 80034e8:	4607      	mov	r7, r0
 80034ea:	4293      	cmp	r3, r2
 80034ec:	bfb8      	it	lt
 80034ee:	4613      	movlt	r3, r2
 80034f0:	6033      	str	r3, [r6, #0]
 80034f2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034f6:	460c      	mov	r4, r1
 80034f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034fc:	b10a      	cbz	r2, 8003502 <_printf_common+0x26>
 80034fe:	3301      	adds	r3, #1
 8003500:	6033      	str	r3, [r6, #0]
 8003502:	6823      	ldr	r3, [r4, #0]
 8003504:	0699      	lsls	r1, r3, #26
 8003506:	bf42      	ittt	mi
 8003508:	6833      	ldrmi	r3, [r6, #0]
 800350a:	3302      	addmi	r3, #2
 800350c:	6033      	strmi	r3, [r6, #0]
 800350e:	6825      	ldr	r5, [r4, #0]
 8003510:	f015 0506 	ands.w	r5, r5, #6
 8003514:	d106      	bne.n	8003524 <_printf_common+0x48>
 8003516:	f104 0a19 	add.w	sl, r4, #25
 800351a:	68e3      	ldr	r3, [r4, #12]
 800351c:	6832      	ldr	r2, [r6, #0]
 800351e:	1a9b      	subs	r3, r3, r2
 8003520:	42ab      	cmp	r3, r5
 8003522:	dc2b      	bgt.n	800357c <_printf_common+0xa0>
 8003524:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003528:	6822      	ldr	r2, [r4, #0]
 800352a:	3b00      	subs	r3, #0
 800352c:	bf18      	it	ne
 800352e:	2301      	movne	r3, #1
 8003530:	0692      	lsls	r2, r2, #26
 8003532:	d430      	bmi.n	8003596 <_printf_common+0xba>
 8003534:	4641      	mov	r1, r8
 8003536:	4638      	mov	r0, r7
 8003538:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800353c:	47c8      	blx	r9
 800353e:	3001      	adds	r0, #1
 8003540:	d023      	beq.n	800358a <_printf_common+0xae>
 8003542:	6823      	ldr	r3, [r4, #0]
 8003544:	6922      	ldr	r2, [r4, #16]
 8003546:	f003 0306 	and.w	r3, r3, #6
 800354a:	2b04      	cmp	r3, #4
 800354c:	bf14      	ite	ne
 800354e:	2500      	movne	r5, #0
 8003550:	6833      	ldreq	r3, [r6, #0]
 8003552:	f04f 0600 	mov.w	r6, #0
 8003556:	bf08      	it	eq
 8003558:	68e5      	ldreq	r5, [r4, #12]
 800355a:	f104 041a 	add.w	r4, r4, #26
 800355e:	bf08      	it	eq
 8003560:	1aed      	subeq	r5, r5, r3
 8003562:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003566:	bf08      	it	eq
 8003568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800356c:	4293      	cmp	r3, r2
 800356e:	bfc4      	itt	gt
 8003570:	1a9b      	subgt	r3, r3, r2
 8003572:	18ed      	addgt	r5, r5, r3
 8003574:	42b5      	cmp	r5, r6
 8003576:	d11a      	bne.n	80035ae <_printf_common+0xd2>
 8003578:	2000      	movs	r0, #0
 800357a:	e008      	b.n	800358e <_printf_common+0xb2>
 800357c:	2301      	movs	r3, #1
 800357e:	4652      	mov	r2, sl
 8003580:	4641      	mov	r1, r8
 8003582:	4638      	mov	r0, r7
 8003584:	47c8      	blx	r9
 8003586:	3001      	adds	r0, #1
 8003588:	d103      	bne.n	8003592 <_printf_common+0xb6>
 800358a:	f04f 30ff 	mov.w	r0, #4294967295
 800358e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003592:	3501      	adds	r5, #1
 8003594:	e7c1      	b.n	800351a <_printf_common+0x3e>
 8003596:	2030      	movs	r0, #48	@ 0x30
 8003598:	18e1      	adds	r1, r4, r3
 800359a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80035a4:	4422      	add	r2, r4
 80035a6:	3302      	adds	r3, #2
 80035a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80035ac:	e7c2      	b.n	8003534 <_printf_common+0x58>
 80035ae:	2301      	movs	r3, #1
 80035b0:	4622      	mov	r2, r4
 80035b2:	4641      	mov	r1, r8
 80035b4:	4638      	mov	r0, r7
 80035b6:	47c8      	blx	r9
 80035b8:	3001      	adds	r0, #1
 80035ba:	d0e6      	beq.n	800358a <_printf_common+0xae>
 80035bc:	3601      	adds	r6, #1
 80035be:	e7d9      	b.n	8003574 <_printf_common+0x98>

080035c0 <_printf_i>:
 80035c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035c4:	7e0f      	ldrb	r7, [r1, #24]
 80035c6:	4691      	mov	r9, r2
 80035c8:	2f78      	cmp	r7, #120	@ 0x78
 80035ca:	4680      	mov	r8, r0
 80035cc:	460c      	mov	r4, r1
 80035ce:	469a      	mov	sl, r3
 80035d0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035d6:	d807      	bhi.n	80035e8 <_printf_i+0x28>
 80035d8:	2f62      	cmp	r7, #98	@ 0x62
 80035da:	d80a      	bhi.n	80035f2 <_printf_i+0x32>
 80035dc:	2f00      	cmp	r7, #0
 80035de:	f000 80d3 	beq.w	8003788 <_printf_i+0x1c8>
 80035e2:	2f58      	cmp	r7, #88	@ 0x58
 80035e4:	f000 80ba 	beq.w	800375c <_printf_i+0x19c>
 80035e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035f0:	e03a      	b.n	8003668 <_printf_i+0xa8>
 80035f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035f6:	2b15      	cmp	r3, #21
 80035f8:	d8f6      	bhi.n	80035e8 <_printf_i+0x28>
 80035fa:	a101      	add	r1, pc, #4	@ (adr r1, 8003600 <_printf_i+0x40>)
 80035fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003600:	08003659 	.word	0x08003659
 8003604:	0800366d 	.word	0x0800366d
 8003608:	080035e9 	.word	0x080035e9
 800360c:	080035e9 	.word	0x080035e9
 8003610:	080035e9 	.word	0x080035e9
 8003614:	080035e9 	.word	0x080035e9
 8003618:	0800366d 	.word	0x0800366d
 800361c:	080035e9 	.word	0x080035e9
 8003620:	080035e9 	.word	0x080035e9
 8003624:	080035e9 	.word	0x080035e9
 8003628:	080035e9 	.word	0x080035e9
 800362c:	0800376f 	.word	0x0800376f
 8003630:	08003697 	.word	0x08003697
 8003634:	08003729 	.word	0x08003729
 8003638:	080035e9 	.word	0x080035e9
 800363c:	080035e9 	.word	0x080035e9
 8003640:	08003791 	.word	0x08003791
 8003644:	080035e9 	.word	0x080035e9
 8003648:	08003697 	.word	0x08003697
 800364c:	080035e9 	.word	0x080035e9
 8003650:	080035e9 	.word	0x080035e9
 8003654:	08003731 	.word	0x08003731
 8003658:	6833      	ldr	r3, [r6, #0]
 800365a:	1d1a      	adds	r2, r3, #4
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	6032      	str	r2, [r6, #0]
 8003660:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003664:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003668:	2301      	movs	r3, #1
 800366a:	e09e      	b.n	80037aa <_printf_i+0x1ea>
 800366c:	6833      	ldr	r3, [r6, #0]
 800366e:	6820      	ldr	r0, [r4, #0]
 8003670:	1d19      	adds	r1, r3, #4
 8003672:	6031      	str	r1, [r6, #0]
 8003674:	0606      	lsls	r6, r0, #24
 8003676:	d501      	bpl.n	800367c <_printf_i+0xbc>
 8003678:	681d      	ldr	r5, [r3, #0]
 800367a:	e003      	b.n	8003684 <_printf_i+0xc4>
 800367c:	0645      	lsls	r5, r0, #25
 800367e:	d5fb      	bpl.n	8003678 <_printf_i+0xb8>
 8003680:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003684:	2d00      	cmp	r5, #0
 8003686:	da03      	bge.n	8003690 <_printf_i+0xd0>
 8003688:	232d      	movs	r3, #45	@ 0x2d
 800368a:	426d      	negs	r5, r5
 800368c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003690:	230a      	movs	r3, #10
 8003692:	4859      	ldr	r0, [pc, #356]	@ (80037f8 <_printf_i+0x238>)
 8003694:	e011      	b.n	80036ba <_printf_i+0xfa>
 8003696:	6821      	ldr	r1, [r4, #0]
 8003698:	6833      	ldr	r3, [r6, #0]
 800369a:	0608      	lsls	r0, r1, #24
 800369c:	f853 5b04 	ldr.w	r5, [r3], #4
 80036a0:	d402      	bmi.n	80036a8 <_printf_i+0xe8>
 80036a2:	0649      	lsls	r1, r1, #25
 80036a4:	bf48      	it	mi
 80036a6:	b2ad      	uxthmi	r5, r5
 80036a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80036aa:	6033      	str	r3, [r6, #0]
 80036ac:	bf14      	ite	ne
 80036ae:	230a      	movne	r3, #10
 80036b0:	2308      	moveq	r3, #8
 80036b2:	4851      	ldr	r0, [pc, #324]	@ (80037f8 <_printf_i+0x238>)
 80036b4:	2100      	movs	r1, #0
 80036b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036ba:	6866      	ldr	r6, [r4, #4]
 80036bc:	2e00      	cmp	r6, #0
 80036be:	bfa8      	it	ge
 80036c0:	6821      	ldrge	r1, [r4, #0]
 80036c2:	60a6      	str	r6, [r4, #8]
 80036c4:	bfa4      	itt	ge
 80036c6:	f021 0104 	bicge.w	r1, r1, #4
 80036ca:	6021      	strge	r1, [r4, #0]
 80036cc:	b90d      	cbnz	r5, 80036d2 <_printf_i+0x112>
 80036ce:	2e00      	cmp	r6, #0
 80036d0:	d04b      	beq.n	800376a <_printf_i+0x1aa>
 80036d2:	4616      	mov	r6, r2
 80036d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80036d8:	fb03 5711 	mls	r7, r3, r1, r5
 80036dc:	5dc7      	ldrb	r7, [r0, r7]
 80036de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036e2:	462f      	mov	r7, r5
 80036e4:	42bb      	cmp	r3, r7
 80036e6:	460d      	mov	r5, r1
 80036e8:	d9f4      	bls.n	80036d4 <_printf_i+0x114>
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d10b      	bne.n	8003706 <_printf_i+0x146>
 80036ee:	6823      	ldr	r3, [r4, #0]
 80036f0:	07df      	lsls	r7, r3, #31
 80036f2:	d508      	bpl.n	8003706 <_printf_i+0x146>
 80036f4:	6923      	ldr	r3, [r4, #16]
 80036f6:	6861      	ldr	r1, [r4, #4]
 80036f8:	4299      	cmp	r1, r3
 80036fa:	bfde      	ittt	le
 80036fc:	2330      	movle	r3, #48	@ 0x30
 80036fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003702:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003706:	1b92      	subs	r2, r2, r6
 8003708:	6122      	str	r2, [r4, #16]
 800370a:	464b      	mov	r3, r9
 800370c:	4621      	mov	r1, r4
 800370e:	4640      	mov	r0, r8
 8003710:	f8cd a000 	str.w	sl, [sp]
 8003714:	aa03      	add	r2, sp, #12
 8003716:	f7ff fee1 	bl	80034dc <_printf_common>
 800371a:	3001      	adds	r0, #1
 800371c:	d14a      	bne.n	80037b4 <_printf_i+0x1f4>
 800371e:	f04f 30ff 	mov.w	r0, #4294967295
 8003722:	b004      	add	sp, #16
 8003724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003728:	6823      	ldr	r3, [r4, #0]
 800372a:	f043 0320 	orr.w	r3, r3, #32
 800372e:	6023      	str	r3, [r4, #0]
 8003730:	2778      	movs	r7, #120	@ 0x78
 8003732:	4832      	ldr	r0, [pc, #200]	@ (80037fc <_printf_i+0x23c>)
 8003734:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	6831      	ldr	r1, [r6, #0]
 800373c:	061f      	lsls	r7, r3, #24
 800373e:	f851 5b04 	ldr.w	r5, [r1], #4
 8003742:	d402      	bmi.n	800374a <_printf_i+0x18a>
 8003744:	065f      	lsls	r7, r3, #25
 8003746:	bf48      	it	mi
 8003748:	b2ad      	uxthmi	r5, r5
 800374a:	6031      	str	r1, [r6, #0]
 800374c:	07d9      	lsls	r1, r3, #31
 800374e:	bf44      	itt	mi
 8003750:	f043 0320 	orrmi.w	r3, r3, #32
 8003754:	6023      	strmi	r3, [r4, #0]
 8003756:	b11d      	cbz	r5, 8003760 <_printf_i+0x1a0>
 8003758:	2310      	movs	r3, #16
 800375a:	e7ab      	b.n	80036b4 <_printf_i+0xf4>
 800375c:	4826      	ldr	r0, [pc, #152]	@ (80037f8 <_printf_i+0x238>)
 800375e:	e7e9      	b.n	8003734 <_printf_i+0x174>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	f023 0320 	bic.w	r3, r3, #32
 8003766:	6023      	str	r3, [r4, #0]
 8003768:	e7f6      	b.n	8003758 <_printf_i+0x198>
 800376a:	4616      	mov	r6, r2
 800376c:	e7bd      	b.n	80036ea <_printf_i+0x12a>
 800376e:	6833      	ldr	r3, [r6, #0]
 8003770:	6825      	ldr	r5, [r4, #0]
 8003772:	1d18      	adds	r0, r3, #4
 8003774:	6961      	ldr	r1, [r4, #20]
 8003776:	6030      	str	r0, [r6, #0]
 8003778:	062e      	lsls	r6, r5, #24
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	d501      	bpl.n	8003782 <_printf_i+0x1c2>
 800377e:	6019      	str	r1, [r3, #0]
 8003780:	e002      	b.n	8003788 <_printf_i+0x1c8>
 8003782:	0668      	lsls	r0, r5, #25
 8003784:	d5fb      	bpl.n	800377e <_printf_i+0x1be>
 8003786:	8019      	strh	r1, [r3, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	4616      	mov	r6, r2
 800378c:	6123      	str	r3, [r4, #16]
 800378e:	e7bc      	b.n	800370a <_printf_i+0x14a>
 8003790:	6833      	ldr	r3, [r6, #0]
 8003792:	2100      	movs	r1, #0
 8003794:	1d1a      	adds	r2, r3, #4
 8003796:	6032      	str	r2, [r6, #0]
 8003798:	681e      	ldr	r6, [r3, #0]
 800379a:	6862      	ldr	r2, [r4, #4]
 800379c:	4630      	mov	r0, r6
 800379e:	f000 f859 	bl	8003854 <memchr>
 80037a2:	b108      	cbz	r0, 80037a8 <_printf_i+0x1e8>
 80037a4:	1b80      	subs	r0, r0, r6
 80037a6:	6060      	str	r0, [r4, #4]
 80037a8:	6863      	ldr	r3, [r4, #4]
 80037aa:	6123      	str	r3, [r4, #16]
 80037ac:	2300      	movs	r3, #0
 80037ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80037b2:	e7aa      	b.n	800370a <_printf_i+0x14a>
 80037b4:	4632      	mov	r2, r6
 80037b6:	4649      	mov	r1, r9
 80037b8:	4640      	mov	r0, r8
 80037ba:	6923      	ldr	r3, [r4, #16]
 80037bc:	47d0      	blx	sl
 80037be:	3001      	adds	r0, #1
 80037c0:	d0ad      	beq.n	800371e <_printf_i+0x15e>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	079b      	lsls	r3, r3, #30
 80037c6:	d413      	bmi.n	80037f0 <_printf_i+0x230>
 80037c8:	68e0      	ldr	r0, [r4, #12]
 80037ca:	9b03      	ldr	r3, [sp, #12]
 80037cc:	4298      	cmp	r0, r3
 80037ce:	bfb8      	it	lt
 80037d0:	4618      	movlt	r0, r3
 80037d2:	e7a6      	b.n	8003722 <_printf_i+0x162>
 80037d4:	2301      	movs	r3, #1
 80037d6:	4632      	mov	r2, r6
 80037d8:	4649      	mov	r1, r9
 80037da:	4640      	mov	r0, r8
 80037dc:	47d0      	blx	sl
 80037de:	3001      	adds	r0, #1
 80037e0:	d09d      	beq.n	800371e <_printf_i+0x15e>
 80037e2:	3501      	adds	r5, #1
 80037e4:	68e3      	ldr	r3, [r4, #12]
 80037e6:	9903      	ldr	r1, [sp, #12]
 80037e8:	1a5b      	subs	r3, r3, r1
 80037ea:	42ab      	cmp	r3, r5
 80037ec:	dcf2      	bgt.n	80037d4 <_printf_i+0x214>
 80037ee:	e7eb      	b.n	80037c8 <_printf_i+0x208>
 80037f0:	2500      	movs	r5, #0
 80037f2:	f104 0619 	add.w	r6, r4, #25
 80037f6:	e7f5      	b.n	80037e4 <_printf_i+0x224>
 80037f8:	08003993 	.word	0x08003993
 80037fc:	080039a4 	.word	0x080039a4

08003800 <memmove>:
 8003800:	4288      	cmp	r0, r1
 8003802:	b510      	push	{r4, lr}
 8003804:	eb01 0402 	add.w	r4, r1, r2
 8003808:	d902      	bls.n	8003810 <memmove+0x10>
 800380a:	4284      	cmp	r4, r0
 800380c:	4623      	mov	r3, r4
 800380e:	d807      	bhi.n	8003820 <memmove+0x20>
 8003810:	1e43      	subs	r3, r0, #1
 8003812:	42a1      	cmp	r1, r4
 8003814:	d008      	beq.n	8003828 <memmove+0x28>
 8003816:	f811 2b01 	ldrb.w	r2, [r1], #1
 800381a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800381e:	e7f8      	b.n	8003812 <memmove+0x12>
 8003820:	4601      	mov	r1, r0
 8003822:	4402      	add	r2, r0
 8003824:	428a      	cmp	r2, r1
 8003826:	d100      	bne.n	800382a <memmove+0x2a>
 8003828:	bd10      	pop	{r4, pc}
 800382a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800382e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003832:	e7f7      	b.n	8003824 <memmove+0x24>

08003834 <_sbrk_r>:
 8003834:	b538      	push	{r3, r4, r5, lr}
 8003836:	2300      	movs	r3, #0
 8003838:	4d05      	ldr	r5, [pc, #20]	@ (8003850 <_sbrk_r+0x1c>)
 800383a:	4604      	mov	r4, r0
 800383c:	4608      	mov	r0, r1
 800383e:	602b      	str	r3, [r5, #0]
 8003840:	f7fd fb2e 	bl	8000ea0 <_sbrk>
 8003844:	1c43      	adds	r3, r0, #1
 8003846:	d102      	bne.n	800384e <_sbrk_r+0x1a>
 8003848:	682b      	ldr	r3, [r5, #0]
 800384a:	b103      	cbz	r3, 800384e <_sbrk_r+0x1a>
 800384c:	6023      	str	r3, [r4, #0]
 800384e:	bd38      	pop	{r3, r4, r5, pc}
 8003850:	200002f0 	.word	0x200002f0

08003854 <memchr>:
 8003854:	4603      	mov	r3, r0
 8003856:	b510      	push	{r4, lr}
 8003858:	b2c9      	uxtb	r1, r1
 800385a:	4402      	add	r2, r0
 800385c:	4293      	cmp	r3, r2
 800385e:	4618      	mov	r0, r3
 8003860:	d101      	bne.n	8003866 <memchr+0x12>
 8003862:	2000      	movs	r0, #0
 8003864:	e003      	b.n	800386e <memchr+0x1a>
 8003866:	7804      	ldrb	r4, [r0, #0]
 8003868:	3301      	adds	r3, #1
 800386a:	428c      	cmp	r4, r1
 800386c:	d1f6      	bne.n	800385c <memchr+0x8>
 800386e:	bd10      	pop	{r4, pc}

08003870 <memcpy>:
 8003870:	440a      	add	r2, r1
 8003872:	4291      	cmp	r1, r2
 8003874:	f100 33ff 	add.w	r3, r0, #4294967295
 8003878:	d100      	bne.n	800387c <memcpy+0xc>
 800387a:	4770      	bx	lr
 800387c:	b510      	push	{r4, lr}
 800387e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003882:	4291      	cmp	r1, r2
 8003884:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003888:	d1f9      	bne.n	800387e <memcpy+0xe>
 800388a:	bd10      	pop	{r4, pc}

0800388c <_realloc_r>:
 800388c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003890:	4680      	mov	r8, r0
 8003892:	4615      	mov	r5, r2
 8003894:	460c      	mov	r4, r1
 8003896:	b921      	cbnz	r1, 80038a2 <_realloc_r+0x16>
 8003898:	4611      	mov	r1, r2
 800389a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800389e:	f7ff bc39 	b.w	8003114 <_malloc_r>
 80038a2:	b92a      	cbnz	r2, 80038b0 <_realloc_r+0x24>
 80038a4:	f7ff fbcc 	bl	8003040 <_free_r>
 80038a8:	2400      	movs	r4, #0
 80038aa:	4620      	mov	r0, r4
 80038ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038b0:	f000 f81a 	bl	80038e8 <_malloc_usable_size_r>
 80038b4:	4285      	cmp	r5, r0
 80038b6:	4606      	mov	r6, r0
 80038b8:	d802      	bhi.n	80038c0 <_realloc_r+0x34>
 80038ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80038be:	d8f4      	bhi.n	80038aa <_realloc_r+0x1e>
 80038c0:	4629      	mov	r1, r5
 80038c2:	4640      	mov	r0, r8
 80038c4:	f7ff fc26 	bl	8003114 <_malloc_r>
 80038c8:	4607      	mov	r7, r0
 80038ca:	2800      	cmp	r0, #0
 80038cc:	d0ec      	beq.n	80038a8 <_realloc_r+0x1c>
 80038ce:	42b5      	cmp	r5, r6
 80038d0:	462a      	mov	r2, r5
 80038d2:	4621      	mov	r1, r4
 80038d4:	bf28      	it	cs
 80038d6:	4632      	movcs	r2, r6
 80038d8:	f7ff ffca 	bl	8003870 <memcpy>
 80038dc:	4621      	mov	r1, r4
 80038de:	4640      	mov	r0, r8
 80038e0:	f7ff fbae 	bl	8003040 <_free_r>
 80038e4:	463c      	mov	r4, r7
 80038e6:	e7e0      	b.n	80038aa <_realloc_r+0x1e>

080038e8 <_malloc_usable_size_r>:
 80038e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80038ec:	1f18      	subs	r0, r3, #4
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	bfbc      	itt	lt
 80038f2:	580b      	ldrlt	r3, [r1, r0]
 80038f4:	18c0      	addlt	r0, r0, r3
 80038f6:	4770      	bx	lr

080038f8 <_init>:
 80038f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038fa:	bf00      	nop
 80038fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038fe:	bc08      	pop	{r3}
 8003900:	469e      	mov	lr, r3
 8003902:	4770      	bx	lr

08003904 <_fini>:
 8003904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003906:	bf00      	nop
 8003908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800390a:	bc08      	pop	{r3}
 800390c:	469e      	mov	lr, r3
 800390e:	4770      	bx	lr
