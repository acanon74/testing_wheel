
multisteering-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a18  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003b24  08003b24  00004b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba8  08003ba8  00005060  2**0
                  CONTENTS
  4 .ARM          00000008  08003ba8  08003ba8  00004ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bb0  08003bb0  00005060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bb0  08003bb0  00004bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bb4  08003bb4  00004bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08003bb8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  20000060  08003c18  00005060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08003c18  00005300  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008e5c  00000000  00000000  00005089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001981  00000000  00000000  0000dee5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0000f868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ea  00000000  00000000  00010030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001764e  00000000  00000000  0001061a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009b3e  00000000  00000000  00027c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084c89  00000000  00000000  000317a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b642f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023c4  00000000  00000000  000b6474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000b8838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000060 	.word	0x20000060
 8000128:	00000000 	.word	0x00000000
 800012c:	08003b0c 	.word	0x08003b0c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000064 	.word	0x20000064
 8000148:	08003b0c 	.word	0x08003b0c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <nextion_send>:
#include "stm32f1xx_hal.h"
extern UART_HandleTypeDef huart1;

char ENDMSG[3] = {255, 255, 255};

void nextion_send(char* cmd){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
	   HAL_UART_Transmit (&huart1, (uint8_t*) cmd, strlen (cmd), 50);
 8000164:	6878      	ldr	r0, [r7, #4]
 8000166:	f7ff fff1 	bl	800014c <strlen>
 800016a:	4603      	mov	r3, r0
 800016c:	b29a      	uxth	r2, r3
 800016e:	2332      	movs	r3, #50	@ 0x32
 8000170:	6879      	ldr	r1, [r7, #4]
 8000172:	4806      	ldr	r0, [pc, #24]	@ (800018c <nextion_send+0x30>)
 8000174:	f002 fe46 	bl	8002e04 <HAL_UART_Transmit>
	   HAL_UART_Transmit (&huart1, (uint8_t*) &ENDMSG, 3, 50);
 8000178:	2332      	movs	r3, #50	@ 0x32
 800017a:	2203      	movs	r2, #3
 800017c:	4904      	ldr	r1, [pc, #16]	@ (8000190 <nextion_send+0x34>)
 800017e:	4803      	ldr	r0, [pc, #12]	@ (800018c <nextion_send+0x30>)
 8000180:	f002 fe40 	bl	8002e04 <HAL_UART_Transmit>
}
 8000184:	bf00      	nop
 8000186:	3708      	adds	r7, #8
 8000188:	46bd      	mov	sp, r7
 800018a:	bd80      	pop	{r7, pc}
 800018c:	200000a4 	.word	0x200000a4
 8000190:	20000000 	.word	0x20000000

08000194 <HAL_CAN_RxFifo0MsgPendingCallback>:
void data_send_handler(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000194:	b580      	push	{r7, lr}
 8000196:	b084      	sub	sp, #16
 8000198:	af00      	add	r7, sp, #0
 800019a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData.buff)
 800019c:	4b39      	ldr	r3, [pc, #228]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800019e:	4a3a      	ldr	r2, [pc, #232]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80001a0:	2100      	movs	r1, #0
 80001a2:	6878      	ldr	r0, [r7, #4]
 80001a4:	f001 fb79 	bl	800189a <HAL_CAN_GetRxMessage>
 80001a8:	4603      	mov	r3, r0
 80001aa:	2b00      	cmp	r3, #0
 80001ac:	d166      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
			== HAL_OK) {
		if (RxHeader.StdId == 0x600) {
 80001ae:	4b36      	ldr	r3, [pc, #216]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80001b0:	681b      	ldr	r3, [r3, #0]
 80001b2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80001b6:	d110      	bne.n	80001da <HAL_CAN_RxFifo0MsgPendingCallback+0x46>
			for (uint8_t i = 0; i < 7; i++) {
 80001b8:	2300      	movs	r3, #0
 80001ba:	73fb      	strb	r3, [r7, #15]
 80001bc:	e00a      	b.n	80001d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
				RxData.x600[i] = RxData.buff[i];
 80001be:	7bfa      	ldrb	r2, [r7, #15]
 80001c0:	7bfb      	ldrb	r3, [r7, #15]
 80001c2:	4930      	ldr	r1, [pc, #192]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001c4:	5c89      	ldrb	r1, [r1, r2]
 80001c6:	4a2f      	ldr	r2, [pc, #188]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001c8:	4413      	add	r3, r2
 80001ca:	460a      	mov	r2, r1
 80001cc:	721a      	strb	r2, [r3, #8]
			for (uint8_t i = 0; i < 7; i++) {
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	3301      	adds	r3, #1
 80001d2:	73fb      	strb	r3, [r7, #15]
 80001d4:	7bfb      	ldrb	r3, [r7, #15]
 80001d6:	2b06      	cmp	r3, #6
 80001d8:	d9f1      	bls.n	80001be <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
			}
		}
		if (RxHeader.StdId == 0x601) {
 80001da:	4b2b      	ldr	r3, [pc, #172]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f240 6201 	movw	r2, #1537	@ 0x601
 80001e2:	4293      	cmp	r3, r2
 80001e4:	d110      	bne.n	8000208 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
			for (uint8_t i = 0; i < 7; i++) {
 80001e6:	2300      	movs	r3, #0
 80001e8:	73bb      	strb	r3, [r7, #14]
 80001ea:	e00a      	b.n	8000202 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
				RxData.x601[i] = RxData.buff[i];
 80001ec:	7bba      	ldrb	r2, [r7, #14]
 80001ee:	7bbb      	ldrb	r3, [r7, #14]
 80001f0:	4924      	ldr	r1, [pc, #144]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001f2:	5c89      	ldrb	r1, [r1, r2]
 80001f4:	4a23      	ldr	r2, [pc, #140]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80001f6:	4413      	add	r3, r2
 80001f8:	460a      	mov	r2, r1
 80001fa:	741a      	strb	r2, [r3, #16]
			for (uint8_t i = 0; i < 7; i++) {
 80001fc:	7bbb      	ldrb	r3, [r7, #14]
 80001fe:	3301      	adds	r3, #1
 8000200:	73bb      	strb	r3, [r7, #14]
 8000202:	7bbb      	ldrb	r3, [r7, #14]
 8000204:	2b06      	cmp	r3, #6
 8000206:	d9f1      	bls.n	80001ec <HAL_CAN_RxFifo0MsgPendingCallback+0x58>
			}
		}
		if (RxHeader.StdId == 0x602) {
 8000208:	4b1f      	ldr	r3, [pc, #124]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f240 6202 	movw	r2, #1538	@ 0x602
 8000210:	4293      	cmp	r3, r2
 8000212:	d110      	bne.n	8000236 <HAL_CAN_RxFifo0MsgPendingCallback+0xa2>
			for (uint8_t i = 0; i < 7; i++) {
 8000214:	2300      	movs	r3, #0
 8000216:	737b      	strb	r3, [r7, #13]
 8000218:	e00a      	b.n	8000230 <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
				RxData.x602[i] = RxData.buff[i];
 800021a:	7b7a      	ldrb	r2, [r7, #13]
 800021c:	7b7b      	ldrb	r3, [r7, #13]
 800021e:	4919      	ldr	r1, [pc, #100]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000220:	5c89      	ldrb	r1, [r1, r2]
 8000222:	4a18      	ldr	r2, [pc, #96]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000224:	4413      	add	r3, r2
 8000226:	460a      	mov	r2, r1
 8000228:	761a      	strb	r2, [r3, #24]
			for (uint8_t i = 0; i < 7; i++) {
 800022a:	7b7b      	ldrb	r3, [r7, #13]
 800022c:	3301      	adds	r3, #1
 800022e:	737b      	strb	r3, [r7, #13]
 8000230:	7b7b      	ldrb	r3, [r7, #13]
 8000232:	2b06      	cmp	r3, #6
 8000234:	d9f1      	bls.n	800021a <HAL_CAN_RxFifo0MsgPendingCallback+0x86>
			}
		}
		if (RxHeader.StdId == 0x604) {
 8000236:	4b14      	ldr	r3, [pc, #80]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f240 6204 	movw	r2, #1540	@ 0x604
 800023e:	4293      	cmp	r3, r2
 8000240:	d111      	bne.n	8000266 <HAL_CAN_RxFifo0MsgPendingCallback+0xd2>
			for (uint8_t i = 0; i < 7; i++) {
 8000242:	2300      	movs	r3, #0
 8000244:	733b      	strb	r3, [r7, #12]
 8000246:	e00b      	b.n	8000260 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>
				RxData.x604[i] = RxData.buff[i];
 8000248:	7b3a      	ldrb	r2, [r7, #12]
 800024a:	7b3b      	ldrb	r3, [r7, #12]
 800024c:	490d      	ldr	r1, [pc, #52]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 800024e:	5c89      	ldrb	r1, [r1, r2]
 8000250:	4a0c      	ldr	r2, [pc, #48]	@ (8000284 <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 8000252:	4413      	add	r3, r2
 8000254:	460a      	mov	r2, r1
 8000256:	f883 2020 	strb.w	r2, [r3, #32]
			for (uint8_t i = 0; i < 7; i++) {
 800025a:	7b3b      	ldrb	r3, [r7, #12]
 800025c:	3301      	adds	r3, #1
 800025e:	733b      	strb	r3, [r7, #12]
 8000260:	7b3b      	ldrb	r3, [r7, #12]
 8000262:	2b06      	cmp	r3, #6
 8000264:	d9f0      	bls.n	8000248 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
			}
		}
#if DEBUG == 1
		if (RxHeader.StdId == 0x642) {
 8000266:	4b08      	ldr	r3, [pc, #32]	@ (8000288 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	f240 6242 	movw	r2, #1602	@ 0x642
 800026e:	4293      	cmp	r3, r2
 8000270:	d104      	bne.n	800027c <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000272:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000276:	4805      	ldr	r0, [pc, #20]	@ (800028c <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 8000278:	f002 f94b 	bl	8002512 <HAL_GPIO_TogglePin>
		}
#endif
	}
}
 800027c:	bf00      	nop
 800027e:	3710      	adds	r7, #16
 8000280:	46bd      	mov	sp, r7
 8000282:	bd80      	pop	{r7, pc}
 8000284:	20000130 	.word	0x20000130
 8000288:	20000104 	.word	0x20000104
 800028c:	40011000 	.word	0x40011000

08000290 <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan) {
 8000290:	b580      	push	{r7, lr}
 8000292:	b082      	sub	sp, #8
 8000294:	af00      	add	r7, sp, #0
 8000296:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8000298:	f000 fdca 	bl	8000e30 <Error_Handler>
}
 800029c:	bf00      	nop
 800029e:	3708      	adds	r7, #8
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}

080002a4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002a8:	f000 ff66 	bl	8001178 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002ac:	f000 f810 	bl	80002d0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002b0:	f000 f8d4 	bl	800045c <MX_GPIO_Init>
	MX_CAN_Init();
 80002b4:	f000 f852 	bl	800035c <MX_CAN_Init>
	MX_USART1_UART_Init();
 80002b8:	f000 f8a6 	bl	8000408 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	startup();
 80002bc:	f000 fd62 	bl	8000d84 <startup>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		data_update_handler();
 80002c0:	f000 fcb6 	bl	8000c30 <data_update_handler>
		data_send_handler();
 80002c4:	f000 fd32 	bl	8000d2c <data_send_handler>
		button_handler();
 80002c8:	f000 f966 	bl	8000598 <button_handler>
		data_update_handler();
 80002cc:	bf00      	nop
 80002ce:	e7f7      	b.n	80002c0 <main+0x1c>

080002d0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b090      	sub	sp, #64	@ 0x40
 80002d4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80002d6:	f107 0318 	add.w	r3, r7, #24
 80002da:	2228      	movs	r2, #40	@ 0x28
 80002dc:	2100      	movs	r1, #0
 80002de:	4618      	mov	r0, r3
 80002e0:	f002 ff84 	bl	80031ec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80002e4:	1d3b      	adds	r3, r7, #4
 80002e6:	2200      	movs	r2, #0
 80002e8:	601a      	str	r2, [r3, #0]
 80002ea:	605a      	str	r2, [r3, #4]
 80002ec:	609a      	str	r2, [r3, #8]
 80002ee:	60da      	str	r2, [r3, #12]
 80002f0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002f2:	2301      	movs	r3, #1
 80002f4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002fa:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002fc:	2300      	movs	r3, #0
 80002fe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	2301      	movs	r3, #1
 8000302:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000304:	2302      	movs	r3, #2
 8000306:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000308:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800030c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 800030e:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 8000312:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000314:	f107 0318 	add.w	r3, r7, #24
 8000318:	4618      	mov	r0, r3
 800031a:	f002 f913 	bl	8002544 <HAL_RCC_OscConfig>
 800031e:	4603      	mov	r3, r0
 8000320:	2b00      	cmp	r3, #0
 8000322:	d001      	beq.n	8000328 <SystemClock_Config+0x58>
		Error_Handler();
 8000324:	f000 fd84 	bl	8000e30 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000328:	230f      	movs	r3, #15
 800032a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800032c:	2302      	movs	r3, #2
 800032e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	2300      	movs	r3, #0
 8000332:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000334:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000338:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800033a:	2300      	movs	r3, #0
 800033c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800033e:	1d3b      	adds	r3, r7, #4
 8000340:	2102      	movs	r1, #2
 8000342:	4618      	mov	r0, r3
 8000344:	f002 fb80 	bl	8002a48 <HAL_RCC_ClockConfig>
 8000348:	4603      	mov	r3, r0
 800034a:	2b00      	cmp	r3, #0
 800034c:	d001      	beq.n	8000352 <SystemClock_Config+0x82>
		Error_Handler();
 800034e:	f000 fd6f 	bl	8000e30 <Error_Handler>
	}
}
 8000352:	bf00      	nop
 8000354:	3740      	adds	r7, #64	@ 0x40
 8000356:	46bd      	mov	sp, r7
 8000358:	bd80      	pop	{r7, pc}
	...

0800035c <MX_CAN_Init>:
/**
 * @brief CAN Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN_Init(void) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b08a      	sub	sp, #40	@ 0x28
 8000360:	af00      	add	r7, sp, #0
	/* USER CODE END CAN_Init 0 */

	/* USER CODE BEGIN CAN_Init 1 */

	/* USER CODE END CAN_Init 1 */
	hcan.Instance = CAN1;
 8000362:	4b27      	ldr	r3, [pc, #156]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000364:	4a27      	ldr	r2, [pc, #156]	@ (8000404 <MX_CAN_Init+0xa8>)
 8000366:	601a      	str	r2, [r3, #0]
	hcan.Init.Prescaler = 4; // TJA1050 (CHN version cannot perform at 1MBit, only at 500kBit)
 8000368:	4b25      	ldr	r3, [pc, #148]	@ (8000400 <MX_CAN_Init+0xa4>)
 800036a:	2204      	movs	r2, #4
 800036c:	605a      	str	r2, [r3, #4]
	hcan.Init.Mode = CAN_MODE_LOOPBACK;
 800036e:	4b24      	ldr	r3, [pc, #144]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000370:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000374:	609a      	str	r2, [r3, #8]
	hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000376:	4b22      	ldr	r3, [pc, #136]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000378:	2200      	movs	r2, #0
 800037a:	60da      	str	r2, [r3, #12]
	hcan.Init.TimeSeg1 = CAN_BS1_13TQ;
 800037c:	4b20      	ldr	r3, [pc, #128]	@ (8000400 <MX_CAN_Init+0xa4>)
 800037e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000382:	611a      	str	r2, [r3, #16]
	hcan.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000384:	4b1e      	ldr	r3, [pc, #120]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000386:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800038a:	615a      	str	r2, [r3, #20]
	hcan.Init.TimeTriggeredMode = DISABLE;
 800038c:	4b1c      	ldr	r3, [pc, #112]	@ (8000400 <MX_CAN_Init+0xa4>)
 800038e:	2200      	movs	r2, #0
 8000390:	761a      	strb	r2, [r3, #24]
	hcan.Init.AutoBusOff = DISABLE;
 8000392:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_CAN_Init+0xa4>)
 8000394:	2200      	movs	r2, #0
 8000396:	765a      	strb	r2, [r3, #25]
	hcan.Init.AutoWakeUp = DISABLE;
 8000398:	4b19      	ldr	r3, [pc, #100]	@ (8000400 <MX_CAN_Init+0xa4>)
 800039a:	2200      	movs	r2, #0
 800039c:	769a      	strb	r2, [r3, #26]
	hcan.Init.AutoRetransmission = DISABLE;
 800039e:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	76da      	strb	r2, [r3, #27]
	hcan.Init.ReceiveFifoLocked = DISABLE;
 80003a4:	4b16      	ldr	r3, [pc, #88]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	771a      	strb	r2, [r3, #28]
	hcan.Init.TransmitFifoPriority = ENABLE;
 80003aa:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan) != HAL_OK) {
 80003b0:	4813      	ldr	r0, [pc, #76]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003b2:	f000 ff67 	bl	8001284 <HAL_CAN_Init>
 80003b6:	4603      	mov	r3, r0
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d001      	beq.n	80003c0 <MX_CAN_Init+0x64>
		Error_Handler();
 80003bc:	f000 fd38 	bl	8000e30 <Error_Handler>
	}
	/* USER CODE BEGIN CAN_Init 2 */
	sFilterConfig.FilterBank = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80003c4:	2300      	movs	r3, #0
 80003c6:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80003c8:	2301      	movs	r3, #1
 80003ca:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 80003cc:	2300      	movs	r3, #0
 80003ce:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 80003d0:	2300      	movs	r3, #0
 80003d2:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 80003d4:	2300      	movs	r3, #0
 80003d6:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80003dc:	2300      	movs	r3, #0
 80003de:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 80003e0:	2301      	movs	r3, #1
 80003e2:	623b      	str	r3, [r7, #32]
	//sFilterConfig.SlaveStartFilterBank = 14;

	if (HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK) {
 80003e4:	463b      	mov	r3, r7
 80003e6:	4619      	mov	r1, r3
 80003e8:	4805      	ldr	r0, [pc, #20]	@ (8000400 <MX_CAN_Init+0xa4>)
 80003ea:	f001 f846 	bl	800147a <HAL_CAN_ConfigFilter>
 80003ee:	4603      	mov	r3, r0
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d001      	beq.n	80003f8 <MX_CAN_Init+0x9c>
		Error_Handler();
 80003f4:	f000 fd1c 	bl	8000e30 <Error_Handler>
	}
	/* USER CODE END CAN_Init 2 */

}
 80003f8:	bf00      	nop
 80003fa:	3728      	adds	r7, #40	@ 0x28
 80003fc:	46bd      	mov	sp, r7
 80003fe:	bd80      	pop	{r7, pc}
 8000400:	2000007c 	.word	0x2000007c
 8000404:	40006400 	.word	0x40006400

08000408 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800040c:	4b11      	ldr	r3, [pc, #68]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800040e:	4a12      	ldr	r2, [pc, #72]	@ (8000458 <MX_USART1_UART_Init+0x50>)
 8000410:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8000412:	4b10      	ldr	r3, [pc, #64]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000414:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000418:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041a:	4b0e      	ldr	r3, [pc, #56]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800041c:	2200      	movs	r2, #0
 800041e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8000420:	4b0c      	ldr	r3, [pc, #48]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000422:	2200      	movs	r2, #0
 8000424:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8000426:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800042c:	4b09      	ldr	r3, [pc, #36]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800042e:	220c      	movs	r2, #12
 8000430:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000432:	4b08      	ldr	r3, [pc, #32]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000434:	2200      	movs	r2, #0
 8000436:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000438:	4b06      	ldr	r3, [pc, #24]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 800043a:	2200      	movs	r2, #0
 800043c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 800043e:	4805      	ldr	r0, [pc, #20]	@ (8000454 <MX_USART1_UART_Init+0x4c>)
 8000440:	f002 fc90 	bl	8002d64 <HAL_UART_Init>
 8000444:	4603      	mov	r3, r0
 8000446:	2b00      	cmp	r3, #0
 8000448:	d001      	beq.n	800044e <MX_USART1_UART_Init+0x46>
		Error_Handler();
 800044a:	f000 fcf1 	bl	8000e30 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200000a4 	.word	0x200000a4
 8000458:	40013800 	.word	0x40013800

0800045c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800045c:	b580      	push	{r7, lr}
 800045e:	b088      	sub	sp, #32
 8000460:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000462:	f107 0310 	add.w	r3, r7, #16
 8000466:	2200      	movs	r2, #0
 8000468:	601a      	str	r2, [r3, #0]
 800046a:	605a      	str	r2, [r3, #4]
 800046c:	609a      	str	r2, [r3, #8]
 800046e:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000470:	4b44      	ldr	r3, [pc, #272]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000472:	699b      	ldr	r3, [r3, #24]
 8000474:	4a43      	ldr	r2, [pc, #268]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	6193      	str	r3, [r2, #24]
 800047c:	4b41      	ldr	r3, [pc, #260]	@ (8000584 <MX_GPIO_Init+0x128>)
 800047e:	699b      	ldr	r3, [r3, #24]
 8000480:	f003 0310 	and.w	r3, r3, #16
 8000484:	60fb      	str	r3, [r7, #12]
 8000486:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000488:	4b3e      	ldr	r3, [pc, #248]	@ (8000584 <MX_GPIO_Init+0x128>)
 800048a:	699b      	ldr	r3, [r3, #24]
 800048c:	4a3d      	ldr	r2, [pc, #244]	@ (8000584 <MX_GPIO_Init+0x128>)
 800048e:	f043 0320 	orr.w	r3, r3, #32
 8000492:	6193      	str	r3, [r2, #24]
 8000494:	4b3b      	ldr	r3, [pc, #236]	@ (8000584 <MX_GPIO_Init+0x128>)
 8000496:	699b      	ldr	r3, [r3, #24]
 8000498:	f003 0320 	and.w	r3, r3, #32
 800049c:	60bb      	str	r3, [r7, #8]
 800049e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80004a0:	4b38      	ldr	r3, [pc, #224]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004a2:	699b      	ldr	r3, [r3, #24]
 80004a4:	4a37      	ldr	r2, [pc, #220]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004a6:	f043 0308 	orr.w	r3, r3, #8
 80004aa:	6193      	str	r3, [r2, #24]
 80004ac:	4b35      	ldr	r3, [pc, #212]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004ae:	699b      	ldr	r3, [r3, #24]
 80004b0:	f003 0308 	and.w	r3, r3, #8
 80004b4:	607b      	str	r3, [r7, #4]
 80004b6:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004b8:	4b32      	ldr	r3, [pc, #200]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004ba:	699b      	ldr	r3, [r3, #24]
 80004bc:	4a31      	ldr	r2, [pc, #196]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004be:	f043 0304 	orr.w	r3, r3, #4
 80004c2:	6193      	str	r3, [r2, #24]
 80004c4:	4b2f      	ldr	r3, [pc, #188]	@ (8000584 <MX_GPIO_Init+0x128>)
 80004c6:	699b      	ldr	r3, [r3, #24]
 80004c8:	f003 0304 	and.w	r3, r3, #4
 80004cc:	603b      	str	r3, [r7, #0]
 80004ce:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004d6:	482c      	ldr	r0, [pc, #176]	@ (8000588 <MX_GPIO_Init+0x12c>)
 80004d8:	f002 f803 	bl	80024e2 <HAL_GPIO_WritePin>
#if DEBUG == 1
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin,
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80004e2:	482a      	ldr	r0, [pc, #168]	@ (800058c <MX_GPIO_Init+0x130>)
 80004e4:	f001 fffd 	bl	80024e2 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);
#endif
	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80004e8:	2200      	movs	r2, #0
 80004ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004ee:	4828      	ldr	r0, [pc, #160]	@ (8000590 <MX_GPIO_Init+0x134>)
 80004f0:	f001 fff7 	bl	80024e2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : CAN_LED_Pin */
	GPIO_InitStruct.Pin = CAN_LED_Pin;
 80004f4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80004f8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fa:	2301      	movs	r3, #1
 80004fc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fe:	2300      	movs	r3, #0
 8000500:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000502:	2302      	movs	r3, #2
 8000504:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAN_LED_GPIO_Port, &GPIO_InitStruct);
 8000506:	f107 0310 	add.w	r3, r7, #16
 800050a:	4619      	mov	r1, r3
 800050c:	481e      	ldr	r0, [pc, #120]	@ (8000588 <MX_GPIO_Init+0x12c>)
 800050e:	f001 fe4d 	bl	80021ac <HAL_GPIO_Init>
#if DEBUG == 1
	/*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin;
 8000512:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000516:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000518:	2301      	movs	r3, #1
 800051a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	2300      	movs	r3, #0
 800051e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000520:	2302      	movs	r3, #2
 8000522:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	4619      	mov	r1, r3
 800052a:	4818      	ldr	r0, [pc, #96]	@ (800058c <MX_GPIO_Init+0x130>)
 800052c:	f001 fe3e 	bl	80021ac <HAL_GPIO_Init>
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
	HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
#endif
#endif
	/*Configure GPIO pin : BTN_6_Pin */
	GPIO_InitStruct.Pin = BTN_6_Pin;
 8000530:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000534:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000536:	4b17      	ldr	r3, [pc, #92]	@ (8000594 <MX_GPIO_Init+0x138>)
 8000538:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800053a:	2300      	movs	r3, #0
 800053c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_6_GPIO_Port, &GPIO_InitStruct);
 800053e:	f107 0310 	add.w	r3, r7, #16
 8000542:	4619      	mov	r1, r3
 8000544:	4812      	ldr	r0, [pc, #72]	@ (8000590 <MX_GPIO_Init+0x134>)
 8000546:	f001 fe31 	bl	80021ac <HAL_GPIO_Init>

	/*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin | BTN_2_Pin | BTN_3_Pin | BTN_4_Pin;
 800054a:	2378      	movs	r3, #120	@ 0x78
 800054c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800054e:	4b11      	ldr	r3, [pc, #68]	@ (8000594 <MX_GPIO_Init+0x138>)
 8000550:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000552:	2302      	movs	r3, #2
 8000554:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000556:	f107 0310 	add.w	r3, r7, #16
 800055a:	4619      	mov	r1, r3
 800055c:	480b      	ldr	r0, [pc, #44]	@ (800058c <MX_GPIO_Init+0x130>)
 800055e:	f001 fe25 	bl	80021ac <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_5_Pin */
	GPIO_InitStruct.Pin = BTN_5_Pin;
 8000562:	2380      	movs	r3, #128	@ 0x80
 8000564:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000566:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <MX_GPIO_Init+0x138>)
 8000568:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056a:	2300      	movs	r3, #0
 800056c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(BTN_5_GPIO_Port, &GPIO_InitStruct);
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	4619      	mov	r1, r3
 8000574:	4805      	ldr	r0, [pc, #20]	@ (800058c <MX_GPIO_Init+0x130>)
 8000576:	f001 fe19 	bl	80021ac <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800057a:	bf00      	nop
 800057c:	3720      	adds	r7, #32
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40021000 	.word	0x40021000
 8000588:	40011000 	.word	0x40011000
 800058c:	40010c00 	.word	0x40010c00
 8000590:	40010800 	.word	0x40010800
 8000594:	10110000 	.word	0x10110000

08000598 <button_handler>:

/* USER CODE BEGIN 4 */
void button_handler() {
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
	static bool flag_btn2 = false;
	static bool flag_btn3 = false;
	static bool flag_btn4 = false;
	static bool flag_btn5 = false;
	static bool flag_btn6 = false;  // Some flags for buttons
	HAL_Delay(PILOT_FINGER_TAP_SPEED);
 800059c:	2096      	movs	r0, #150	@ 0x96
 800059e:	f000 fe4d 	bl	800123c <HAL_Delay>
	/* NEUTRAL GEAR BUTTON COMBINATION HANDLER */
	if (HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 80005a2:	2120      	movs	r1, #32
 80005a4:	48ab      	ldr	r0, [pc, #684]	@ (8000854 <button_handler+0x2bc>)
 80005a6:	f001 ff85 	bl	80024b4 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d059      	beq.n	8000664 <button_handler+0xcc>
			&& HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 80005b0:	2140      	movs	r1, #64	@ 0x40
 80005b2:	48a8      	ldr	r0, [pc, #672]	@ (8000854 <button_handler+0x2bc>)
 80005b4:	f001 ff7e 	bl	80024b4 <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d052      	beq.n	8000664 <button_handler+0xcc>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn3 && !flag_btn4) {
 80005be:	f000 fe33 	bl	8001228 <HAL_GetTick>
 80005c2:	4602      	mov	r2, r0
 80005c4:	4ba4      	ldr	r3, [pc, #656]	@ (8000858 <button_handler+0x2c0>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	1ad3      	subs	r3, r2, r3
 80005ca:	2b96      	cmp	r3, #150	@ 0x96
 80005cc:	d94a      	bls.n	8000664 <button_handler+0xcc>
 80005ce:	4ba3      	ldr	r3, [pc, #652]	@ (800085c <button_handler+0x2c4>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	f083 0301 	eor.w	r3, r3, #1
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d043      	beq.n	8000664 <button_handler+0xcc>
 80005dc:	4ba0      	ldr	r3, [pc, #640]	@ (8000860 <button_handler+0x2c8>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	f083 0301 	eor.w	r3, r3, #1
 80005e4:	b2db      	uxtb	r3, r3
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d03c      	beq.n	8000664 <button_handler+0xcc>
		flag_btn3 = !flag_btn3;
 80005ea:	4b9c      	ldr	r3, [pc, #624]	@ (800085c <button_handler+0x2c4>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	bf14      	ite	ne
 80005f2:	2301      	movne	r3, #1
 80005f4:	2300      	moveq	r3, #0
 80005f6:	b2db      	uxtb	r3, r3
 80005f8:	f083 0301 	eor.w	r3, r3, #1
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	f003 0301 	and.w	r3, r3, #1
 8000602:	b2da      	uxtb	r2, r3
 8000604:	4b95      	ldr	r3, [pc, #596]	@ (800085c <button_handler+0x2c4>)
 8000606:	701a      	strb	r2, [r3, #0]
		flag_btn4 = !flag_btn4;
 8000608:	4b95      	ldr	r3, [pc, #596]	@ (8000860 <button_handler+0x2c8>)
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	2b00      	cmp	r3, #0
 800060e:	bf14      	ite	ne
 8000610:	2301      	movne	r3, #1
 8000612:	2300      	moveq	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	f083 0301 	eor.w	r3, r3, #1
 800061a:	b2db      	uxtb	r3, r3
 800061c:	f003 0301 	and.w	r3, r3, #1
 8000620:	b2da      	uxtb	r2, r3
 8000622:	4b8f      	ldr	r3, [pc, #572]	@ (8000860 <button_handler+0x2c8>)
 8000624:	701a      	strb	r2, [r3, #0]
		msg_type = gear_neutral;
 8000626:	4b8f      	ldr	r3, [pc, #572]	@ (8000864 <button_handler+0x2cc>)
 8000628:	2204      	movs	r2, #4
 800062a:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 800062c:	4b8d      	ldr	r3, [pc, #564]	@ (8000864 <button_handler+0x2cc>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fa5b 	bl	8000aec <can_msg_handler>

		/* SEND CAN NEUTRAL GEAR MSG HERE */
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000636:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800063a:	4886      	ldr	r0, [pc, #536]	@ (8000854 <button_handler+0x2bc>)
 800063c:	f001 ff69 	bl	8002512 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 8000640:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000644:	4883      	ldr	r0, [pc, #524]	@ (8000854 <button_handler+0x2bc>)
 8000646:	f001 ff64 	bl	8002512 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 800064a:	2064      	movs	r0, #100	@ 0x64
 800064c:	f000 fdf6 	bl	800123c <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000650:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000654:	487f      	ldr	r0, [pc, #508]	@ (8000854 <button_handler+0x2bc>)
 8000656:	f001 ff5c 	bl	8002512 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800065a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800065e:	487d      	ldr	r0, [pc, #500]	@ (8000854 <button_handler+0x2bc>)
 8000660:	f001 ff57 	bl	8002512 <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 8000664:	2120      	movs	r1, #32
 8000666:	487b      	ldr	r0, [pc, #492]	@ (8000854 <button_handler+0x2bc>)
 8000668:	f001 ff24 	bl	80024b4 <HAL_GPIO_ReadPin>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d12f      	bne.n	80006d2 <button_handler+0x13a>
			&& !HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && flag_btn3
 8000672:	2140      	movs	r1, #64	@ 0x40
 8000674:	4877      	ldr	r0, [pc, #476]	@ (8000854 <button_handler+0x2bc>)
 8000676:	f001 ff1d 	bl	80024b4 <HAL_GPIO_ReadPin>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d128      	bne.n	80006d2 <button_handler+0x13a>
 8000680:	4b76      	ldr	r3, [pc, #472]	@ (800085c <button_handler+0x2c4>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b00      	cmp	r3, #0
 8000686:	d024      	beq.n	80006d2 <button_handler+0x13a>
			&& flag_btn4) {
 8000688:	4b75      	ldr	r3, [pc, #468]	@ (8000860 <button_handler+0x2c8>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d020      	beq.n	80006d2 <button_handler+0x13a>
		flag_btn3 = !flag_btn3;
 8000690:	4b72      	ldr	r3, [pc, #456]	@ (800085c <button_handler+0x2c4>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	bf14      	ite	ne
 8000698:	2301      	movne	r3, #1
 800069a:	2300      	moveq	r3, #0
 800069c:	b2db      	uxtb	r3, r3
 800069e:	f083 0301 	eor.w	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	f003 0301 	and.w	r3, r3, #1
 80006a8:	b2da      	uxtb	r2, r3
 80006aa:	4b6c      	ldr	r3, [pc, #432]	@ (800085c <button_handler+0x2c4>)
 80006ac:	701a      	strb	r2, [r3, #0]
		flag_btn4 = !flag_btn4;
 80006ae:	4b6c      	ldr	r3, [pc, #432]	@ (8000860 <button_handler+0x2c8>)
 80006b0:	781b      	ldrb	r3, [r3, #0]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	bf14      	ite	ne
 80006b6:	2301      	movne	r3, #1
 80006b8:	2300      	moveq	r3, #0
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	f083 0301 	eor.w	r3, r3, #1
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	b2da      	uxtb	r2, r3
 80006c8:	4b65      	ldr	r3, [pc, #404]	@ (8000860 <button_handler+0x2c8>)
 80006ca:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80006cc:	2064      	movs	r0, #100	@ 0x64
 80006ce:	f000 fdb5 	bl	800123c <HAL_Delay>
	}
	/* GEAR UP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 80006d2:	2120      	movs	r1, #32
 80006d4:	485f      	ldr	r0, [pc, #380]	@ (8000854 <button_handler+0x2bc>)
 80006d6:	f001 feed 	bl	80024b4 <HAL_GPIO_ReadPin>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d039      	beq.n	8000754 <button_handler+0x1bc>
			&& !HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 80006e0:	2140      	movs	r1, #64	@ 0x40
 80006e2:	485c      	ldr	r0, [pc, #368]	@ (8000854 <button_handler+0x2bc>)
 80006e4:	f001 fee6 	bl	80024b4 <HAL_GPIO_ReadPin>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d132      	bne.n	8000754 <button_handler+0x1bc>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn3) {
 80006ee:	f000 fd9b 	bl	8001228 <HAL_GetTick>
 80006f2:	4602      	mov	r2, r0
 80006f4:	4b58      	ldr	r3, [pc, #352]	@ (8000858 <button_handler+0x2c0>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	1ad3      	subs	r3, r2, r3
 80006fa:	2b96      	cmp	r3, #150	@ 0x96
 80006fc:	d92a      	bls.n	8000754 <button_handler+0x1bc>
 80006fe:	4b57      	ldr	r3, [pc, #348]	@ (800085c <button_handler+0x2c4>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	f083 0301 	eor.w	r3, r3, #1
 8000706:	b2db      	uxtb	r3, r3
 8000708:	2b00      	cmp	r3, #0
 800070a:	d023      	beq.n	8000754 <button_handler+0x1bc>
		flag_btn3 = !flag_btn3;
 800070c:	4b53      	ldr	r3, [pc, #332]	@ (800085c <button_handler+0x2c4>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	bf14      	ite	ne
 8000714:	2301      	movne	r3, #1
 8000716:	2300      	moveq	r3, #0
 8000718:	b2db      	uxtb	r3, r3
 800071a:	f083 0301 	eor.w	r3, r3, #1
 800071e:	b2db      	uxtb	r3, r3
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	b2da      	uxtb	r2, r3
 8000726:	4b4d      	ldr	r3, [pc, #308]	@ (800085c <button_handler+0x2c4>)
 8000728:	701a      	strb	r2, [r3, #0]
		/* SEND CAN GEAR UP MSG HERE */
		msg_type = gear_up;
 800072a:	4b4e      	ldr	r3, [pc, #312]	@ (8000864 <button_handler+0x2cc>)
 800072c:	2202      	movs	r2, #2
 800072e:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 8000730:	4b4c      	ldr	r3, [pc, #304]	@ (8000864 <button_handler+0x2cc>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	f000 f9d9 	bl	8000aec <can_msg_handler>
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800073a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800073e:	4845      	ldr	r0, [pc, #276]	@ (8000854 <button_handler+0x2bc>)
 8000740:	f001 fee7 	bl	8002512 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000744:	2064      	movs	r0, #100	@ 0x64
 8000746:	f000 fd79 	bl	800123c <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800074a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800074e:	4841      	ldr	r0, [pc, #260]	@ (8000854 <button_handler+0x2bc>)
 8000750:	f001 fedf 	bl	8002512 <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) && flag_btn3) {
 8000754:	2120      	movs	r1, #32
 8000756:	483f      	ldr	r0, [pc, #252]	@ (8000854 <button_handler+0x2bc>)
 8000758:	f001 feac 	bl	80024b4 <HAL_GPIO_ReadPin>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d109      	bne.n	8000776 <button_handler+0x1de>
 8000762:	4b3e      	ldr	r3, [pc, #248]	@ (800085c <button_handler+0x2c4>)
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d005      	beq.n	8000776 <button_handler+0x1de>
		flag_btn3 = 0;
 800076a:	4b3c      	ldr	r3, [pc, #240]	@ (800085c <button_handler+0x2c4>)
 800076c:	2200      	movs	r2, #0
 800076e:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000770:	2064      	movs	r0, #100	@ 0x64
 8000772:	f000 fd63 	bl	800123c <HAL_Delay>
	}
	/* GEAR DOWN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin)
 8000776:	2140      	movs	r1, #64	@ 0x40
 8000778:	4836      	ldr	r0, [pc, #216]	@ (8000854 <button_handler+0x2bc>)
 800077a:	f001 fe9b 	bl	80024b4 <HAL_GPIO_ReadPin>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d039      	beq.n	80007f8 <button_handler+0x260>
			&& !HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)
 8000784:	2120      	movs	r1, #32
 8000786:	4833      	ldr	r0, [pc, #204]	@ (8000854 <button_handler+0x2bc>)
 8000788:	f001 fe94 	bl	80024b4 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d132      	bne.n	80007f8 <button_handler+0x260>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn4) {
 8000792:	f000 fd49 	bl	8001228 <HAL_GetTick>
 8000796:	4602      	mov	r2, r0
 8000798:	4b2f      	ldr	r3, [pc, #188]	@ (8000858 <button_handler+0x2c0>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	1ad3      	subs	r3, r2, r3
 800079e:	2b96      	cmp	r3, #150	@ 0x96
 80007a0:	d92a      	bls.n	80007f8 <button_handler+0x260>
 80007a2:	4b2f      	ldr	r3, [pc, #188]	@ (8000860 <button_handler+0x2c8>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	f083 0301 	eor.w	r3, r3, #1
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d023      	beq.n	80007f8 <button_handler+0x260>
		flag_btn4 = !flag_btn4;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <button_handler+0x2c8>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	bf14      	ite	ne
 80007b8:	2301      	movne	r3, #1
 80007ba:	2300      	moveq	r3, #0
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	f083 0301 	eor.w	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	f003 0301 	and.w	r3, r3, #1
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <button_handler+0x2c8>)
 80007cc:	701a      	strb	r2, [r3, #0]
		/* SEND CAN GEAR DOWN MSG HERE */
		msg_type = gear_down;
 80007ce:	4b25      	ldr	r3, [pc, #148]	@ (8000864 <button_handler+0x2cc>)
 80007d0:	2203      	movs	r2, #3
 80007d2:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 80007d4:	4b23      	ldr	r3, [pc, #140]	@ (8000864 <button_handler+0x2cc>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 f987 	bl	8000aec <can_msg_handler>
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80007de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007e2:	481c      	ldr	r0, [pc, #112]	@ (8000854 <button_handler+0x2bc>)
 80007e4:	f001 fe95 	bl	8002512 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80007e8:	2064      	movs	r0, #100	@ 0x64
 80007ea:	f000 fd27 	bl	800123c <HAL_Delay>
		HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80007ee:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007f2:	4818      	ldr	r0, [pc, #96]	@ (8000854 <button_handler+0x2bc>)
 80007f4:	f001 fe8d 	bl	8002512 <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && flag_btn4) {
 80007f8:	2140      	movs	r1, #64	@ 0x40
 80007fa:	4816      	ldr	r0, [pc, #88]	@ (8000854 <button_handler+0x2bc>)
 80007fc:	f001 fe5a 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d115      	bne.n	8000832 <button_handler+0x29a>
 8000806:	4b16      	ldr	r3, [pc, #88]	@ (8000860 <button_handler+0x2c8>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d011      	beq.n	8000832 <button_handler+0x29a>
		flag_btn4 = !flag_btn4;
 800080e:	4b14      	ldr	r3, [pc, #80]	@ (8000860 <button_handler+0x2c8>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf14      	ite	ne
 8000816:	2301      	movne	r3, #1
 8000818:	2300      	moveq	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	f083 0301 	eor.w	r3, r3, #1
 8000820:	b2db      	uxtb	r3, r3
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b0d      	ldr	r3, [pc, #52]	@ (8000860 <button_handler+0x2c8>)
 800082a:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800082c:	2064      	movs	r0, #100	@ 0x64
 800082e:	f000 fd05 	bl	800123c <HAL_Delay>
	}
	/* ENGINE STARTUP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)
 8000832:	2108      	movs	r1, #8
 8000834:	4807      	ldr	r0, [pc, #28]	@ (8000854 <button_handler+0x2bc>)
 8000836:	f001 fe3d 	bl	80024b4 <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d049      	beq.n	80008d4 <button_handler+0x33c>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn1) {
 8000840:	f000 fcf2 	bl	8001228 <HAL_GetTick>
 8000844:	4602      	mov	r2, r0
 8000846:	4b04      	ldr	r3, [pc, #16]	@ (8000858 <button_handler+0x2c0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	2b96      	cmp	r3, #150	@ 0x96
 800084e:	d941      	bls.n	80008d4 <button_handler+0x33c>
 8000850:	e00a      	b.n	8000868 <button_handler+0x2d0>
 8000852:	bf00      	nop
 8000854:	40010c00 	.word	0x40010c00
 8000858:	2000012c 	.word	0x2000012c
 800085c:	20000176 	.word	0x20000176
 8000860:	20000177 	.word	0x20000177
 8000864:	20000003 	.word	0x20000003
 8000868:	4b98      	ldr	r3, [pc, #608]	@ (8000acc <button_handler+0x534>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	f083 0301 	eor.w	r3, r3, #1
 8000870:	b2db      	uxtb	r3, r3
 8000872:	2b00      	cmp	r3, #0
 8000874:	d02e      	beq.n	80008d4 <button_handler+0x33c>
		flag_btn1 = !flag_btn1;
 8000876:	4b95      	ldr	r3, [pc, #596]	@ (8000acc <button_handler+0x534>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	bf14      	ite	ne
 800087e:	2301      	movne	r3, #1
 8000880:	2300      	moveq	r3, #0
 8000882:	b2db      	uxtb	r3, r3
 8000884:	f083 0301 	eor.w	r3, r3, #1
 8000888:	b2db      	uxtb	r3, r3
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	b2da      	uxtb	r2, r3
 8000890:	4b8e      	ldr	r3, [pc, #568]	@ (8000acc <button_handler+0x534>)
 8000892:	701a      	strb	r2, [r3, #0]
		while (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)) {
 8000894:	e017      	b.n	80008c6 <button_handler+0x32e>
			/* SEND CAN MSG ENGINE STARTUP HERE */
			msg_type = engn_start;
 8000896:	4b8e      	ldr	r3, [pc, #568]	@ (8000ad0 <button_handler+0x538>)
 8000898:	2200      	movs	r2, #0
 800089a:	701a      	strb	r2, [r3, #0]
			can_msg_handler(msg_type);
 800089c:	4b8c      	ldr	r3, [pc, #560]	@ (8000ad0 <button_handler+0x538>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f923 	bl	8000aec <can_msg_handler>
			HAL_Delay(1);
 80008a6:	2001      	movs	r0, #1
 80008a8:	f000 fcc8 	bl	800123c <HAL_Delay>
			/* ENGINE STARTUP SWITCH IS NOT LATCHING ! */
#if DEBUG == 1
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008ac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008b0:	4888      	ldr	r0, [pc, #544]	@ (8000ad4 <button_handler+0x53c>)
 80008b2:	f001 fe2e 	bl	8002512 <HAL_GPIO_TogglePin>
			HAL_Delay(100);
 80008b6:	2064      	movs	r0, #100	@ 0x64
 80008b8:	f000 fcc0 	bl	800123c <HAL_Delay>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80008bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008c0:	4884      	ldr	r0, [pc, #528]	@ (8000ad4 <button_handler+0x53c>)
 80008c2:	f001 fe26 	bl	8002512 <HAL_GPIO_TogglePin>
		while (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)) {
 80008c6:	2108      	movs	r1, #8
 80008c8:	4882      	ldr	r0, [pc, #520]	@ (8000ad4 <button_handler+0x53c>)
 80008ca:	f001 fdf3 	bl	80024b4 <HAL_GPIO_ReadPin>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1e0      	bne.n	8000896 <button_handler+0x2fe>
#endif
		}
	}
	if (!HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) && flag_btn1) {
 80008d4:	2108      	movs	r1, #8
 80008d6:	487f      	ldr	r0, [pc, #508]	@ (8000ad4 <button_handler+0x53c>)
 80008d8:	f001 fdec 	bl	80024b4 <HAL_GPIO_ReadPin>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d115      	bne.n	800090e <button_handler+0x376>
 80008e2:	4b7a      	ldr	r3, [pc, #488]	@ (8000acc <button_handler+0x534>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d011      	beq.n	800090e <button_handler+0x376>
		flag_btn1 = !flag_btn1;
 80008ea:	4b78      	ldr	r3, [pc, #480]	@ (8000acc <button_handler+0x534>)
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	bf14      	ite	ne
 80008f2:	2301      	movne	r3, #1
 80008f4:	2300      	moveq	r3, #0
 80008f6:	b2db      	uxtb	r3, r3
 80008f8:	f083 0301 	eor.w	r3, r3, #1
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	b2da      	uxtb	r2, r3
 8000904:	4b71      	ldr	r3, [pc, #452]	@ (8000acc <button_handler+0x534>)
 8000906:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 8000908:	2064      	movs	r0, #100	@ 0x64
 800090a:	f000 fc97 	bl	800123c <HAL_Delay>
	}
	/* ENGINE STOP BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin)
 800090e:	2110      	movs	r1, #16
 8000910:	4870      	ldr	r0, [pc, #448]	@ (8000ad4 <button_handler+0x53c>)
 8000912:	f001 fdcf 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d032      	beq.n	8000982 <button_handler+0x3ea>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn2) {
 800091c:	f000 fc84 	bl	8001228 <HAL_GetTick>
 8000920:	4602      	mov	r2, r0
 8000922:	4b6d      	ldr	r3, [pc, #436]	@ (8000ad8 <button_handler+0x540>)
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	1ad3      	subs	r3, r2, r3
 8000928:	2b96      	cmp	r3, #150	@ 0x96
 800092a:	d92a      	bls.n	8000982 <button_handler+0x3ea>
 800092c:	4b6b      	ldr	r3, [pc, #428]	@ (8000adc <button_handler+0x544>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f083 0301 	eor.w	r3, r3, #1
 8000934:	b2db      	uxtb	r3, r3
 8000936:	2b00      	cmp	r3, #0
 8000938:	d023      	beq.n	8000982 <button_handler+0x3ea>
		flag_btn2 = !flag_btn2;
 800093a:	4b68      	ldr	r3, [pc, #416]	@ (8000adc <button_handler+0x544>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b00      	cmp	r3, #0
 8000940:	bf14      	ite	ne
 8000942:	2301      	movne	r3, #1
 8000944:	2300      	moveq	r3, #0
 8000946:	b2db      	uxtb	r3, r3
 8000948:	f083 0301 	eor.w	r3, r3, #1
 800094c:	b2db      	uxtb	r3, r3
 800094e:	f003 0301 	and.w	r3, r3, #1
 8000952:	b2da      	uxtb	r2, r3
 8000954:	4b61      	ldr	r3, [pc, #388]	@ (8000adc <button_handler+0x544>)
 8000956:	701a      	strb	r2, [r3, #0]
		/* SEND CAN STOP ENGINE MSG HERE */
		msg_type = engn_stop;
 8000958:	4b5d      	ldr	r3, [pc, #372]	@ (8000ad0 <button_handler+0x538>)
 800095a:	2201      	movs	r2, #1
 800095c:	701a      	strb	r2, [r3, #0]
		can_msg_handler(msg_type);
 800095e:	4b5c      	ldr	r3, [pc, #368]	@ (8000ad0 <button_handler+0x538>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	4618      	mov	r0, r3
 8000964:	f000 f8c2 	bl	8000aec <can_msg_handler>
#if DEBUG == 1
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000968:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800096c:	4859      	ldr	r0, [pc, #356]	@ (8000ad4 <button_handler+0x53c>)
 800096e:	f001 fdd0 	bl	8002512 <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8000972:	2064      	movs	r0, #100	@ 0x64
 8000974:	f000 fc62 	bl	800123c <HAL_Delay>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000978:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800097c:	4855      	ldr	r0, [pc, #340]	@ (8000ad4 <button_handler+0x53c>)
 800097e:	f001 fdc8 	bl	8002512 <HAL_GPIO_TogglePin>
#endif
	}
	if (!HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) && flag_btn2) {
 8000982:	2110      	movs	r1, #16
 8000984:	4853      	ldr	r0, [pc, #332]	@ (8000ad4 <button_handler+0x53c>)
 8000986:	f001 fd95 	bl	80024b4 <HAL_GPIO_ReadPin>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d115      	bne.n	80009bc <button_handler+0x424>
 8000990:	4b52      	ldr	r3, [pc, #328]	@ (8000adc <button_handler+0x544>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d011      	beq.n	80009bc <button_handler+0x424>
		flag_btn2 = !flag_btn2;
 8000998:	4b50      	ldr	r3, [pc, #320]	@ (8000adc <button_handler+0x544>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b00      	cmp	r3, #0
 800099e:	bf14      	ite	ne
 80009a0:	2301      	movne	r3, #1
 80009a2:	2300      	moveq	r3, #0
 80009a4:	b2db      	uxtb	r3, r3
 80009a6:	f083 0301 	eor.w	r3, r3, #1
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	b2da      	uxtb	r2, r3
 80009b2:	4b4a      	ldr	r3, [pc, #296]	@ (8000adc <button_handler+0x544>)
 80009b4:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80009b6:	2064      	movs	r0, #100	@ 0x64
 80009b8:	f000 fc40 	bl	800123c <HAL_Delay>
	}
	/* NEXT SCREEN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_5_GPIO_Port, BTN_5_Pin)
 80009bc:	2180      	movs	r1, #128	@ 0x80
 80009be:	4845      	ldr	r0, [pc, #276]	@ (8000ad4 <button_handler+0x53c>)
 80009c0:	f001 fd78 	bl	80024b4 <HAL_GPIO_ReadPin>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d020      	beq.n	8000a0c <button_handler+0x474>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn5) {
 80009ca:	f000 fc2d 	bl	8001228 <HAL_GetTick>
 80009ce:	4602      	mov	r2, r0
 80009d0:	4b41      	ldr	r3, [pc, #260]	@ (8000ad8 <button_handler+0x540>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	2b96      	cmp	r3, #150	@ 0x96
 80009d8:	d918      	bls.n	8000a0c <button_handler+0x474>
 80009da:	4b41      	ldr	r3, [pc, #260]	@ (8000ae0 <button_handler+0x548>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	f083 0301 	eor.w	r3, r3, #1
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d011      	beq.n	8000a0c <button_handler+0x474>
		flag_btn5 = !flag_btn5;
 80009e8:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae0 <button_handler+0x548>)
 80009ea:	781b      	ldrb	r3, [r3, #0]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	bf14      	ite	ne
 80009f0:	2301      	movne	r3, #1
 80009f2:	2300      	moveq	r3, #0
 80009f4:	b2db      	uxtb	r3, r3
 80009f6:	f083 0301 	eor.w	r3, r3, #1
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	f003 0301 	and.w	r3, r3, #1
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	4b37      	ldr	r3, [pc, #220]	@ (8000ae0 <button_handler+0x548>)
 8000a04:	701a      	strb	r2, [r3, #0]
		/* SEND USART NEXT SCREEN MSG HERE */

		HAL_Delay(100);
 8000a06:	2064      	movs	r0, #100	@ 0x64
 8000a08:	f000 fc18 	bl	800123c <HAL_Delay>
	}
	if (!HAL_GPIO_ReadPin(BTN_5_GPIO_Port, BTN_5_Pin) && flag_btn5) {
 8000a0c:	2180      	movs	r1, #128	@ 0x80
 8000a0e:	4831      	ldr	r0, [pc, #196]	@ (8000ad4 <button_handler+0x53c>)
 8000a10:	f001 fd50 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d112      	bne.n	8000a40 <button_handler+0x4a8>
 8000a1a:	4b31      	ldr	r3, [pc, #196]	@ (8000ae0 <button_handler+0x548>)
 8000a1c:	781b      	ldrb	r3, [r3, #0]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d00e      	beq.n	8000a40 <button_handler+0x4a8>
		flag_btn5 = !flag_btn5;
 8000a22:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae0 <button_handler+0x548>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	bf14      	ite	ne
 8000a2a:	2301      	movne	r3, #1
 8000a2c:	2300      	moveq	r3, #0
 8000a2e:	b2db      	uxtb	r3, r3
 8000a30:	f083 0301 	eor.w	r3, r3, #1
 8000a34:	b2db      	uxtb	r3, r3
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b28      	ldr	r3, [pc, #160]	@ (8000ae0 <button_handler+0x548>)
 8000a3e:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(100);
	}
	/* PREVIOUS SCREEN BUTTON HANDLER */
	if (HAL_GPIO_ReadPin(BTN_6_GPIO_Port, BTN_6_Pin)
 8000a40:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a44:	4827      	ldr	r0, [pc, #156]	@ (8000ae4 <button_handler+0x54c>)
 8000a46:	f001 fd35 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d020      	beq.n	8000a92 <button_handler+0x4fa>
			&& (HAL_GetTick() - time_ms > 150) && !flag_btn6) {
 8000a50:	f000 fbea 	bl	8001228 <HAL_GetTick>
 8000a54:	4602      	mov	r2, r0
 8000a56:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <button_handler+0x540>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	1ad3      	subs	r3, r2, r3
 8000a5c:	2b96      	cmp	r3, #150	@ 0x96
 8000a5e:	d918      	bls.n	8000a92 <button_handler+0x4fa>
 8000a60:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <button_handler+0x550>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	f083 0301 	eor.w	r3, r3, #1
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d011      	beq.n	8000a92 <button_handler+0x4fa>
		flag_btn6 = !flag_btn6;
 8000a6e:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <button_handler+0x550>)
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	bf14      	ite	ne
 8000a76:	2301      	movne	r3, #1
 8000a78:	2300      	moveq	r3, #0
 8000a7a:	b2db      	uxtb	r3, r3
 8000a7c:	f083 0301 	eor.w	r3, r3, #1
 8000a80:	b2db      	uxtb	r3, r3
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	4b17      	ldr	r3, [pc, #92]	@ (8000ae8 <button_handler+0x550>)
 8000a8a:	701a      	strb	r2, [r3, #0]
		/* SEND USART PREVIOUS SCREEN MSG HERE */

		HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	@ 0x64
 8000a8e:	f000 fbd5 	bl	800123c <HAL_Delay>
	}
	if (!HAL_GPIO_ReadPin(BTN_6_GPIO_Port, BTN_6_Pin) && flag_btn6) {
 8000a92:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000a96:	4813      	ldr	r0, [pc, #76]	@ (8000ae4 <button_handler+0x54c>)
 8000a98:	f001 fd0c 	bl	80024b4 <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d112      	bne.n	8000ac8 <button_handler+0x530>
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <button_handler+0x550>)
 8000aa4:	781b      	ldrb	r3, [r3, #0]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d00e      	beq.n	8000ac8 <button_handler+0x530>
		flag_btn6 = !flag_btn6;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <button_handler+0x550>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	bf14      	ite	ne
 8000ab2:	2301      	movne	r3, #1
 8000ab4:	2300      	moveq	r3, #0
 8000ab6:	b2db      	uxtb	r3, r3
 8000ab8:	f083 0301 	eor.w	r3, r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	f003 0301 	and.w	r3, r3, #1
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	4b08      	ldr	r3, [pc, #32]	@ (8000ae8 <button_handler+0x550>)
 8000ac6:	701a      	strb	r2, [r3, #0]
		//HAL_Delay(100);
	}

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	20000178 	.word	0x20000178
 8000ad0:	20000003 	.word	0x20000003
 8000ad4:	40010c00 	.word	0x40010c00
 8000ad8:	2000012c 	.word	0x2000012c
 8000adc:	20000179 	.word	0x20000179
 8000ae0:	2000017a 	.word	0x2000017a
 8000ae4:	40010800 	.word	0x40010800
 8000ae8:	2000017b 	.word	0x2000017b

08000aec <can_msg_handler>:
int can_msg_handler(uint8_t typemsg) {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b082      	sub	sp, #8
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	switch (typemsg) {
 8000af6:	79fb      	ldrb	r3, [r7, #7]
 8000af8:	2b04      	cmp	r3, #4
 8000afa:	f200 8085 	bhi.w	8000c08 <can_msg_handler+0x11c>
 8000afe:	a201      	add	r2, pc, #4	@ (adr r2, 8000b04 <can_msg_handler+0x18>)
 8000b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b04:	08000b19 	.word	0x08000b19
 8000b08:	08000b49 	.word	0x08000b49
 8000b0c:	08000b79 	.word	0x08000b79
 8000b10:	08000ba9 	.word	0x08000ba9
 8000b14:	08000bd9 	.word	0x08000bd9
	case engn_start:
		/* MSG START ENGINE */
		TxHeader.StdId = 0x643;
 8000b18:	4b40      	ldr	r3, [pc, #256]	@ (8000c1c <can_msg_handler+0x130>)
 8000b1a:	f240 6243 	movw	r2, #1603	@ 0x643
 8000b1e:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000001; //using binary system to make bit set more clear
 8000b20:	4b3f      	ldr	r3, [pc, #252]	@ (8000c20 <can_msg_handler+0x134>)
 8000b22:	2201      	movs	r2, #1
 8000b24:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000b26:	bf00      	nop
 8000b28:	483e      	ldr	r0, [pc, #248]	@ (8000c24 <can_msg_handler+0x138>)
 8000b2a:	f000 fe82 	bl	8001832 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d0f9      	beq.n	8000b28 <can_msg_handler+0x3c>
			; //CAN SW#0
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000b34:	4b3c      	ldr	r3, [pc, #240]	@ (8000c28 <can_msg_handler+0x13c>)
 8000b36:	4a3a      	ldr	r2, [pc, #232]	@ (8000c20 <can_msg_handler+0x134>)
 8000b38:	4938      	ldr	r1, [pc, #224]	@ (8000c1c <can_msg_handler+0x130>)
 8000b3a:	483a      	ldr	r0, [pc, #232]	@ (8000c24 <can_msg_handler+0x138>)
 8000b3c:	f000 fdaa 	bl	8001694 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000b40:	4b37      	ldr	r3, [pc, #220]	@ (8000c20 <can_msg_handler+0x134>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	711a      	strb	r2, [r3, #4]
		break;
 8000b46:	e060      	b.n	8000c0a <can_msg_handler+0x11e>
	case engn_stop:
		/* MSG STOP ENGINE */
		TxHeader.StdId = 0x642;
 8000b48:	4b34      	ldr	r3, [pc, #208]	@ (8000c1c <can_msg_handler+0x130>)
 8000b4a:	f240 6242 	movw	r2, #1602	@ 0x642
 8000b4e:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000010; //CAN SW#1
 8000b50:	4b33      	ldr	r3, [pc, #204]	@ (8000c20 <can_msg_handler+0x134>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000b56:	bf00      	nop
 8000b58:	4832      	ldr	r0, [pc, #200]	@ (8000c24 <can_msg_handler+0x138>)
 8000b5a:	f000 fe6a 	bl	8001832 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d0f9      	beq.n	8000b58 <can_msg_handler+0x6c>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000b64:	4b30      	ldr	r3, [pc, #192]	@ (8000c28 <can_msg_handler+0x13c>)
 8000b66:	4a2e      	ldr	r2, [pc, #184]	@ (8000c20 <can_msg_handler+0x134>)
 8000b68:	492c      	ldr	r1, [pc, #176]	@ (8000c1c <can_msg_handler+0x130>)
 8000b6a:	482e      	ldr	r0, [pc, #184]	@ (8000c24 <can_msg_handler+0x138>)
 8000b6c:	f000 fd92 	bl	8001694 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000b70:	4b2b      	ldr	r3, [pc, #172]	@ (8000c20 <can_msg_handler+0x134>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	711a      	strb	r2, [r3, #4]
		break;
 8000b76:	e048      	b.n	8000c0a <can_msg_handler+0x11e>
	case gear_up:
		/* MSG GEAR UP */
		TxHeader.StdId = 0x642;
 8000b78:	4b28      	ldr	r3, [pc, #160]	@ (8000c1c <can_msg_handler+0x130>)
 8000b7a:	f240 6242 	movw	r2, #1602	@ 0x642
 8000b7e:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00000100; //CAN SW#2
 8000b80:	4b27      	ldr	r3, [pc, #156]	@ (8000c20 <can_msg_handler+0x134>)
 8000b82:	2204      	movs	r2, #4
 8000b84:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000b86:	bf00      	nop
 8000b88:	4826      	ldr	r0, [pc, #152]	@ (8000c24 <can_msg_handler+0x138>)
 8000b8a:	f000 fe52 	bl	8001832 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0f9      	beq.n	8000b88 <can_msg_handler+0x9c>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000b94:	4b24      	ldr	r3, [pc, #144]	@ (8000c28 <can_msg_handler+0x13c>)
 8000b96:	4a22      	ldr	r2, [pc, #136]	@ (8000c20 <can_msg_handler+0x134>)
 8000b98:	4920      	ldr	r1, [pc, #128]	@ (8000c1c <can_msg_handler+0x130>)
 8000b9a:	4822      	ldr	r0, [pc, #136]	@ (8000c24 <can_msg_handler+0x138>)
 8000b9c:	f000 fd7a 	bl	8001694 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8000c20 <can_msg_handler+0x134>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	711a      	strb	r2, [r3, #4]
		break;
 8000ba6:	e030      	b.n	8000c0a <can_msg_handler+0x11e>
	case gear_down:
		/* MSG GEAR DOWN */
		TxHeader.StdId = 0x642;
 8000ba8:	4b1c      	ldr	r3, [pc, #112]	@ (8000c1c <can_msg_handler+0x130>)
 8000baa:	f240 6242 	movw	r2, #1602	@ 0x642
 8000bae:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00001000; //CAN SW #3
 8000bb0:	4b1b      	ldr	r3, [pc, #108]	@ (8000c20 <can_msg_handler+0x134>)
 8000bb2:	2208      	movs	r2, #8
 8000bb4:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000bb6:	bf00      	nop
 8000bb8:	481a      	ldr	r0, [pc, #104]	@ (8000c24 <can_msg_handler+0x138>)
 8000bba:	f000 fe3a 	bl	8001832 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d0f9      	beq.n	8000bb8 <can_msg_handler+0xcc>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000bc4:	4b18      	ldr	r3, [pc, #96]	@ (8000c28 <can_msg_handler+0x13c>)
 8000bc6:	4a16      	ldr	r2, [pc, #88]	@ (8000c20 <can_msg_handler+0x134>)
 8000bc8:	4914      	ldr	r1, [pc, #80]	@ (8000c1c <can_msg_handler+0x130>)
 8000bca:	4816      	ldr	r0, [pc, #88]	@ (8000c24 <can_msg_handler+0x138>)
 8000bcc:	f000 fd62 	bl	8001694 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000bd0:	4b13      	ldr	r3, [pc, #76]	@ (8000c20 <can_msg_handler+0x134>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	711a      	strb	r2, [r3, #4]
		break;
 8000bd6:	e018      	b.n	8000c0a <can_msg_handler+0x11e>
	case gear_neutral:
		/* MSG GEAR NEUTRAL */
		TxHeader.StdId = 0x642;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <can_msg_handler+0x130>)
 8000bda:	f240 6242 	movw	r2, #1602	@ 0x642
 8000bde:	601a      	str	r2, [r3, #0]
		TxData[4] = 0b00010000; //CAN SW#4
 8000be0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c20 <can_msg_handler+0x134>)
 8000be2:	2210      	movs	r2, #16
 8000be4:	711a      	strb	r2, [r3, #4]
		while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0)
 8000be6:	bf00      	nop
 8000be8:	480e      	ldr	r0, [pc, #56]	@ (8000c24 <can_msg_handler+0x138>)
 8000bea:	f000 fe22 	bl	8001832 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d0f9      	beq.n	8000be8 <can_msg_handler+0xfc>
			;
		HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, &TxMailbox);
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <can_msg_handler+0x13c>)
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <can_msg_handler+0x134>)
 8000bf8:	4908      	ldr	r1, [pc, #32]	@ (8000c1c <can_msg_handler+0x130>)
 8000bfa:	480a      	ldr	r0, [pc, #40]	@ (8000c24 <can_msg_handler+0x138>)
 8000bfc:	f000 fd4a 	bl	8001694 <HAL_CAN_AddTxMessage>
		TxData[4] = 0x00;
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <can_msg_handler+0x134>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	711a      	strb	r2, [r3, #4]
		break;
 8000c06:	e000      	b.n	8000c0a <can_msg_handler+0x11e>
	default:
		/* MSG NONE */
		break;
 8000c08:	bf00      	nop
	}
	msg_type = msg_none; // SET NONE TYPE MSG
 8000c0a:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <can_msg_handler+0x140>)
 8000c0c:	2205      	movs	r2, #5
 8000c0e:	701a      	strb	r2, [r3, #0]
	return 0; // return OK value to prevent endless loop
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3708      	adds	r7, #8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	200000ec 	.word	0x200000ec
 8000c20:	20000120 	.word	0x20000120
 8000c24:	2000007c 	.word	0x2000007c
 8000c28:	20000128 	.word	0x20000128
 8000c2c:	20000003 	.word	0x20000003

08000c30 <data_update_handler>:
void data_update_handler() {
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
	ECU.RPM = RxData.x600[1];
 8000c34:	4b3b      	ldr	r3, [pc, #236]	@ (8000d24 <data_update_handler+0xf4>)
 8000c36:	7a5b      	ldrb	r3, [r3, #9]
 8000c38:	461a      	mov	r2, r3
 8000c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8000d28 <data_update_handler+0xf8>)
 8000c3c:	801a      	strh	r2, [r3, #0]
	ECU.RPM = ECU.RPM << 7;
 8000c3e:	4b3a      	ldr	r3, [pc, #232]	@ (8000d28 <data_update_handler+0xf8>)
 8000c40:	881b      	ldrh	r3, [r3, #0]
 8000c42:	01db      	lsls	r3, r3, #7
 8000c44:	b29a      	uxth	r2, r3
 8000c46:	4b38      	ldr	r3, [pc, #224]	@ (8000d28 <data_update_handler+0xf8>)
 8000c48:	801a      	strh	r2, [r3, #0]
	ECU.RPM = ECU.RPM + RxData.x600[0];
 8000c4a:	4b37      	ldr	r3, [pc, #220]	@ (8000d28 <data_update_handler+0xf8>)
 8000c4c:	881b      	ldrh	r3, [r3, #0]
 8000c4e:	4a35      	ldr	r2, [pc, #212]	@ (8000d24 <data_update_handler+0xf4>)
 8000c50:	7a12      	ldrb	r2, [r2, #8]
 8000c52:	4413      	add	r3, r2
 8000c54:	b29a      	uxth	r2, r3
 8000c56:	4b34      	ldr	r3, [pc, #208]	@ (8000d28 <data_update_handler+0xf8>)
 8000c58:	801a      	strh	r2, [r3, #0]
	//TODO: fix 2 byte variables (as below)
	ECU.TPS = RxData.x600[2];
 8000c5a:	4b32      	ldr	r3, [pc, #200]	@ (8000d24 <data_update_handler+0xf4>)
 8000c5c:	7a9a      	ldrb	r2, [r3, #10]
 8000c5e:	4b32      	ldr	r3, [pc, #200]	@ (8000d28 <data_update_handler+0xf8>)
 8000c60:	759a      	strb	r2, [r3, #22]
	ECU.MAP = RxData.x600[3] + RxData.x600[4];
 8000c62:	4b30      	ldr	r3, [pc, #192]	@ (8000d24 <data_update_handler+0xf4>)
 8000c64:	7adb      	ldrb	r3, [r3, #11]
 8000c66:	461a      	mov	r2, r3
 8000c68:	4b2e      	ldr	r3, [pc, #184]	@ (8000d24 <data_update_handler+0xf4>)
 8000c6a:	7b1b      	ldrb	r3, [r3, #12]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	b29a      	uxth	r2, r3
 8000c70:	4b2d      	ldr	r3, [pc, #180]	@ (8000d28 <data_update_handler+0xf8>)
 8000c72:	805a      	strh	r2, [r3, #2]
	//0x600 {0_RPM, 1_RPM, 2_TPS, 3_IAT, 4_MAP, 5_MAP, 6_INJPW, 7_INJPW}
	ECU.AIN1 = RxData.x601[0] + RxData.x601[1];
 8000c74:	4b2b      	ldr	r3, [pc, #172]	@ (8000d24 <data_update_handler+0xf4>)
 8000c76:	7c1b      	ldrb	r3, [r3, #16]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d24 <data_update_handler+0xf4>)
 8000c7c:	7c5b      	ldrb	r3, [r3, #17]
 8000c7e:	4413      	add	r3, r2
 8000c80:	b29a      	uxth	r2, r3
 8000c82:	4b29      	ldr	r3, [pc, #164]	@ (8000d28 <data_update_handler+0xf8>)
 8000c84:	80da      	strh	r2, [r3, #6]
	ECU.AIN2 = RxData.x601[2] + RxData.x601[3];
 8000c86:	4b27      	ldr	r3, [pc, #156]	@ (8000d24 <data_update_handler+0xf4>)
 8000c88:	7c9b      	ldrb	r3, [r3, #18]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	4b25      	ldr	r3, [pc, #148]	@ (8000d24 <data_update_handler+0xf4>)
 8000c8e:	7cdb      	ldrb	r3, [r3, #19]
 8000c90:	4413      	add	r3, r2
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b24      	ldr	r3, [pc, #144]	@ (8000d28 <data_update_handler+0xf8>)
 8000c96:	811a      	strh	r2, [r3, #8]
	ECU.AIN3 = RxData.x601[4] + RxData.x601[5];
 8000c98:	4b22      	ldr	r3, [pc, #136]	@ (8000d24 <data_update_handler+0xf4>)
 8000c9a:	7d1b      	ldrb	r3, [r3, #20]
 8000c9c:	461a      	mov	r2, r3
 8000c9e:	4b21      	ldr	r3, [pc, #132]	@ (8000d24 <data_update_handler+0xf4>)
 8000ca0:	7d5b      	ldrb	r3, [r3, #21]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	b29a      	uxth	r2, r3
 8000ca6:	4b20      	ldr	r3, [pc, #128]	@ (8000d28 <data_update_handler+0xf8>)
 8000ca8:	815a      	strh	r2, [r3, #10]
	ECU.AIN4 = RxData.x601[6] + RxData.x601[7];
 8000caa:	4b1e      	ldr	r3, [pc, #120]	@ (8000d24 <data_update_handler+0xf4>)
 8000cac:	7d9b      	ldrb	r3, [r3, #22]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d24 <data_update_handler+0xf4>)
 8000cb2:	7ddb      	ldrb	r3, [r3, #23]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8000d28 <data_update_handler+0xf8>)
 8000cba:	819a      	strh	r2, [r3, #12]
	//0x601 {0_AIN1, 1_AIN1, 2_AIN2, 3_AIN2, 4_AIN3, 5_AIN3,6_AIN4, 7_AIN4}
	ECU.VSPD = RxData.x602[0] + RxData.x602[1];
 8000cbc:	4b19      	ldr	r3, [pc, #100]	@ (8000d24 <data_update_handler+0xf4>)
 8000cbe:	7e1b      	ldrb	r3, [r3, #24]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4b18      	ldr	r3, [pc, #96]	@ (8000d24 <data_update_handler+0xf4>)
 8000cc4:	7e5b      	ldrb	r3, [r3, #25]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	b29a      	uxth	r2, r3
 8000cca:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <data_update_handler+0xf8>)
 8000ccc:	81da      	strh	r2, [r3, #14]
	ECU.BARO = RxData.x602[3];
 8000cce:	4b15      	ldr	r3, [pc, #84]	@ (8000d24 <data_update_handler+0xf4>)
 8000cd0:	7eda      	ldrb	r2, [r3, #27]
 8000cd2:	4b15      	ldr	r3, [pc, #84]	@ (8000d28 <data_update_handler+0xf8>)
 8000cd4:	75da      	strb	r2, [r3, #23]
	ECU.OILT = RxData.x602[4];
 8000cd6:	4b13      	ldr	r3, [pc, #76]	@ (8000d24 <data_update_handler+0xf4>)
 8000cd8:	7f1a      	ldrb	r2, [r3, #28]
 8000cda:	4b13      	ldr	r3, [pc, #76]	@ (8000d28 <data_update_handler+0xf8>)
 8000cdc:	761a      	strb	r2, [r3, #24]
	ECU.FUELP = RxData.x602[5];
 8000cde:	4b11      	ldr	r3, [pc, #68]	@ (8000d24 <data_update_handler+0xf4>)
 8000ce0:	7f5a      	ldrb	r2, [r3, #29]
 8000ce2:	4b11      	ldr	r3, [pc, #68]	@ (8000d28 <data_update_handler+0xf8>)
 8000ce4:	769a      	strb	r2, [r3, #26]
	ECU.CLT = RxData.x602[6] + RxData.x602[7];
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	@ (8000d24 <data_update_handler+0xf4>)
 8000ce8:	7f9b      	ldrb	r3, [r3, #30]
 8000cea:	461a      	mov	r2, r3
 8000cec:	4b0d      	ldr	r3, [pc, #52]	@ (8000d24 <data_update_handler+0xf4>)
 8000cee:	7fdb      	ldrb	r3, [r3, #31]
 8000cf0:	4413      	add	r3, r2
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	b21a      	sxth	r2, r3
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d28 <data_update_handler+0xf8>)
 8000cf8:	829a      	strh	r2, [r3, #20]
	//0x602 {0_VSPD, 1_VSPD, 2_BARO, 3_OILT, 4_OILP, 5_FUELP, 6_CLT, 7_CLT}
	ECU.GEAR = RxData.x604[0];
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8000d24 <data_update_handler+0xf4>)
 8000cfc:	f893 2020 	ldrb.w	r2, [r3, #32]
 8000d00:	4b09      	ldr	r3, [pc, #36]	@ (8000d28 <data_update_handler+0xf8>)
 8000d02:	76da      	strb	r2, [r3, #27]
	ECU.BATT = RxData.x604[2] + RxData.x604[3];
 8000d04:	4b07      	ldr	r3, [pc, #28]	@ (8000d24 <data_update_handler+0xf4>)
 8000d06:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4b05      	ldr	r3, [pc, #20]	@ (8000d24 <data_update_handler+0xf4>)
 8000d0e:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8000d12:	4413      	add	r3, r2
 8000d14:	b29a      	uxth	r2, r3
 8000d16:	4b04      	ldr	r3, [pc, #16]	@ (8000d28 <data_update_handler+0xf8>)
 8000d18:	821a      	strh	r2, [r3, #16]
	//0x604 {0_GEAR, 1_ECUTEMP, 2_BATT, 3_BATT, 4_ERRFLAG, 5_ERRFLAG, 6_FLAGS1, 7_ETHANOL}
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000130 	.word	0x20000130
 8000d28:	20000158 	.word	0x20000158

08000d2c <data_send_handler>:
void data_send_handler(void){
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
	//TODO: Add cmd send for last variables
	static char cmd[50] = {0};
	sprintf(cmd, "RP.txt=\"%d\"", ECU.RPM);
 8000d30:	4b0f      	ldr	r3, [pc, #60]	@ (8000d70 <data_send_handler+0x44>)
 8000d32:	881b      	ldrh	r3, [r3, #0]
 8000d34:	461a      	mov	r2, r3
 8000d36:	490f      	ldr	r1, [pc, #60]	@ (8000d74 <data_send_handler+0x48>)
 8000d38:	480f      	ldr	r0, [pc, #60]	@ (8000d78 <data_send_handler+0x4c>)
 8000d3a:	f002 fa37 	bl	80031ac <siprintf>
	nextion_send(cmd);
 8000d3e:	480e      	ldr	r0, [pc, #56]	@ (8000d78 <data_send_handler+0x4c>)
 8000d40:	f7ff fa0c 	bl	800015c <nextion_send>
	sprintf(cmd, "GE.txt=\"%d\"", ECU.GEAR);
 8000d44:	4b0a      	ldr	r3, [pc, #40]	@ (8000d70 <data_send_handler+0x44>)
 8000d46:	7edb      	ldrb	r3, [r3, #27]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	490c      	ldr	r1, [pc, #48]	@ (8000d7c <data_send_handler+0x50>)
 8000d4c:	480a      	ldr	r0, [pc, #40]	@ (8000d78 <data_send_handler+0x4c>)
 8000d4e:	f002 fa2d 	bl	80031ac <siprintf>
	nextion_send(cmd);
 8000d52:	4809      	ldr	r0, [pc, #36]	@ (8000d78 <data_send_handler+0x4c>)
 8000d54:	f7ff fa02 	bl	800015c <nextion_send>
	sprintf(cmd, "SP.txt=\"%d\"", ECU.VSPD);
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <data_send_handler+0x44>)
 8000d5a:	89db      	ldrh	r3, [r3, #14]
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4908      	ldr	r1, [pc, #32]	@ (8000d80 <data_send_handler+0x54>)
 8000d60:	4805      	ldr	r0, [pc, #20]	@ (8000d78 <data_send_handler+0x4c>)
 8000d62:	f002 fa23 	bl	80031ac <siprintf>
	nextion_send(cmd);
 8000d66:	4804      	ldr	r0, [pc, #16]	@ (8000d78 <data_send_handler+0x4c>)
 8000d68:	f7ff f9f8 	bl	800015c <nextion_send>
}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	20000158 	.word	0x20000158
 8000d74:	08003b24 	.word	0x08003b24
 8000d78:	2000017c 	.word	0x2000017c
 8000d7c:	08003b30 	.word	0x08003b30
 8000d80:	08003b3c 	.word	0x08003b3c

08000d84 <startup>:
void startup() {
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d8e:	4823      	ldr	r0, [pc, #140]	@ (8000e1c <startup+0x98>)
 8000d90:	f001 fba7 	bl	80024e2 <HAL_GPIO_WritePin>
	TxHeader.StdId = 0x642;
 8000d94:	4b22      	ldr	r3, [pc, #136]	@ (8000e20 <startup+0x9c>)
 8000d96:	f240 6242 	movw	r2, #1602	@ 0x642
 8000d9a:	601a      	str	r2, [r3, #0]
	TxHeader.ExtId = 0;
 8000d9c:	4b20      	ldr	r3, [pc, #128]	@ (8000e20 <startup+0x9c>)
 8000d9e:	2200      	movs	r2, #0
 8000da0:	605a      	str	r2, [r3, #4]
	TxHeader.RTR = CAN_RTR_DATA; // CAN_RTR_REMOTE
 8000da2:	4b1f      	ldr	r3, [pc, #124]	@ (8000e20 <startup+0x9c>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;   // USE STANDART ID
 8000da8:	4b1d      	ldr	r3, [pc, #116]	@ (8000e20 <startup+0x9c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
	TxHeader.DLC = 8;
 8000dae:	4b1c      	ldr	r3, [pc, #112]	@ (8000e20 <startup+0x9c>)
 8000db0:	2208      	movs	r2, #8
 8000db2:	611a      	str	r2, [r3, #16]
	TxHeader.TransmitGlobalTime = 0;
 8000db4:	4b1a      	ldr	r3, [pc, #104]	@ (8000e20 <startup+0x9c>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	751a      	strb	r2, [r3, #20]
	while (HAL_CAN_Start(&hcan) == HAL_ERROR)
 8000dba:	bf00      	nop
 8000dbc:	4819      	ldr	r0, [pc, #100]	@ (8000e24 <startup+0xa0>)
 8000dbe:	f000 fc25 	bl	800160c <HAL_CAN_Start>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d0f9      	beq.n	8000dbc <startup+0x38>
		;
	HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dc8:	2102      	movs	r1, #2
 8000dca:	4816      	ldr	r0, [pc, #88]	@ (8000e24 <startup+0xa0>)
 8000dcc:	f000 fe86 	bl	8001adc <HAL_CAN_ActivateNotification>
	/* SOME LED BLINK FOR SUCCESSFUL STARTUP*/
#if DEBUG == 1
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin, 1);
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000dd6:	4814      	ldr	r0, [pc, #80]	@ (8000e28 <startup+0xa4>)
 8000dd8:	f001 fb83 	bl	80024e2 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000ddc:	20c8      	movs	r0, #200	@ 0xc8
 8000dde:	f000 fa2d 	bl	800123c <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin | LED2_Pin | LED3_Pin | LED4_Pin, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000de8:	480f      	ldr	r0, [pc, #60]	@ (8000e28 <startup+0xa4>)
 8000dea:	f001 fb7a 	bl	80024e2 <HAL_GPIO_WritePin>
#endif
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000dee:	2201      	movs	r2, #1
 8000df0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000df4:	4809      	ldr	r0, [pc, #36]	@ (8000e1c <startup+0x98>)
 8000df6:	f001 fb74 	bl	80024e2 <HAL_GPIO_WritePin>
	HAL_Delay(200);
 8000dfa:	20c8      	movs	r0, #200	@ 0xc8
 8000dfc:	f000 fa1e 	bl	800123c <HAL_Delay>
	HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <startup+0x98>)
 8000e08:	f001 fb6b 	bl	80024e2 <HAL_GPIO_WritePin>
	time_ms = HAL_GetTick();
 8000e0c:	f000 fa0c 	bl	8001228 <HAL_GetTick>
 8000e10:	4603      	mov	r3, r0
 8000e12:	4a06      	ldr	r2, [pc, #24]	@ (8000e2c <startup+0xa8>)
 8000e14:	6013      	str	r3, [r2, #0]
}
 8000e16:	bf00      	nop
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40011000 	.word	0x40011000
 8000e20:	200000ec 	.word	0x200000ec
 8000e24:	2000007c 	.word	0x2000007c
 8000e28:	40010c00 	.word	0x40010c00
 8000e2c:	2000012c 	.word	0x2000012c

08000e30 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e34:	b672      	cpsid	i
}
 8000e36:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <Error_Handler+0x24>)
 8000e40:	f001 fb4f 	bl	80024e2 <HAL_GPIO_WritePin>
		HAL_Delay(5000);
 8000e44:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000e48:	f000 f9f8 	bl	800123c <HAL_Delay>
		HAL_NVIC_SystemReset();
 8000e4c:	f001 f99d 	bl	800218a <HAL_NVIC_SystemReset>
		HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000e50:	bf00      	nop
 8000e52:	e7f1      	b.n	8000e38 <Error_Handler+0x8>
 8000e54:	40011000 	.word	0x40011000

08000e58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e5e:	4b15      	ldr	r3, [pc, #84]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e60:	699b      	ldr	r3, [r3, #24]
 8000e62:	4a14      	ldr	r2, [pc, #80]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	6193      	str	r3, [r2, #24]
 8000e6a:	4b12      	ldr	r3, [pc, #72]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e76:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e78:	69db      	ldr	r3, [r3, #28]
 8000e7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e80:	61d3      	str	r3, [r2, #28]
 8000e82:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb4 <HAL_MspInit+0x5c>)
 8000e84:	69db      	ldr	r3, [r3, #28]
 8000e86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e8a:	607b      	str	r3, [r7, #4]
 8000e8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb8 <HAL_MspInit+0x60>)
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	4a04      	ldr	r2, [pc, #16]	@ (8000eb8 <HAL_MspInit+0x60>)
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr
 8000eb4:	40021000 	.word	0x40021000
 8000eb8:	40010000 	.word	0x40010000

08000ebc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	@ 0x28
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec4:	f107 0314 	add.w	r3, r7, #20
 8000ec8:	2200      	movs	r2, #0
 8000eca:	601a      	str	r2, [r3, #0]
 8000ecc:	605a      	str	r2, [r3, #4]
 8000ece:	609a      	str	r2, [r3, #8]
 8000ed0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8000f8c <HAL_CAN_MspInit+0xd0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d153      	bne.n	8000f84 <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000edc:	4b2c      	ldr	r3, [pc, #176]	@ (8000f90 <HAL_CAN_MspInit+0xd4>)
 8000ede:	69db      	ldr	r3, [r3, #28]
 8000ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8000f90 <HAL_CAN_MspInit+0xd4>)
 8000ee2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ee6:	61d3      	str	r3, [r2, #28]
 8000ee8:	4b29      	ldr	r3, [pc, #164]	@ (8000f90 <HAL_CAN_MspInit+0xd4>)
 8000eea:	69db      	ldr	r3, [r3, #28]
 8000eec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef4:	4b26      	ldr	r3, [pc, #152]	@ (8000f90 <HAL_CAN_MspInit+0xd4>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a25      	ldr	r2, [pc, #148]	@ (8000f90 <HAL_CAN_MspInit+0xd4>)
 8000efa:	f043 0308 	orr.w	r3, r3, #8
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b23      	ldr	r3, [pc, #140]	@ (8000f90 <HAL_CAN_MspInit+0xd4>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0308 	and.w	r3, r3, #8
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f0c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	2300      	movs	r3, #0
 8000f18:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	481c      	ldr	r0, [pc, #112]	@ (8000f94 <HAL_CAN_MspInit+0xd8>)
 8000f22:	f001 f943 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000f26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000f2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f30:	2303      	movs	r3, #3
 8000f32:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4816      	ldr	r0, [pc, #88]	@ (8000f94 <HAL_CAN_MspInit+0xd8>)
 8000f3c:	f001 f936 	bl	80021ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000f40:	4b15      	ldr	r3, [pc, #84]	@ (8000f98 <HAL_CAN_MspInit+0xdc>)
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f48:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f50:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000f5e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f98 <HAL_CAN_MspInit+0xdc>)
 8000f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f62:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8000f64:	2200      	movs	r2, #0
 8000f66:	2101      	movs	r1, #1
 8000f68:	2014      	movs	r0, #20
 8000f6a:	f001 f8e4 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000f6e:	2014      	movs	r0, #20
 8000f70:	f001 f8fd 	bl	800216e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8000f74:	2200      	movs	r2, #0
 8000f76:	2102      	movs	r1, #2
 8000f78:	2015      	movs	r0, #21
 8000f7a:	f001 f8dc 	bl	8002136 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000f7e:	2015      	movs	r0, #21
 8000f80:	f001 f8f5 	bl	800216e <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000f84:	bf00      	nop
 8000f86:	3728      	adds	r7, #40	@ 0x28
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40006400 	.word	0x40006400
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40010c00 	.word	0x40010c00
 8000f98:	40010000 	.word	0x40010000

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b088      	sub	sp, #32
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a1c      	ldr	r2, [pc, #112]	@ (8001028 <HAL_UART_MspInit+0x8c>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d131      	bne.n	8001020 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fbc:	4b1b      	ldr	r3, [pc, #108]	@ (800102c <HAL_UART_MspInit+0x90>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800102c <HAL_UART_MspInit+0x90>)
 8000fc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b18      	ldr	r3, [pc, #96]	@ (800102c <HAL_UART_MspInit+0x90>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd0:	60fb      	str	r3, [r7, #12]
 8000fd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b15      	ldr	r3, [pc, #84]	@ (800102c <HAL_UART_MspInit+0x90>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a14      	ldr	r2, [pc, #80]	@ (800102c <HAL_UART_MspInit+0x90>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b12      	ldr	r3, [pc, #72]	@ (800102c <HAL_UART_MspInit+0x90>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	60bb      	str	r3, [r7, #8]
 8000fea:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ff0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	4619      	mov	r1, r3
 8001000:	480b      	ldr	r0, [pc, #44]	@ (8001030 <HAL_UART_MspInit+0x94>)
 8001002:	f001 f8d3 	bl	80021ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001006:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800100a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2300      	movs	r3, #0
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001014:	f107 0310 	add.w	r3, r7, #16
 8001018:	4619      	mov	r1, r3
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <HAL_UART_MspInit+0x94>)
 800101c:	f001 f8c6 	bl	80021ac <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8001020:	bf00      	nop
 8001022:	3720      	adds	r7, #32
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40013800 	.word	0x40013800
 800102c:	40021000 	.word	0x40021000
 8001030:	40010800 	.word	0x40010800

08001034 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <NMI_Handler+0x4>

0800103c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <HardFault_Handler+0x4>

08001044 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <MemManage_Handler+0x4>

0800104c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <BusFault_Handler+0x4>

08001054 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001058:	bf00      	nop
 800105a:	e7fd      	b.n	8001058 <UsageFault_Handler+0x4>

0800105c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001084:	f000 f8be 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	bd80      	pop	{r7, pc}

0800108c <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001092:	f000 fd48 	bl	8001b26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	2000007c 	.word	0x2000007c

080010a0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 80010a4:	4802      	ldr	r0, [pc, #8]	@ (80010b0 <CAN1_RX1_IRQHandler+0x10>)
 80010a6:	f000 fd3e 	bl	8001b26 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	2000007c 	.word	0x2000007c

080010b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010bc:	4a14      	ldr	r2, [pc, #80]	@ (8001110 <_sbrk+0x5c>)
 80010be:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <_sbrk+0x60>)
 80010c0:	1ad3      	subs	r3, r2, r3
 80010c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010c8:	4b13      	ldr	r3, [pc, #76]	@ (8001118 <_sbrk+0x64>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d102      	bne.n	80010d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010d0:	4b11      	ldr	r3, [pc, #68]	@ (8001118 <_sbrk+0x64>)
 80010d2:	4a12      	ldr	r2, [pc, #72]	@ (800111c <_sbrk+0x68>)
 80010d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010d6:	4b10      	ldr	r3, [pc, #64]	@ (8001118 <_sbrk+0x64>)
 80010d8:	681a      	ldr	r2, [r3, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4413      	add	r3, r2
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d207      	bcs.n	80010f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010e4:	f002 f88a 	bl	80031fc <__errno>
 80010e8:	4603      	mov	r3, r0
 80010ea:	220c      	movs	r2, #12
 80010ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010ee:	f04f 33ff 	mov.w	r3, #4294967295
 80010f2:	e009      	b.n	8001108 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010f4:	4b08      	ldr	r3, [pc, #32]	@ (8001118 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <_sbrk+0x64>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4413      	add	r3, r2
 8001102:	4a05      	ldr	r2, [pc, #20]	@ (8001118 <_sbrk+0x64>)
 8001104:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001106:	68fb      	ldr	r3, [r7, #12]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20005000 	.word	0x20005000
 8001114:	00000400 	.word	0x00000400
 8001118:	200001b0 	.word	0x200001b0
 800111c:	20000300 	.word	0x20000300

08001120 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800112c:	f7ff fff8 	bl	8001120 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001130:	480b      	ldr	r0, [pc, #44]	@ (8001160 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001132:	490c      	ldr	r1, [pc, #48]	@ (8001164 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001134:	4a0c      	ldr	r2, [pc, #48]	@ (8001168 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001136:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001138:	e002      	b.n	8001140 <LoopCopyDataInit>

0800113a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800113c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113e:	3304      	adds	r3, #4

08001140 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001140:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001142:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001144:	d3f9      	bcc.n	800113a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001146:	4a09      	ldr	r2, [pc, #36]	@ (800116c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001148:	4c09      	ldr	r4, [pc, #36]	@ (8001170 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800114a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800114c:	e001      	b.n	8001152 <LoopFillZerobss>

0800114e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001150:	3204      	adds	r2, #4

08001152 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001152:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001154:	d3fb      	bcc.n	800114e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001156:	f002 f857 	bl	8003208 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800115a:	f7ff f8a3 	bl	80002a4 <main>
  bx lr
 800115e:	4770      	bx	lr
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001168:	08003bb8 	.word	0x08003bb8
  ldr r2, =_sbss
 800116c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001170:	20000300 	.word	0x20000300

08001174 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC1_2_IRQHandler>
	...

08001178 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <HAL_Init+0x28>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	@ (80011a0 <HAL_Init+0x28>)
 8001182:	f043 0310 	orr.w	r3, r3, #16
 8001186:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 ffc9 	bl	8002120 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	200f      	movs	r0, #15
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fe60 	bl	8000e58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40022000 	.word	0x40022000

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	@ (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 ffe5 	bl	8002192 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295
 80011e0:	f000 ffa9 	bl	8002136 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	@ (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000004 	.word	0x20000004
 80011fc:	2000000c 	.word	0x2000000c
 8001200:	20000008 	.word	0x20000008

08001204 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b05      	ldr	r3, [pc, #20]	@ (8001220 <HAL_IncTick+0x1c>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <HAL_IncTick+0x20>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a03      	ldr	r2, [pc, #12]	@ (8001224 <HAL_IncTick+0x20>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr
 8001220:	2000000c 	.word	0x2000000c
 8001224:	200001b4 	.word	0x200001b4

08001228 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return uwTick;
 800122c:	4b02      	ldr	r3, [pc, #8]	@ (8001238 <HAL_GetTick+0x10>)
 800122e:	681b      	ldr	r3, [r3, #0]
}
 8001230:	4618      	mov	r0, r3
 8001232:	46bd      	mov	sp, r7
 8001234:	bc80      	pop	{r7}
 8001236:	4770      	bx	lr
 8001238:	200001b4 	.word	0x200001b4

0800123c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001244:	f7ff fff0 	bl	8001228 <HAL_GetTick>
 8001248:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001254:	d005      	beq.n	8001262 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001256:	4b0a      	ldr	r3, [pc, #40]	@ (8001280 <HAL_Delay+0x44>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	461a      	mov	r2, r3
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4413      	add	r3, r2
 8001260:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001262:	bf00      	nop
 8001264:	f7ff ffe0 	bl	8001228 <HAL_GetTick>
 8001268:	4602      	mov	r2, r0
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	68fa      	ldr	r2, [r7, #12]
 8001270:	429a      	cmp	r2, r3
 8001272:	d8f7      	bhi.n	8001264 <HAL_Delay+0x28>
  {
  }
}
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	2000000c 	.word	0x2000000c

08001284 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d101      	bne.n	8001296 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e0ed      	b.n	8001472 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800129c:	b2db      	uxtb	r3, r3
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fe0a 	bl	8000ebc <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	681a      	ldr	r2, [r3, #0]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f042 0201 	orr.w	r2, r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80012b8:	f7ff ffb6 	bl	8001228 <HAL_GetTick>
 80012bc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012be:	e012      	b.n	80012e6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80012c0:	f7ff ffb2 	bl	8001228 <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b0a      	cmp	r3, #10
 80012cc:	d90b      	bls.n	80012e6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2205      	movs	r2, #5
 80012de:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	e0c5      	b.n	8001472 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f003 0301 	and.w	r3, r3, #1
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d0e5      	beq.n	80012c0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0202 	bic.w	r2, r2, #2
 8001302:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001304:	f7ff ff90 	bl	8001228 <HAL_GetTick>
 8001308:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800130a:	e012      	b.n	8001332 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800130c:	f7ff ff8c 	bl	8001228 <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b0a      	cmp	r3, #10
 8001318:	d90b      	bls.n	8001332 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800131e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2205      	movs	r2, #5
 800132a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e09f      	b.n	8001472 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f003 0302 	and.w	r3, r3, #2
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1e5      	bne.n	800130c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e1b      	ldrb	r3, [r3, #24]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d108      	bne.n	800135a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	e007      	b.n	800136a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001368:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	7e5b      	ldrb	r3, [r3, #25]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d108      	bne.n	8001384 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	e007      	b.n	8001394 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001392:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	7e9b      	ldrb	r3, [r3, #26]
 8001398:	2b01      	cmp	r3, #1
 800139a:	d108      	bne.n	80013ae <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f042 0220 	orr.w	r2, r2, #32
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	e007      	b.n	80013be <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 0220 	bic.w	r2, r2, #32
 80013bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	7edb      	ldrb	r3, [r3, #27]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d108      	bne.n	80013d8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	681a      	ldr	r2, [r3, #0]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0210 	bic.w	r2, r2, #16
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	e007      	b.n	80013e8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f042 0210 	orr.w	r2, r2, #16
 80013e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	7f1b      	ldrb	r3, [r3, #28]
 80013ec:	2b01      	cmp	r3, #1
 80013ee:	d108      	bne.n	8001402 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f042 0208 	orr.w	r2, r2, #8
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	e007      	b.n	8001412 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f022 0208 	bic.w	r2, r2, #8
 8001410:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7f5b      	ldrb	r3, [r3, #29]
 8001416:	2b01      	cmp	r3, #1
 8001418:	d108      	bne.n	800142c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 0204 	orr.w	r2, r2, #4
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e007      	b.n	800143c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0204 	bic.w	r2, r2, #4
 800143a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	689a      	ldr	r2, [r3, #8]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	431a      	orrs	r2, r3
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	691b      	ldr	r3, [r3, #16]
 800144a:	431a      	orrs	r2, r3
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	695b      	ldr	r3, [r3, #20]
 8001450:	ea42 0103 	orr.w	r1, r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	1e5a      	subs	r2, r3, #1
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	430a      	orrs	r2, r1
 8001460:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2200      	movs	r2, #0
 8001466:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	2201      	movs	r2, #1
 800146c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800147a:	b480      	push	{r7}
 800147c:	b087      	sub	sp, #28
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001490:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001492:	7cfb      	ldrb	r3, [r7, #19]
 8001494:	2b01      	cmp	r3, #1
 8001496:	d003      	beq.n	80014a0 <HAL_CAN_ConfigFilter+0x26>
 8001498:	7cfb      	ldrb	r3, [r7, #19]
 800149a:	2b02      	cmp	r3, #2
 800149c:	f040 80aa 	bne.w	80015f4 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80014a6:	f043 0201 	orr.w	r2, r3, #1
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	695b      	ldr	r3, [r3, #20]
 80014b4:	f003 031f 	and.w	r3, r3, #31
 80014b8:	2201      	movs	r2, #1
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	401a      	ands	r2, r3
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	69db      	ldr	r3, [r3, #28]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d123      	bne.n	8001522 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	401a      	ands	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014f8:	683a      	ldr	r2, [r7, #0]
 80014fa:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80014fc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	3248      	adds	r2, #72	@ 0x48
 8001502:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	689b      	ldr	r3, [r3, #8]
 800150a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001516:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001518:	6979      	ldr	r1, [r7, #20]
 800151a:	3348      	adds	r3, #72	@ 0x48
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	2b01      	cmp	r3, #1
 8001528:	d122      	bne.n	8001570 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	431a      	orrs	r2, r3
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001546:	683a      	ldr	r2, [r7, #0]
 8001548:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800154a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	3248      	adds	r2, #72	@ 0x48
 8001550:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001564:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001566:	6979      	ldr	r1, [r7, #20]
 8001568:	3348      	adds	r3, #72	@ 0x48
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	440b      	add	r3, r1
 800156e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	699b      	ldr	r3, [r3, #24]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d109      	bne.n	800158c <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	401a      	ands	r2, r3
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 800158a:	e007      	b.n	800159c <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	431a      	orrs	r2, r3
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d109      	bne.n	80015b8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80015b6:	e007      	b.n	80015c8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	431a      	orrs	r2, r3
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d107      	bne.n	80015e0 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	431a      	orrs	r2, r3
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80015e6:	f023 0201 	bic.w	r2, r3, #1
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	e006      	b.n	8001602 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015f8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
  }
}
 8001602:	4618      	mov	r0, r3
 8001604:	371c      	adds	r7, #28
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f893 3020 	ldrb.w	r3, [r3, #32]
 800161a:	b2db      	uxtb	r3, r3
 800161c:	2b01      	cmp	r3, #1
 800161e:	d12e      	bne.n	800167e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2202      	movs	r2, #2
 8001624:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0201 	bic.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001638:	f7ff fdf6 	bl	8001228 <HAL_GetTick>
 800163c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800163e:	e012      	b.n	8001666 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001640:	f7ff fdf2 	bl	8001228 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b0a      	cmp	r3, #10
 800164c:	d90b      	bls.n	8001666 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001652:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2205      	movs	r2, #5
 800165e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	e012      	b.n	800168c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b00      	cmp	r3, #0
 8001672:	d1e5      	bne.n	8001640 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800167a:	2300      	movs	r3, #0
 800167c:	e006      	b.n	800168c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001682:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
  }
}
 800168c:	4618      	mov	r0, r3
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001694:	b480      	push	{r7}
 8001696:	b089      	sub	sp, #36	@ 0x24
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
 80016a0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016a8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80016b2:	7ffb      	ldrb	r3, [r7, #31]
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d003      	beq.n	80016c0 <HAL_CAN_AddTxMessage+0x2c>
 80016b8:	7ffb      	ldrb	r3, [r7, #31]
 80016ba:	2b02      	cmp	r3, #2
 80016bc:	f040 80ad 	bne.w	800181a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10a      	bne.n	80016e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016ca:	69bb      	ldr	r3, [r7, #24]
 80016cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d105      	bne.n	80016e0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8095 	beq.w	800180a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	0e1b      	lsrs	r3, r3, #24
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80016ea:	2201      	movs	r2, #1
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	409a      	lsls	r2, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	689b      	ldr	r3, [r3, #8]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d10d      	bne.n	8001718 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001702:	68bb      	ldr	r3, [r7, #8]
 8001704:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001706:	68f9      	ldr	r1, [r7, #12]
 8001708:	6809      	ldr	r1, [r1, #0]
 800170a:	431a      	orrs	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	3318      	adds	r3, #24
 8001710:	011b      	lsls	r3, r3, #4
 8001712:	440b      	add	r3, r1
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	e00f      	b.n	8001738 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001722:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001728:	68f9      	ldr	r1, [r7, #12]
 800172a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800172c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3318      	adds	r3, #24
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	440b      	add	r3, r1
 8001736:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	6819      	ldr	r1, [r3, #0]
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	691a      	ldr	r2, [r3, #16]
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3318      	adds	r3, #24
 8001744:	011b      	lsls	r3, r3, #4
 8001746:	440b      	add	r3, r1
 8001748:	3304      	adds	r3, #4
 800174a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	7d1b      	ldrb	r3, [r3, #20]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d111      	bne.n	8001778 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	3318      	adds	r3, #24
 800175c:	011b      	lsls	r3, r3, #4
 800175e:	4413      	add	r3, r2
 8001760:	3304      	adds	r3, #4
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	6811      	ldr	r1, [r2, #0]
 8001768:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	3318      	adds	r3, #24
 8001770:	011b      	lsls	r3, r3, #4
 8001772:	440b      	add	r3, r1
 8001774:	3304      	adds	r3, #4
 8001776:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3307      	adds	r3, #7
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	061a      	lsls	r2, r3, #24
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3306      	adds	r3, #6
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	041b      	lsls	r3, r3, #16
 8001788:	431a      	orrs	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	3305      	adds	r3, #5
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	4313      	orrs	r3, r2
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	3204      	adds	r2, #4
 8001798:	7812      	ldrb	r2, [r2, #0]
 800179a:	4610      	mov	r0, r2
 800179c:	68fa      	ldr	r2, [r7, #12]
 800179e:	6811      	ldr	r1, [r2, #0]
 80017a0:	ea43 0200 	orr.w	r2, r3, r0
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	011b      	lsls	r3, r3, #4
 80017a8:	440b      	add	r3, r1
 80017aa:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80017ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3303      	adds	r3, #3
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	061a      	lsls	r2, r3, #24
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	3302      	adds	r3, #2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	041b      	lsls	r3, r3, #16
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	3301      	adds	r3, #1
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	4313      	orrs	r3, r2
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	7812      	ldrb	r2, [r2, #0]
 80017d0:	4610      	mov	r0, r2
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	6811      	ldr	r1, [r2, #0]
 80017d6:	ea43 0200 	orr.w	r2, r3, r0
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	011b      	lsls	r3, r3, #4
 80017de:	440b      	add	r3, r1
 80017e0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80017e4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	681a      	ldr	r2, [r3, #0]
 80017ea:	697b      	ldr	r3, [r7, #20]
 80017ec:	3318      	adds	r3, #24
 80017ee:	011b      	lsls	r3, r3, #4
 80017f0:	4413      	add	r3, r2
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	6811      	ldr	r1, [r2, #0]
 80017f8:	f043 0201 	orr.w	r2, r3, #1
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	3318      	adds	r3, #24
 8001800:	011b      	lsls	r3, r3, #4
 8001802:	440b      	add	r3, r1
 8001804:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e00e      	b.n	8001828 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e006      	b.n	8001828 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800181e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
  }
}
 8001828:	4618      	mov	r0, r3
 800182a:	3724      	adds	r7, #36	@ 0x24
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr

08001832 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8001832:	b480      	push	{r7}
 8001834:	b085      	sub	sp, #20
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001844:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001846:	7afb      	ldrb	r3, [r7, #11]
 8001848:	2b01      	cmp	r3, #1
 800184a:	d002      	beq.n	8001852 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800184c:	7afb      	ldrb	r3, [r7, #11]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d11d      	bne.n	800188e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	689b      	ldr	r3, [r3, #8]
 8001858:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d002      	beq.n	8001866 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3301      	adds	r3, #1
 8001864:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d002      	beq.n	800187a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3301      	adds	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800188e:	68fb      	ldr	r3, [r7, #12]
}
 8001890:	4618      	mov	r0, r3
 8001892:	3714      	adds	r7, #20
 8001894:	46bd      	mov	sp, r7
 8001896:	bc80      	pop	{r7}
 8001898:	4770      	bx	lr

0800189a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800189a:	b480      	push	{r7}
 800189c:	b087      	sub	sp, #28
 800189e:	af00      	add	r7, sp, #0
 80018a0:	60f8      	str	r0, [r7, #12]
 80018a2:	60b9      	str	r1, [r7, #8]
 80018a4:	607a      	str	r2, [r7, #4]
 80018a6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018ae:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018b0:	7dfb      	ldrb	r3, [r7, #23]
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d003      	beq.n	80018be <HAL_CAN_GetRxMessage+0x24>
 80018b6:	7dfb      	ldrb	r3, [r7, #23]
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	f040 8103 	bne.w	8001ac4 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10e      	bne.n	80018e2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	f003 0303 	and.w	r3, r3, #3
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d116      	bne.n	8001900 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018d6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0f7      	b.n	8001ad2 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d107      	bne.n	8001900 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e0e8      	b.n	8001ad2 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	331b      	adds	r3, #27
 8001908:	011b      	lsls	r3, r3, #4
 800190a:	4413      	add	r3, r2
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0204 	and.w	r2, r3, #4
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d10c      	bne.n	8001938 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	68bb      	ldr	r3, [r7, #8]
 8001924:	331b      	adds	r3, #27
 8001926:	011b      	lsls	r3, r3, #4
 8001928:	4413      	add	r3, r2
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	0d5b      	lsrs	r3, r3, #21
 800192e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e00b      	b.n	8001950 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681a      	ldr	r2, [r3, #0]
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	331b      	adds	r3, #27
 8001940:	011b      	lsls	r3, r3, #4
 8001942:	4413      	add	r3, r2
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	08db      	lsrs	r3, r3, #3
 8001948:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	331b      	adds	r3, #27
 8001958:	011b      	lsls	r3, r3, #4
 800195a:	4413      	add	r3, r2
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f003 0202 	and.w	r2, r3, #2
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	331b      	adds	r3, #27
 800196e:	011b      	lsls	r3, r3, #4
 8001970:	4413      	add	r3, r2
 8001972:	3304      	adds	r3, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	2b00      	cmp	r3, #0
 800197c:	d003      	beq.n	8001986 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2208      	movs	r2, #8
 8001982:	611a      	str	r2, [r3, #16]
 8001984:	e00b      	b.n	800199e <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	331b      	adds	r3, #27
 800198e:	011b      	lsls	r3, r3, #4
 8001990:	4413      	add	r3, r2
 8001992:	3304      	adds	r3, #4
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 020f 	and.w	r2, r3, #15
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	331b      	adds	r3, #27
 80019a6:	011b      	lsls	r3, r3, #4
 80019a8:	4413      	add	r3, r2
 80019aa:	3304      	adds	r3, #4
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	0a1b      	lsrs	r3, r3, #8
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	331b      	adds	r3, #27
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4413      	add	r3, r2
 80019c2:	3304      	adds	r3, #4
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	0c1b      	lsrs	r3, r3, #16
 80019c8:	b29a      	uxth	r2, r3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	011b      	lsls	r3, r3, #4
 80019d6:	4413      	add	r3, r2
 80019d8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	011b      	lsls	r3, r3, #4
 80019ec:	4413      	add	r3, r2
 80019ee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	0a1a      	lsrs	r2, r3, #8
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	3301      	adds	r3, #1
 80019fa:	b2d2      	uxtb	r2, r2
 80019fc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	011b      	lsls	r3, r3, #4
 8001a06:	4413      	add	r3, r2
 8001a08:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	0c1a      	lsrs	r2, r3, #16
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	3302      	adds	r3, #2
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	011b      	lsls	r3, r3, #4
 8001a20:	4413      	add	r3, r2
 8001a22:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	0e1a      	lsrs	r2, r3, #24
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	3303      	adds	r3, #3
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	011b      	lsls	r3, r3, #4
 8001a3a:	4413      	add	r3, r2
 8001a3c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	3304      	adds	r3, #4
 8001a46:	b2d2      	uxtb	r2, r2
 8001a48:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	011b      	lsls	r3, r3, #4
 8001a52:	4413      	add	r3, r2
 8001a54:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	0a1a      	lsrs	r2, r3, #8
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	3305      	adds	r3, #5
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681a      	ldr	r2, [r3, #0]
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	011b      	lsls	r3, r3, #4
 8001a6c:	4413      	add	r3, r2
 8001a6e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	0c1a      	lsrs	r2, r3, #16
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	3306      	adds	r3, #6
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	68bb      	ldr	r3, [r7, #8]
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	0e1a      	lsrs	r2, r3, #24
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	3307      	adds	r3, #7
 8001a94:	b2d2      	uxtb	r2, r2
 8001a96:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d108      	bne.n	8001ab0 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f042 0220 	orr.w	r2, r2, #32
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	e007      	b.n	8001ac0 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	691a      	ldr	r2, [r3, #16]
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0220 	orr.w	r2, r2, #32
 8001abe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	e006      	b.n	8001ad2 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
  }
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	371c      	adds	r7, #28
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr

08001adc <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aec:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aee:	7bfb      	ldrb	r3, [r7, #15]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d002      	beq.n	8001afa <HAL_CAN_ActivateNotification+0x1e>
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d109      	bne.n	8001b0e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	6959      	ldr	r1, [r3, #20]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	e006      	b.n	8001b1c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b12:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
  }
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	3714      	adds	r7, #20
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bc80      	pop	{r7}
 8001b24:	4770      	bx	lr

08001b26 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b08a      	sub	sp, #40	@ 0x28
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	699b      	ldr	r3, [r3, #24]
 8001b60:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b62:	6a3b      	ldr	r3, [r7, #32]
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d07c      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d023      	beq.n	8001bbe <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001b7e:	69bb      	ldr	r3, [r7, #24]
 8001b80:	f003 0302 	and.w	r3, r3, #2
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001b88:	6878      	ldr	r0, [r7, #4]
 8001b8a:	f000 f983 	bl	8001e94 <HAL_CAN_TxMailbox0CompleteCallback>
 8001b8e:	e016      	b.n	8001bbe <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	f003 0304 	and.w	r3, r3, #4
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b9c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001ba0:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ba2:	e00c      	b.n	8001bbe <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d004      	beq.n	8001bb8 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bb4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bb6:	e002      	b.n	8001bbe <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 f986 	bl	8001eca <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d024      	beq.n	8001c12 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bd0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d003      	beq.n	8001be4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	f000 f962 	bl	8001ea6 <HAL_CAN_TxMailbox1CompleteCallback>
 8001be2:	e016      	b.n	8001c12 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d004      	beq.n	8001bf8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bf0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bf6:	e00c      	b.n	8001c12 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d004      	beq.n	8001c0c <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c0a:	e002      	b.n	8001c12 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 f965 	bl	8001edc <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d024      	beq.n	8001c66 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c24:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d003      	beq.n	8001c38 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f000 f941 	bl	8001eb8 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c36:	e016      	b.n	8001c66 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d004      	beq.n	8001c4c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c44:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c4a:	e00c      	b.n	8001c66 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d004      	beq.n	8001c60 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c5e:	e002      	b.n	8001c66 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f944 	bl	8001eee <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d00c      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0310 	and.w	r3, r3, #16
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d007      	beq.n	8001c8a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c80:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2210      	movs	r2, #16
 8001c88:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001c8a:	6a3b      	ldr	r3, [r7, #32]
 8001c8c:	f003 0304 	and.w	r3, r3, #4
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00b      	beq.n	8001cac <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 0308 	and.w	r3, r3, #8
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2208      	movs	r2, #8
 8001ca4:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f92a 	bl	8001f00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cac:	6a3b      	ldr	r3, [r7, #32]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d009      	beq.n	8001cca <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d002      	beq.n	8001cca <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f7fe fa65 	bl	8000194 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d00c      	beq.n	8001cee <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	f003 0310 	and.w	r3, r3, #16
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d007      	beq.n	8001cee <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ce4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	2210      	movs	r2, #16
 8001cec:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001cee:	6a3b      	ldr	r3, [r7, #32]
 8001cf0:	f003 0320 	and.w	r3, r3, #32
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00b      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	2208      	movs	r2, #8
 8001d08:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f90a 	bl	8001f24 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d10:	6a3b      	ldr	r3, [r7, #32]
 8001d12:	f003 0310 	and.w	r3, r3, #16
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	691b      	ldr	r3, [r3, #16]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d002      	beq.n	8001d2e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f8f2 	bl	8001f12 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d2e:	6a3b      	ldr	r3, [r7, #32]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00b      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0310 	and.w	r3, r3, #16
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d006      	beq.n	8001d50 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	2210      	movs	r2, #16
 8001d48:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 f8f3 	bl	8001f36 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d50:	6a3b      	ldr	r3, [r7, #32]
 8001d52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00b      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	f003 0308 	and.w	r3, r3, #8
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d006      	beq.n	8001d72 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	2208      	movs	r2, #8
 8001d6a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8eb 	bl	8001f48 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d72:	6a3b      	ldr	r3, [r7, #32]
 8001d74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d07b      	beq.n	8001e74 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d072      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d86:	6a3b      	ldr	r3, [r7, #32]
 8001d88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d008      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001d9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9c:	f043 0301 	orr.w	r3, r3, #1
 8001da0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d008      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d003      	beq.n	8001dbe <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db8:	f043 0302 	orr.w	r3, r3, #2
 8001dbc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d008      	beq.n	8001dda <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d043      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d03e      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001df4:	2b60      	cmp	r3, #96	@ 0x60
 8001df6:	d02b      	beq.n	8001e50 <HAL_CAN_IRQHandler+0x32a>
 8001df8:	2b60      	cmp	r3, #96	@ 0x60
 8001dfa:	d82e      	bhi.n	8001e5a <HAL_CAN_IRQHandler+0x334>
 8001dfc:	2b50      	cmp	r3, #80	@ 0x50
 8001dfe:	d022      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x320>
 8001e00:	2b50      	cmp	r3, #80	@ 0x50
 8001e02:	d82a      	bhi.n	8001e5a <HAL_CAN_IRQHandler+0x334>
 8001e04:	2b40      	cmp	r3, #64	@ 0x40
 8001e06:	d019      	beq.n	8001e3c <HAL_CAN_IRQHandler+0x316>
 8001e08:	2b40      	cmp	r3, #64	@ 0x40
 8001e0a:	d826      	bhi.n	8001e5a <HAL_CAN_IRQHandler+0x334>
 8001e0c:	2b30      	cmp	r3, #48	@ 0x30
 8001e0e:	d010      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x30c>
 8001e10:	2b30      	cmp	r3, #48	@ 0x30
 8001e12:	d822      	bhi.n	8001e5a <HAL_CAN_IRQHandler+0x334>
 8001e14:	2b10      	cmp	r3, #16
 8001e16:	d002      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x2f8>
 8001e18:	2b20      	cmp	r3, #32
 8001e1a:	d005      	beq.n	8001e28 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e1c:	e01d      	b.n	8001e5a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e20:	f043 0308 	orr.w	r3, r3, #8
 8001e24:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e26:	e019      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	f043 0310 	orr.w	r3, r3, #16
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e30:	e014      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e34:	f043 0320 	orr.w	r3, r3, #32
 8001e38:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e3a:	e00f      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e44:	e00a      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e48:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e4c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e4e:	e005      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e56:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e58:	e000      	b.n	8001e5c <HAL_CAN_IRQHandler+0x336>
            break;
 8001e5a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e6a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2204      	movs	r2, #4
 8001e72:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d008      	beq.n	8001e8c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7fe fa02 	bl	8000290 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001e8c:	bf00      	nop
 8001e8e:	3728      	adds	r7, #40	@ 0x28
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}

08001e94 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b083      	sub	sp, #12
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001e9c:	bf00      	nop
 8001e9e:	370c      	adds	r7, #12
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bc80      	pop	{r7}
 8001ec8:	4770      	bx	lr

08001eca <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001ed2:	bf00      	nop
 8001ed4:	370c      	adds	r7, #12
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bc80      	pop	{r7}
 8001eda:	4770      	bx	lr

08001edc <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b083      	sub	sp, #12
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001ee4:	bf00      	nop
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bc80      	pop	{r7}
 8001eec:	4770      	bx	lr

08001eee <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	b083      	sub	sp, #12
 8001ef2:	af00      	add	r7, sp, #0
 8001ef4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001ef6:	bf00      	nop
 8001ef8:	370c      	adds	r7, #12
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bc80      	pop	{r7}
 8001efe:	4770      	bx	lr

08001f00 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f08:	bf00      	nop
 8001f0a:	370c      	adds	r7, #12
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr

08001f12 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f2c:	bf00      	nop
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bc80      	pop	{r7}
 8001f34:	4770      	bx	lr

08001f36 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bc80      	pop	{r7}
 8001f46:	4770      	bx	lr

08001f48 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f50:	bf00      	nop
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bc80      	pop	{r7}
 8001f58:	4770      	bx	lr
	...

08001f5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b085      	sub	sp, #20
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	f003 0307 	and.w	r3, r3, #7
 8001f6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f6c:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f78:	4013      	ands	r3, r2
 8001f7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f8e:	4a04      	ldr	r2, [pc, #16]	@ (8001fa0 <__NVIC_SetPriorityGrouping+0x44>)
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3714      	adds	r7, #20
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc80      	pop	{r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	e000ed00 	.word	0xe000ed00

08001fa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	@ (8001fbc <__NVIC_GetPriorityGrouping+0x18>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	0a1b      	lsrs	r3, r3, #8
 8001fae:	f003 0307 	and.w	r3, r3, #7
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bc80      	pop	{r7}
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	e000ed00 	.word	0xe000ed00

08001fc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	db0b      	blt.n	8001fea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	f003 021f 	and.w	r2, r3, #31
 8001fd8:	4906      	ldr	r1, [pc, #24]	@ (8001ff4 <__NVIC_EnableIRQ+0x34>)
 8001fda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fde:	095b      	lsrs	r3, r3, #5
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bc80      	pop	{r7}
 8001ff2:	4770      	bx	lr
 8001ff4:	e000e100 	.word	0xe000e100

08001ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	4603      	mov	r3, r0
 8002000:	6039      	str	r1, [r7, #0]
 8002002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	db0a      	blt.n	8002022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	b2da      	uxtb	r2, r3
 8002010:	490c      	ldr	r1, [pc, #48]	@ (8002044 <__NVIC_SetPriority+0x4c>)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	0112      	lsls	r2, r2, #4
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	440b      	add	r3, r1
 800201c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002020:	e00a      	b.n	8002038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	b2da      	uxtb	r2, r3
 8002026:	4908      	ldr	r1, [pc, #32]	@ (8002048 <__NVIC_SetPriority+0x50>)
 8002028:	79fb      	ldrb	r3, [r7, #7]
 800202a:	f003 030f 	and.w	r3, r3, #15
 800202e:	3b04      	subs	r3, #4
 8002030:	0112      	lsls	r2, r2, #4
 8002032:	b2d2      	uxtb	r2, r2
 8002034:	440b      	add	r3, r1
 8002036:	761a      	strb	r2, [r3, #24]
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	bc80      	pop	{r7}
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	e000e100 	.word	0xe000e100
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800204c:	b480      	push	{r7}
 800204e:	b089      	sub	sp, #36	@ 0x24
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f003 0307 	and.w	r3, r3, #7
 800205e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	f1c3 0307 	rsb	r3, r3, #7
 8002066:	2b04      	cmp	r3, #4
 8002068:	bf28      	it	cs
 800206a:	2304      	movcs	r3, #4
 800206c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800206e:	69fb      	ldr	r3, [r7, #28]
 8002070:	3304      	adds	r3, #4
 8002072:	2b06      	cmp	r3, #6
 8002074:	d902      	bls.n	800207c <NVIC_EncodePriority+0x30>
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	3b03      	subs	r3, #3
 800207a:	e000      	b.n	800207e <NVIC_EncodePriority+0x32>
 800207c:	2300      	movs	r3, #0
 800207e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002080:	f04f 32ff 	mov.w	r2, #4294967295
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	401a      	ands	r2, r3
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002094:	f04f 31ff 	mov.w	r1, #4294967295
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	43d9      	mvns	r1, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020a4:	4313      	orrs	r3, r2
         );
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3724      	adds	r7, #36	@ 0x24
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr

080020b0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80020b4:	f3bf 8f4f 	dsb	sy
}
 80020b8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <__NVIC_SystemReset+0x24>)
 80020bc:	68db      	ldr	r3, [r3, #12]
 80020be:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80020c2:	4904      	ldr	r1, [pc, #16]	@ (80020d4 <__NVIC_SystemReset+0x24>)
 80020c4:	4b04      	ldr	r3, [pc, #16]	@ (80020d8 <__NVIC_SystemReset+0x28>)
 80020c6:	4313      	orrs	r3, r2
 80020c8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80020ca:	f3bf 8f4f 	dsb	sy
}
 80020ce:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <__NVIC_SystemReset+0x20>
 80020d4:	e000ed00 	.word	0xe000ed00
 80020d8:	05fa0004 	.word	0x05fa0004

080020dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3b01      	subs	r3, #1
 80020e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020ec:	d301      	bcc.n	80020f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ee:	2301      	movs	r3, #1
 80020f0:	e00f      	b.n	8002112 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020f2:	4a0a      	ldr	r2, [pc, #40]	@ (800211c <SysTick_Config+0x40>)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020fa:	210f      	movs	r1, #15
 80020fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002100:	f7ff ff7a 	bl	8001ff8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002104:	4b05      	ldr	r3, [pc, #20]	@ (800211c <SysTick_Config+0x40>)
 8002106:	2200      	movs	r2, #0
 8002108:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800210a:	4b04      	ldr	r3, [pc, #16]	@ (800211c <SysTick_Config+0x40>)
 800210c:	2207      	movs	r2, #7
 800210e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	e000e010 	.word	0xe000e010

08002120 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff17 	bl	8001f5c <__NVIC_SetPriorityGrouping>
}
 800212e:	bf00      	nop
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002136:	b580      	push	{r7, lr}
 8002138:	b086      	sub	sp, #24
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	60b9      	str	r1, [r7, #8]
 8002140:	607a      	str	r2, [r7, #4]
 8002142:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002148:	f7ff ff2c 	bl	8001fa4 <__NVIC_GetPriorityGrouping>
 800214c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	68b9      	ldr	r1, [r7, #8]
 8002152:	6978      	ldr	r0, [r7, #20]
 8002154:	f7ff ff7a 	bl	800204c <NVIC_EncodePriority>
 8002158:	4602      	mov	r2, r0
 800215a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800215e:	4611      	mov	r1, r2
 8002160:	4618      	mov	r0, r3
 8002162:	f7ff ff49 	bl	8001ff8 <__NVIC_SetPriority>
}
 8002166:	bf00      	nop
 8002168:	3718      	adds	r7, #24
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b082      	sub	sp, #8
 8002172:	af00      	add	r7, sp, #0
 8002174:	4603      	mov	r3, r0
 8002176:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff1f 	bl	8001fc0 <__NVIC_EnableIRQ>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800218e:	f7ff ff8f 	bl	80020b0 <__NVIC_SystemReset>

08002192 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f7ff ff9e 	bl	80020dc <SysTick_Config>
 80021a0:	4603      	mov	r3, r0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3708      	adds	r7, #8
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
	...

080021ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b08b      	sub	sp, #44	@ 0x2c
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021b6:	2300      	movs	r3, #0
 80021b8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ba:	2300      	movs	r3, #0
 80021bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021be:	e169      	b.n	8002494 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021c0:	2201      	movs	r2, #1
 80021c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	4013      	ands	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	429a      	cmp	r2, r3
 80021da:	f040 8158 	bne.w	800248e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	4a9a      	ldr	r2, [pc, #616]	@ (800244c <HAL_GPIO_Init+0x2a0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d05e      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 80021e8:	4a98      	ldr	r2, [pc, #608]	@ (800244c <HAL_GPIO_Init+0x2a0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d875      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 80021ee:	4a98      	ldr	r2, [pc, #608]	@ (8002450 <HAL_GPIO_Init+0x2a4>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d058      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 80021f4:	4a96      	ldr	r2, [pc, #600]	@ (8002450 <HAL_GPIO_Init+0x2a4>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d86f      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 80021fa:	4a96      	ldr	r2, [pc, #600]	@ (8002454 <HAL_GPIO_Init+0x2a8>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d052      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 8002200:	4a94      	ldr	r2, [pc, #592]	@ (8002454 <HAL_GPIO_Init+0x2a8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d869      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002206:	4a94      	ldr	r2, [pc, #592]	@ (8002458 <HAL_GPIO_Init+0x2ac>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d04c      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 800220c:	4a92      	ldr	r2, [pc, #584]	@ (8002458 <HAL_GPIO_Init+0x2ac>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d863      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002212:	4a92      	ldr	r2, [pc, #584]	@ (800245c <HAL_GPIO_Init+0x2b0>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d046      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
 8002218:	4a90      	ldr	r2, [pc, #576]	@ (800245c <HAL_GPIO_Init+0x2b0>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d85d      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 800221e:	2b12      	cmp	r3, #18
 8002220:	d82a      	bhi.n	8002278 <HAL_GPIO_Init+0xcc>
 8002222:	2b12      	cmp	r3, #18
 8002224:	d859      	bhi.n	80022da <HAL_GPIO_Init+0x12e>
 8002226:	a201      	add	r2, pc, #4	@ (adr r2, 800222c <HAL_GPIO_Init+0x80>)
 8002228:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800222c:	080022a7 	.word	0x080022a7
 8002230:	08002281 	.word	0x08002281
 8002234:	08002293 	.word	0x08002293
 8002238:	080022d5 	.word	0x080022d5
 800223c:	080022db 	.word	0x080022db
 8002240:	080022db 	.word	0x080022db
 8002244:	080022db 	.word	0x080022db
 8002248:	080022db 	.word	0x080022db
 800224c:	080022db 	.word	0x080022db
 8002250:	080022db 	.word	0x080022db
 8002254:	080022db 	.word	0x080022db
 8002258:	080022db 	.word	0x080022db
 800225c:	080022db 	.word	0x080022db
 8002260:	080022db 	.word	0x080022db
 8002264:	080022db 	.word	0x080022db
 8002268:	080022db 	.word	0x080022db
 800226c:	080022db 	.word	0x080022db
 8002270:	08002289 	.word	0x08002289
 8002274:	0800229d 	.word	0x0800229d
 8002278:	4a79      	ldr	r2, [pc, #484]	@ (8002460 <HAL_GPIO_Init+0x2b4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d013      	beq.n	80022a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800227e:	e02c      	b.n	80022da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	623b      	str	r3, [r7, #32]
          break;
 8002286:	e029      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	3304      	adds	r3, #4
 800228e:	623b      	str	r3, [r7, #32]
          break;
 8002290:	e024      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	3308      	adds	r3, #8
 8002298:	623b      	str	r3, [r7, #32]
          break;
 800229a:	e01f      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	330c      	adds	r3, #12
 80022a2:	623b      	str	r3, [r7, #32]
          break;
 80022a4:	e01a      	b.n	80022dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d102      	bne.n	80022b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022ae:	2304      	movs	r3, #4
 80022b0:	623b      	str	r3, [r7, #32]
          break;
 80022b2:	e013      	b.n	80022dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d105      	bne.n	80022c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022bc:	2308      	movs	r3, #8
 80022be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	69fa      	ldr	r2, [r7, #28]
 80022c4:	611a      	str	r2, [r3, #16]
          break;
 80022c6:	e009      	b.n	80022dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022c8:	2308      	movs	r3, #8
 80022ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	69fa      	ldr	r2, [r7, #28]
 80022d0:	615a      	str	r2, [r3, #20]
          break;
 80022d2:	e003      	b.n	80022dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80022d4:	2300      	movs	r3, #0
 80022d6:	623b      	str	r3, [r7, #32]
          break;
 80022d8:	e000      	b.n	80022dc <HAL_GPIO_Init+0x130>
          break;
 80022da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80022dc:	69bb      	ldr	r3, [r7, #24]
 80022de:	2bff      	cmp	r3, #255	@ 0xff
 80022e0:	d801      	bhi.n	80022e6 <HAL_GPIO_Init+0x13a>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	e001      	b.n	80022ea <HAL_GPIO_Init+0x13e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	3304      	adds	r3, #4
 80022ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	2bff      	cmp	r3, #255	@ 0xff
 80022f0:	d802      	bhi.n	80022f8 <HAL_GPIO_Init+0x14c>
 80022f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	e002      	b.n	80022fe <HAL_GPIO_Init+0x152>
 80022f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fa:	3b08      	subs	r3, #8
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	210f      	movs	r1, #15
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	fa01 f303 	lsl.w	r3, r1, r3
 800230c:	43db      	mvns	r3, r3
 800230e:	401a      	ands	r2, r3
 8002310:	6a39      	ldr	r1, [r7, #32]
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	431a      	orrs	r2, r3
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	f000 80b1 	beq.w	800248e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800232c:	4b4d      	ldr	r3, [pc, #308]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 800232e:	699b      	ldr	r3, [r3, #24]
 8002330:	4a4c      	ldr	r2, [pc, #304]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6193      	str	r3, [r2, #24]
 8002338:	4b4a      	ldr	r3, [pc, #296]	@ (8002464 <HAL_GPIO_Init+0x2b8>)
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	60bb      	str	r3, [r7, #8]
 8002342:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002344:	4a48      	ldr	r2, [pc, #288]	@ (8002468 <HAL_GPIO_Init+0x2bc>)
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	089b      	lsrs	r3, r3, #2
 800234a:	3302      	adds	r3, #2
 800234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002350:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	68fa      	ldr	r2, [r7, #12]
 8002364:	4013      	ands	r3, r2
 8002366:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	4a40      	ldr	r2, [pc, #256]	@ (800246c <HAL_GPIO_Init+0x2c0>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d013      	beq.n	8002398 <HAL_GPIO_Init+0x1ec>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	4a3f      	ldr	r2, [pc, #252]	@ (8002470 <HAL_GPIO_Init+0x2c4>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d00d      	beq.n	8002394 <HAL_GPIO_Init+0x1e8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a3e      	ldr	r2, [pc, #248]	@ (8002474 <HAL_GPIO_Init+0x2c8>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d007      	beq.n	8002390 <HAL_GPIO_Init+0x1e4>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	4a3d      	ldr	r2, [pc, #244]	@ (8002478 <HAL_GPIO_Init+0x2cc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d101      	bne.n	800238c <HAL_GPIO_Init+0x1e0>
 8002388:	2303      	movs	r3, #3
 800238a:	e006      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 800238c:	2304      	movs	r3, #4
 800238e:	e004      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002390:	2302      	movs	r3, #2
 8002392:	e002      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002394:	2301      	movs	r3, #1
 8002396:	e000      	b.n	800239a <HAL_GPIO_Init+0x1ee>
 8002398:	2300      	movs	r3, #0
 800239a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800239c:	f002 0203 	and.w	r2, r2, #3
 80023a0:	0092      	lsls	r2, r2, #2
 80023a2:	4093      	lsls	r3, r2
 80023a4:	68fa      	ldr	r2, [r7, #12]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023aa:	492f      	ldr	r1, [pc, #188]	@ (8002468 <HAL_GPIO_Init+0x2bc>)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	68fa      	ldr	r2, [r7, #12]
 80023b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d006      	beq.n	80023d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023c4:	4b2d      	ldr	r3, [pc, #180]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023c6:	689a      	ldr	r2, [r3, #8]
 80023c8:	492c      	ldr	r1, [pc, #176]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	608b      	str	r3, [r1, #8]
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80023d2:	4b2a      	ldr	r3, [pc, #168]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023d4:	689a      	ldr	r2, [r3, #8]
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	43db      	mvns	r3, r3
 80023da:	4928      	ldr	r1, [pc, #160]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023dc:	4013      	ands	r3, r2
 80023de:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d006      	beq.n	80023fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80023ec:	4b23      	ldr	r3, [pc, #140]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	4922      	ldr	r1, [pc, #136]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023f2:	69bb      	ldr	r3, [r7, #24]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60cb      	str	r3, [r1, #12]
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80023fa:	4b20      	ldr	r3, [pc, #128]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	43db      	mvns	r3, r3
 8002402:	491e      	ldr	r1, [pc, #120]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002404:	4013      	ands	r3, r2
 8002406:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d006      	beq.n	8002422 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002414:	4b19      	ldr	r3, [pc, #100]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002416:	685a      	ldr	r2, [r3, #4]
 8002418:	4918      	ldr	r1, [pc, #96]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	4313      	orrs	r3, r2
 800241e:	604b      	str	r3, [r1, #4]
 8002420:	e006      	b.n	8002430 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002422:	4b16      	ldr	r3, [pc, #88]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	43db      	mvns	r3, r3
 800242a:	4914      	ldr	r1, [pc, #80]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 800242c:	4013      	ands	r3, r2
 800242e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d021      	beq.n	8002480 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800243c:	4b0f      	ldr	r3, [pc, #60]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	490e      	ldr	r1, [pc, #56]	@ (800247c <HAL_GPIO_Init+0x2d0>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]
 8002448:	e021      	b.n	800248e <HAL_GPIO_Init+0x2e2>
 800244a:	bf00      	nop
 800244c:	10320000 	.word	0x10320000
 8002450:	10310000 	.word	0x10310000
 8002454:	10220000 	.word	0x10220000
 8002458:	10210000 	.word	0x10210000
 800245c:	10120000 	.word	0x10120000
 8002460:	10110000 	.word	0x10110000
 8002464:	40021000 	.word	0x40021000
 8002468:	40010000 	.word	0x40010000
 800246c:	40010800 	.word	0x40010800
 8002470:	40010c00 	.word	0x40010c00
 8002474:	40011000 	.word	0x40011000
 8002478:	40011400 	.word	0x40011400
 800247c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002480:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <HAL_GPIO_Init+0x304>)
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	69bb      	ldr	r3, [r7, #24]
 8002486:	43db      	mvns	r3, r3
 8002488:	4909      	ldr	r1, [pc, #36]	@ (80024b0 <HAL_GPIO_Init+0x304>)
 800248a:	4013      	ands	r3, r2
 800248c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800248e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002490:	3301      	adds	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f ae8e 	bne.w	80021c0 <HAL_GPIO_Init+0x14>
  }
}
 80024a4:	bf00      	nop
 80024a6:	bf00      	nop
 80024a8:	372c      	adds	r7, #44	@ 0x2c
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	40010400 	.word	0x40010400

080024b4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	460b      	mov	r3, r1
 80024be:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689a      	ldr	r2, [r3, #8]
 80024c4:	887b      	ldrh	r3, [r7, #2]
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d002      	beq.n	80024d2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
 80024d0:	e001      	b.n	80024d6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024d2:	2300      	movs	r3, #0
 80024d4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3714      	adds	r7, #20
 80024dc:	46bd      	mov	sp, r7
 80024de:	bc80      	pop	{r7}
 80024e0:	4770      	bx	lr

080024e2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024e2:	b480      	push	{r7}
 80024e4:	b083      	sub	sp, #12
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
 80024ea:	460b      	mov	r3, r1
 80024ec:	807b      	strh	r3, [r7, #2]
 80024ee:	4613      	mov	r3, r2
 80024f0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024f2:	787b      	ldrb	r3, [r7, #1]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d003      	beq.n	8002500 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024f8:	887a      	ldrh	r2, [r7, #2]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80024fe:	e003      	b.n	8002508 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002500:	887b      	ldrh	r3, [r7, #2]
 8002502:	041a      	lsls	r2, r3, #16
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	611a      	str	r2, [r3, #16]
}
 8002508:	bf00      	nop
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr

08002512 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002512:	b480      	push	{r7}
 8002514:	b085      	sub	sp, #20
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002524:	887a      	ldrh	r2, [r7, #2]
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4013      	ands	r3, r2
 800252a:	041a      	lsls	r2, r3, #16
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	43d9      	mvns	r1, r3
 8002530:	887b      	ldrh	r3, [r7, #2]
 8002532:	400b      	ands	r3, r1
 8002534:	431a      	orrs	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	611a      	str	r2, [r3, #16]
}
 800253a:	bf00      	nop
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr

08002544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e272      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	f000 8087 	beq.w	8002672 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002564:	4b92      	ldr	r3, [pc, #584]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 030c 	and.w	r3, r3, #12
 800256c:	2b04      	cmp	r3, #4
 800256e:	d00c      	beq.n	800258a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002570:	4b8f      	ldr	r3, [pc, #572]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d112      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5e>
 800257c:	4b8c      	ldr	r3, [pc, #560]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002584:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002588:	d10b      	bne.n	80025a2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800258a:	4b89      	ldr	r3, [pc, #548]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d06c      	beq.n	8002670 <HAL_RCC_OscConfig+0x12c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d168      	bne.n	8002670 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
 80025a0:	e24c      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025aa:	d106      	bne.n	80025ba <HAL_RCC_OscConfig+0x76>
 80025ac:	4b80      	ldr	r3, [pc, #512]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a7f      	ldr	r2, [pc, #508]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	e02e      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x98>
 80025c2:	4b7b      	ldr	r3, [pc, #492]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a7a      	ldr	r2, [pc, #488]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b78      	ldr	r3, [pc, #480]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a77      	ldr	r2, [pc, #476]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e01d      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0xbc>
 80025e6:	4b72      	ldr	r3, [pc, #456]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a71      	ldr	r2, [pc, #452]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b6f      	ldr	r3, [pc, #444]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6e      	ldr	r2, [pc, #440]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80025f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e00b      	b.n	8002618 <HAL_RCC_OscConfig+0xd4>
 8002600:	4b6b      	ldr	r3, [pc, #428]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a6a      	ldr	r2, [pc, #424]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002606:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800260a:	6013      	str	r3, [r2, #0]
 800260c:	4b68      	ldr	r3, [pc, #416]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a67      	ldr	r2, [pc, #412]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002612:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002616:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d013      	beq.n	8002648 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002620:	f7fe fe02 	bl	8001228 <HAL_GetTick>
 8002624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002626:	e008      	b.n	800263a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002628:	f7fe fdfe 	bl	8001228 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	2b64      	cmp	r3, #100	@ 0x64
 8002634:	d901      	bls.n	800263a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002636:	2303      	movs	r3, #3
 8002638:	e200      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263a:	4b5d      	ldr	r3, [pc, #372]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d0f0      	beq.n	8002628 <HAL_RCC_OscConfig+0xe4>
 8002646:	e014      	b.n	8002672 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002648:	f7fe fdee 	bl	8001228 <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002650:	f7fe fdea 	bl	8001228 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b64      	cmp	r3, #100	@ 0x64
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1ec      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002662:	4b53      	ldr	r3, [pc, #332]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f0      	bne.n	8002650 <HAL_RCC_OscConfig+0x10c>
 800266e:	e000      	b.n	8002672 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002670:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d063      	beq.n	8002746 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800267e:	4b4c      	ldr	r3, [pc, #304]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f003 030c 	and.w	r3, r3, #12
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00b      	beq.n	80026a2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800268a:	4b49      	ldr	r3, [pc, #292]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d11c      	bne.n	80026d0 <HAL_RCC_OscConfig+0x18c>
 8002696:	4b46      	ldr	r3, [pc, #280]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d116      	bne.n	80026d0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026a2:	4b43      	ldr	r3, [pc, #268]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d005      	beq.n	80026ba <HAL_RCC_OscConfig+0x176>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e1c0      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ba:	4b3d      	ldr	r3, [pc, #244]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	695b      	ldr	r3, [r3, #20]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4939      	ldr	r1, [pc, #228]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ce:	e03a      	b.n	8002746 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d020      	beq.n	800271a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026d8:	4b36      	ldr	r3, [pc, #216]	@ (80027b4 <HAL_RCC_OscConfig+0x270>)
 80026da:	2201      	movs	r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026de:	f7fe fda3 	bl	8001228 <HAL_GetTick>
 80026e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	e008      	b.n	80026f8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026e6:	f7fe fd9f 	bl	8001228 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d901      	bls.n	80026f8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e1a1      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026f8:	4b2d      	ldr	r3, [pc, #180]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d0f0      	beq.n	80026e6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002704:	4b2a      	ldr	r3, [pc, #168]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4927      	ldr	r1, [pc, #156]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 8002714:	4313      	orrs	r3, r2
 8002716:	600b      	str	r3, [r1, #0]
 8002718:	e015      	b.n	8002746 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800271a:	4b26      	ldr	r3, [pc, #152]	@ (80027b4 <HAL_RCC_OscConfig+0x270>)
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002720:	f7fe fd82 	bl	8001228 <HAL_GetTick>
 8002724:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	e008      	b.n	800273a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002728:	f7fe fd7e 	bl	8001228 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	2b02      	cmp	r3, #2
 8002734:	d901      	bls.n	800273a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e180      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273a:	4b1d      	ldr	r3, [pc, #116]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0302 	and.w	r3, r3, #2
 8002742:	2b00      	cmp	r3, #0
 8002744:	d1f0      	bne.n	8002728 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	2b00      	cmp	r3, #0
 8002750:	d03a      	beq.n	80027c8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d019      	beq.n	800278e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800275a:	4b17      	ldr	r3, [pc, #92]	@ (80027b8 <HAL_RCC_OscConfig+0x274>)
 800275c:	2201      	movs	r2, #1
 800275e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002760:	f7fe fd62 	bl	8001228 <HAL_GetTick>
 8002764:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002768:	f7fe fd5e 	bl	8001228 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d901      	bls.n	800277a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e160      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277a:	4b0d      	ldr	r3, [pc, #52]	@ (80027b0 <HAL_RCC_OscConfig+0x26c>)
 800277c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800277e:	f003 0302 	and.w	r3, r3, #2
 8002782:	2b00      	cmp	r3, #0
 8002784:	d0f0      	beq.n	8002768 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002786:	2001      	movs	r0, #1
 8002788:	f000 face 	bl	8002d28 <RCC_Delay>
 800278c:	e01c      	b.n	80027c8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800278e:	4b0a      	ldr	r3, [pc, #40]	@ (80027b8 <HAL_RCC_OscConfig+0x274>)
 8002790:	2200      	movs	r2, #0
 8002792:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002794:	f7fe fd48 	bl	8001228 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800279a:	e00f      	b.n	80027bc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800279c:	f7fe fd44 	bl	8001228 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d908      	bls.n	80027bc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e146      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
 80027ae:	bf00      	nop
 80027b0:	40021000 	.word	0x40021000
 80027b4:	42420000 	.word	0x42420000
 80027b8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027bc:	4b92      	ldr	r3, [pc, #584]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d1e9      	bne.n	800279c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0304 	and.w	r3, r3, #4
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	f000 80a6 	beq.w	8002922 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027da:	4b8b      	ldr	r3, [pc, #556]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d10d      	bne.n	8002802 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027e6:	4b88      	ldr	r3, [pc, #544]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	4a87      	ldr	r2, [pc, #540]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f0:	61d3      	str	r3, [r2, #28]
 80027f2:	4b85      	ldr	r3, [pc, #532]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027fe:	2301      	movs	r3, #1
 8002800:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002802:	4b82      	ldr	r3, [pc, #520]	@ (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280a:	2b00      	cmp	r3, #0
 800280c:	d118      	bne.n	8002840 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800280e:	4b7f      	ldr	r3, [pc, #508]	@ (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a7e      	ldr	r2, [pc, #504]	@ (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002818:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800281a:	f7fe fd05 	bl	8001228 <HAL_GetTick>
 800281e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002820:	e008      	b.n	8002834 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002822:	f7fe fd01 	bl	8001228 <HAL_GetTick>
 8002826:	4602      	mov	r2, r0
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	2b64      	cmp	r3, #100	@ 0x64
 800282e:	d901      	bls.n	8002834 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002830:	2303      	movs	r3, #3
 8002832:	e103      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002834:	4b75      	ldr	r3, [pc, #468]	@ (8002a0c <HAL_RCC_OscConfig+0x4c8>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800283c:	2b00      	cmp	r3, #0
 800283e:	d0f0      	beq.n	8002822 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	2b01      	cmp	r3, #1
 8002846:	d106      	bne.n	8002856 <HAL_RCC_OscConfig+0x312>
 8002848:	4b6f      	ldr	r3, [pc, #444]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6213      	str	r3, [r2, #32]
 8002854:	e02d      	b.n	80028b2 <HAL_RCC_OscConfig+0x36e>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10c      	bne.n	8002878 <HAL_RCC_OscConfig+0x334>
 800285e:	4b6a      	ldr	r3, [pc, #424]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	4a69      	ldr	r2, [pc, #420]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002864:	f023 0301 	bic.w	r3, r3, #1
 8002868:	6213      	str	r3, [r2, #32]
 800286a:	4b67      	ldr	r3, [pc, #412]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	4a66      	ldr	r2, [pc, #408]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002870:	f023 0304 	bic.w	r3, r3, #4
 8002874:	6213      	str	r3, [r2, #32]
 8002876:	e01c      	b.n	80028b2 <HAL_RCC_OscConfig+0x36e>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	2b05      	cmp	r3, #5
 800287e:	d10c      	bne.n	800289a <HAL_RCC_OscConfig+0x356>
 8002880:	4b61      	ldr	r3, [pc, #388]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002882:	6a1b      	ldr	r3, [r3, #32]
 8002884:	4a60      	ldr	r2, [pc, #384]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	f043 0304 	orr.w	r3, r3, #4
 800288a:	6213      	str	r3, [r2, #32]
 800288c:	4b5e      	ldr	r3, [pc, #376]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	4a5d      	ldr	r2, [pc, #372]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6213      	str	r3, [r2, #32]
 8002898:	e00b      	b.n	80028b2 <HAL_RCC_OscConfig+0x36e>
 800289a:	4b5b      	ldr	r3, [pc, #364]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4a5a      	ldr	r2, [pc, #360]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028a0:	f023 0301 	bic.w	r3, r3, #1
 80028a4:	6213      	str	r3, [r2, #32]
 80028a6:	4b58      	ldr	r3, [pc, #352]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	4a57      	ldr	r2, [pc, #348]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028ac:	f023 0304 	bic.w	r3, r3, #4
 80028b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d015      	beq.n	80028e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028ba:	f7fe fcb5 	bl	8001228 <HAL_GetTick>
 80028be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c0:	e00a      	b.n	80028d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028c2:	f7fe fcb1 	bl	8001228 <HAL_GetTick>
 80028c6:	4602      	mov	r2, r0
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	1ad3      	subs	r3, r2, r3
 80028cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028d0:	4293      	cmp	r3, r2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e0b1      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028d8:	4b4b      	ldr	r3, [pc, #300]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ee      	beq.n	80028c2 <HAL_RCC_OscConfig+0x37e>
 80028e4:	e014      	b.n	8002910 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e6:	f7fe fc9f 	bl	8001228 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ec:	e00a      	b.n	8002904 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028ee:	f7fe fc9b 	bl	8001228 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d901      	bls.n	8002904 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002900:	2303      	movs	r3, #3
 8002902:	e09b      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002904:	4b40      	ldr	r3, [pc, #256]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f003 0302 	and.w	r3, r3, #2
 800290c:	2b00      	cmp	r3, #0
 800290e:	d1ee      	bne.n	80028ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002910:	7dfb      	ldrb	r3, [r7, #23]
 8002912:	2b01      	cmp	r3, #1
 8002914:	d105      	bne.n	8002922 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002916:	4b3c      	ldr	r3, [pc, #240]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002918:	69db      	ldr	r3, [r3, #28]
 800291a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002920:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69db      	ldr	r3, [r3, #28]
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 8087 	beq.w	8002a3a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800292c:	4b36      	ldr	r3, [pc, #216]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f003 030c 	and.w	r3, r3, #12
 8002934:	2b08      	cmp	r3, #8
 8002936:	d061      	beq.n	80029fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	2b02      	cmp	r3, #2
 800293e:	d146      	bne.n	80029ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002940:	4b33      	ldr	r3, [pc, #204]	@ (8002a10 <HAL_RCC_OscConfig+0x4cc>)
 8002942:	2200      	movs	r2, #0
 8002944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002946:	f7fe fc6f 	bl	8001228 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800294e:	f7fe fc6b 	bl	8001228 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e06d      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002960:	4b29      	ldr	r3, [pc, #164]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002974:	d108      	bne.n	8002988 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002976:	4b24      	ldr	r3, [pc, #144]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4921      	ldr	r1, [pc, #132]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	4313      	orrs	r3, r2
 8002986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002988:	4b1f      	ldr	r3, [pc, #124]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a19      	ldr	r1, [r3, #32]
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002998:	430b      	orrs	r3, r1
 800299a:	491b      	ldr	r1, [pc, #108]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x4cc>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7fe fc3f 	bl	8001228 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe fc3b 	bl	8001228 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e03d      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029c0:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x46a>
 80029cc:	e035      	b.n	8002a3a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b10      	ldr	r3, [pc, #64]	@ (8002a10 <HAL_RCC_OscConfig+0x4cc>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe fc28 	bl	8001228 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fc24 	bl	8001228 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e026      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ee:	4b06      	ldr	r3, [pc, #24]	@ (8002a08 <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x498>
 80029fa:	e01e      	b.n	8002a3a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e019      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
 8002a08:	40021000 	.word	0x40021000
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a14:	4b0b      	ldr	r3, [pc, #44]	@ (8002a44 <HAL_RCC_OscConfig+0x500>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1b      	ldr	r3, [r3, #32]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d106      	bne.n	8002a36 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d001      	beq.n	8002a3a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e000      	b.n	8002a3c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	40021000 	.word	0x40021000

08002a48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d101      	bne.n	8002a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0d0      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a5c:	4b6a      	ldr	r3, [pc, #424]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	683a      	ldr	r2, [r7, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d910      	bls.n	8002a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a6a:	4b67      	ldr	r3, [pc, #412]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f023 0207 	bic.w	r2, r3, #7
 8002a72:	4965      	ldr	r1, [pc, #404]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a7a:	4b63      	ldr	r3, [pc, #396]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 0307 	and.w	r3, r3, #7
 8002a82:	683a      	ldr	r2, [r7, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d001      	beq.n	8002a8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e0b8      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d020      	beq.n	8002ada <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f003 0304 	and.w	r3, r3, #4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d005      	beq.n	8002ab0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002aa4:	4b59      	ldr	r3, [pc, #356]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	4a58      	ldr	r2, [pc, #352]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002aaa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002aae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d005      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002abc:	4b53      	ldr	r3, [pc, #332]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	4a52      	ldr	r2, [pc, #328]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ac2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002ac6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ac8:	4b50      	ldr	r3, [pc, #320]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	494d      	ldr	r1, [pc, #308]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d040      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d107      	bne.n	8002afe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002aee:	4b47      	ldr	r3, [pc, #284]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d115      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e07f      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d107      	bne.n	8002b16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b06:	4b41      	ldr	r3, [pc, #260]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d109      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e073      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b16:	4b3d      	ldr	r3, [pc, #244]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e06b      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b26:	4b39      	ldr	r3, [pc, #228]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f023 0203 	bic.w	r2, r3, #3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	4936      	ldr	r1, [pc, #216]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b38:	f7fe fb76 	bl	8001228 <HAL_GetTick>
 8002b3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b3e:	e00a      	b.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b40:	f7fe fb72 	bl	8001228 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e053      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b56:	4b2d      	ldr	r3, [pc, #180]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	f003 020c 	and.w	r2, r3, #12
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d1eb      	bne.n	8002b40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b68:	4b27      	ldr	r3, [pc, #156]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0307 	and.w	r3, r3, #7
 8002b70:	683a      	ldr	r2, [r7, #0]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d210      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b76:	4b24      	ldr	r3, [pc, #144]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f023 0207 	bic.w	r2, r3, #7
 8002b7e:	4922      	ldr	r1, [pc, #136]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b86:	4b20      	ldr	r3, [pc, #128]	@ (8002c08 <HAL_RCC_ClockConfig+0x1c0>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0307 	and.w	r3, r3, #7
 8002b8e:	683a      	ldr	r2, [r7, #0]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d001      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e032      	b.n	8002bfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba4:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	68db      	ldr	r3, [r3, #12]
 8002bb0:	4916      	ldr	r1, [pc, #88]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bb2:	4313      	orrs	r3, r2
 8002bb4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0308 	and.w	r3, r3, #8
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d009      	beq.n	8002bd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002bc2:	4b12      	ldr	r3, [pc, #72]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	00db      	lsls	r3, r3, #3
 8002bd0:	490e      	ldr	r1, [pc, #56]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002bd6:	f000 f821 	bl	8002c1c <HAL_RCC_GetSysClockFreq>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8002c0c <HAL_RCC_ClockConfig+0x1c4>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	091b      	lsrs	r3, r3, #4
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	490a      	ldr	r1, [pc, #40]	@ (8002c10 <HAL_RCC_ClockConfig+0x1c8>)
 8002be8:	5ccb      	ldrb	r3, [r1, r3]
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a09      	ldr	r2, [pc, #36]	@ (8002c14 <HAL_RCC_ClockConfig+0x1cc>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bf2:	4b09      	ldr	r3, [pc, #36]	@ (8002c18 <HAL_RCC_ClockConfig+0x1d0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fad4 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3710      	adds	r7, #16
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40022000 	.word	0x40022000
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08003b48 	.word	0x08003b48
 8002c14:	20000004 	.word	0x20000004
 8002c18:	20000008 	.word	0x20000008

08002c1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b087      	sub	sp, #28
 8002c20:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	2300      	movs	r3, #0
 8002c28:	60bb      	str	r3, [r7, #8]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	617b      	str	r3, [r7, #20]
 8002c2e:	2300      	movs	r3, #0
 8002c30:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002c32:	2300      	movs	r3, #0
 8002c34:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002c36:	4b1e      	ldr	r3, [pc, #120]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
 8002c42:	2b04      	cmp	r3, #4
 8002c44:	d002      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x30>
 8002c46:	2b08      	cmp	r3, #8
 8002c48:	d003      	beq.n	8002c52 <HAL_RCC_GetSysClockFreq+0x36>
 8002c4a:	e027      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c4c:	4b19      	ldr	r3, [pc, #100]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c4e:	613b      	str	r3, [r7, #16]
      break;
 8002c50:	e027      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	0c9b      	lsrs	r3, r3, #18
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	4a17      	ldr	r2, [pc, #92]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002c5c:	5cd3      	ldrb	r3, [r2, r3]
 8002c5e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d010      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c6a:	4b11      	ldr	r3, [pc, #68]	@ (8002cb0 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	0c5b      	lsrs	r3, r3, #17
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	4a11      	ldr	r2, [pc, #68]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c76:	5cd3      	ldrb	r3, [r2, r3]
 8002c78:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c7e:	fb03 f202 	mul.w	r2, r3, r2
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	e004      	b.n	8002c96 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	613b      	str	r3, [r7, #16]
      break;
 8002c9a:	e002      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c9c:	4b05      	ldr	r3, [pc, #20]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x98>)
 8002c9e:	613b      	str	r3, [r7, #16]
      break;
 8002ca0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca2:	693b      	ldr	r3, [r7, #16]
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	371c      	adds	r7, #28
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bc80      	pop	{r7}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	40021000 	.word	0x40021000
 8002cb4:	007a1200 	.word	0x007a1200
 8002cb8:	08003b60 	.word	0x08003b60
 8002cbc:	08003b70 	.word	0x08003b70
 8002cc0:	003d0900 	.word	0x003d0900

08002cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc8:	4b02      	ldr	r3, [pc, #8]	@ (8002cd4 <HAL_RCC_GetHCLKFreq+0x10>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bc80      	pop	{r7}
 8002cd2:	4770      	bx	lr
 8002cd4:	20000004 	.word	0x20000004

08002cd8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cdc:	f7ff fff2 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	4b05      	ldr	r3, [pc, #20]	@ (8002cf8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	f003 0307 	and.w	r3, r3, #7
 8002cec:	4903      	ldr	r1, [pc, #12]	@ (8002cfc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cee:	5ccb      	ldrb	r3, [r1, r3]
 8002cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	08003b58 	.word	0x08003b58

08002d00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d04:	f7ff ffde 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b05      	ldr	r3, [pc, #20]	@ (8002d20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	0adb      	lsrs	r3, r3, #11
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	4903      	ldr	r1, [pc, #12]	@ (8002d24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d16:	5ccb      	ldrb	r3, [r1, r3]
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	08003b58 	.word	0x08003b58

08002d28 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002d30:	4b0a      	ldr	r3, [pc, #40]	@ (8002d5c <RCC_Delay+0x34>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a0a      	ldr	r2, [pc, #40]	@ (8002d60 <RCC_Delay+0x38>)
 8002d36:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3a:	0a5b      	lsrs	r3, r3, #9
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d44:	bf00      	nop
  }
  while (Delay --);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1e5a      	subs	r2, r3, #1
 8002d4a:	60fa      	str	r2, [r7, #12]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1f9      	bne.n	8002d44 <RCC_Delay+0x1c>
}
 8002d50:	bf00      	nop
 8002d52:	bf00      	nop
 8002d54:	3714      	adds	r7, #20
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr
 8002d5c:	20000004 	.word	0x20000004
 8002d60:	10624dd3 	.word	0x10624dd3

08002d64 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e042      	b.n	8002dfc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe f906 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	@ 0x24
 8002d94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002da6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002da8:	6878      	ldr	r0, [r7, #4]
 8002daa:	f000 f971 	bl	8003090 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	691a      	ldr	r2, [r3, #16]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002dbc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	695a      	ldr	r2, [r3, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002dcc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ddc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2220      	movs	r2, #32
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}

08002e04 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b08a      	sub	sp, #40	@ 0x28
 8002e08:	af02      	add	r7, sp, #8
 8002e0a:	60f8      	str	r0, [r7, #12]
 8002e0c:	60b9      	str	r1, [r7, #8]
 8002e0e:	603b      	str	r3, [r7, #0]
 8002e10:	4613      	mov	r3, r2
 8002e12:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b20      	cmp	r3, #32
 8002e22:	d175      	bne.n	8002f10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Transmit+0x2c>
 8002e2a:	88fb      	ldrh	r3, [r7, #6]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e06e      	b.n	8002f12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2221      	movs	r2, #33	@ 0x21
 8002e3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e42:	f7fe f9f1 	bl	8001228 <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	88fa      	ldrh	r2, [r7, #6]
 8002e4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	88fa      	ldrh	r2, [r7, #6]
 8002e52:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e5c:	d108      	bne.n	8002e70 <HAL_UART_Transmit+0x6c>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d104      	bne.n	8002e70 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002e66:	2300      	movs	r3, #0
 8002e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	61bb      	str	r3, [r7, #24]
 8002e6e:	e003      	b.n	8002e78 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e74:	2300      	movs	r3, #0
 8002e76:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002e78:	e02e      	b.n	8002ed8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	2200      	movs	r2, #0
 8002e82:	2180      	movs	r1, #128	@ 0x80
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f000 f848 	bl	8002f1a <UART_WaitOnFlagUntilTimeout>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d005      	beq.n	8002e9c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e03a      	b.n	8002f12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d10b      	bne.n	8002eba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ea2:	69bb      	ldr	r3, [r7, #24]
 8002ea4:	881b      	ldrh	r3, [r3, #0]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002eb2:	69bb      	ldr	r3, [r7, #24]
 8002eb4:	3302      	adds	r3, #2
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	e007      	b.n	8002eca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	781a      	ldrb	r2, [r3, #0]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	3b01      	subs	r3, #1
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1cb      	bne.n	8002e7a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	9300      	str	r3, [sp, #0]
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	2140      	movs	r1, #64	@ 0x40
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 f814 	bl	8002f1a <UART_WaitOnFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d005      	beq.n	8002f04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2220      	movs	r2, #32
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8002f00:	2303      	movs	r3, #3
 8002f02:	e006      	b.n	8002f12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2220      	movs	r2, #32
 8002f08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	e000      	b.n	8002f12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
  }
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3720      	adds	r7, #32
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b086      	sub	sp, #24
 8002f1e:	af00      	add	r7, sp, #0
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4613      	mov	r3, r2
 8002f28:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f2a:	e03b      	b.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f2c:	6a3b      	ldr	r3, [r7, #32]
 8002f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f32:	d037      	beq.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f34:	f7fe f978 	bl	8001228 <HAL_GetTick>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	1ad3      	subs	r3, r2, r3
 8002f3e:	6a3a      	ldr	r2, [r7, #32]
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d302      	bcc.n	8002f4a <UART_WaitOnFlagUntilTimeout+0x30>
 8002f44:	6a3b      	ldr	r3, [r7, #32]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e03a      	b.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d023      	beq.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2b80      	cmp	r3, #128	@ 0x80
 8002f60:	d020      	beq.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	2b40      	cmp	r3, #64	@ 0x40
 8002f66:	d01d      	beq.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0308 	and.w	r3, r3, #8
 8002f72:	2b08      	cmp	r3, #8
 8002f74:	d116      	bne.n	8002fa4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f76:	2300      	movs	r3, #0
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	617b      	str	r3, [r7, #20]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	617b      	str	r3, [r7, #20]
 8002f8a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 f81d 	bl	8002fcc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2208      	movs	r2, #8
 8002f96:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e00f      	b.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	4013      	ands	r3, r2
 8002fae:	68ba      	ldr	r2, [r7, #8]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	461a      	mov	r2, r3
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d0b4      	beq.n	8002f2c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}

08002fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b095      	sub	sp, #84	@ 0x54
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fde:	e853 3f00 	ldrex	r3, [r3]
 8002fe2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002fe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fe6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002fea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	330c      	adds	r3, #12
 8002ff2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ff4:	643a      	str	r2, [r7, #64]	@ 0x40
 8002ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002ffa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002ffc:	e841 2300 	strex	r3, r2, [r1]
 8003000:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003004:	2b00      	cmp	r3, #0
 8003006:	d1e5      	bne.n	8002fd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	3314      	adds	r3, #20
 800300e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003010:	6a3b      	ldr	r3, [r7, #32]
 8003012:	e853 3f00 	ldrex	r3, [r3]
 8003016:	61fb      	str	r3, [r7, #28]
   return(result);
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	f023 0301 	bic.w	r3, r3, #1
 800301e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	3314      	adds	r3, #20
 8003026:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003028:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800302a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800302e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e5      	bne.n	8003008 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003040:	2b01      	cmp	r3, #1
 8003042:	d119      	bne.n	8003078 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	330c      	adds	r3, #12
 800304a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	e853 3f00 	ldrex	r3, [r3]
 8003052:	60bb      	str	r3, [r7, #8]
   return(result);
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f023 0310 	bic.w	r3, r3, #16
 800305a:	647b      	str	r3, [r7, #68]	@ 0x44
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	330c      	adds	r3, #12
 8003062:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003064:	61ba      	str	r2, [r7, #24]
 8003066:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003068:	6979      	ldr	r1, [r7, #20]
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	e841 2300 	strex	r3, r2, [r1]
 8003070:	613b      	str	r3, [r7, #16]
   return(result);
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1e5      	bne.n	8003044 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003086:	bf00      	nop
 8003088:	3754      	adds	r7, #84	@ 0x54
 800308a:	46bd      	mov	sp, r7
 800308c:	bc80      	pop	{r7}
 800308e:	4770      	bx	lr

08003090 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	431a      	orrs	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	695b      	ldr	r3, [r3, #20]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80030ca:	f023 030c 	bic.w	r3, r3, #12
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	6812      	ldr	r2, [r2, #0]
 80030d2:	68b9      	ldr	r1, [r7, #8]
 80030d4:	430b      	orrs	r3, r1
 80030d6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	695b      	ldr	r3, [r3, #20]
 80030de:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699a      	ldr	r2, [r3, #24]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	430a      	orrs	r2, r1
 80030ec:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a2c      	ldr	r2, [pc, #176]	@ (80031a4 <UART_SetConfig+0x114>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d103      	bne.n	8003100 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80030f8:	f7ff fe02 	bl	8002d00 <HAL_RCC_GetPCLK2Freq>
 80030fc:	60f8      	str	r0, [r7, #12]
 80030fe:	e002      	b.n	8003106 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003100:	f7ff fdea 	bl	8002cd8 <HAL_RCC_GetPCLK1Freq>
 8003104:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	009a      	lsls	r2, r3, #2
 8003110:	441a      	add	r2, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	685b      	ldr	r3, [r3, #4]
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	4a22      	ldr	r2, [pc, #136]	@ (80031a8 <UART_SetConfig+0x118>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	095b      	lsrs	r3, r3, #5
 8003124:	0119      	lsls	r1, r3, #4
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009a      	lsls	r2, r3, #2
 8003130:	441a      	add	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	fbb2 f2f3 	udiv	r2, r2, r3
 800313c:	4b1a      	ldr	r3, [pc, #104]	@ (80031a8 <UART_SetConfig+0x118>)
 800313e:	fba3 0302 	umull	r0, r3, r3, r2
 8003142:	095b      	lsrs	r3, r3, #5
 8003144:	2064      	movs	r0, #100	@ 0x64
 8003146:	fb00 f303 	mul.w	r3, r0, r3
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	011b      	lsls	r3, r3, #4
 800314e:	3332      	adds	r3, #50	@ 0x32
 8003150:	4a15      	ldr	r2, [pc, #84]	@ (80031a8 <UART_SetConfig+0x118>)
 8003152:	fba2 2303 	umull	r2, r3, r2, r3
 8003156:	095b      	lsrs	r3, r3, #5
 8003158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800315c:	4419      	add	r1, r3
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	4613      	mov	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	4413      	add	r3, r2
 8003166:	009a      	lsls	r2, r3, #2
 8003168:	441a      	add	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	fbb2 f2f3 	udiv	r2, r2, r3
 8003174:	4b0c      	ldr	r3, [pc, #48]	@ (80031a8 <UART_SetConfig+0x118>)
 8003176:	fba3 0302 	umull	r0, r3, r3, r2
 800317a:	095b      	lsrs	r3, r3, #5
 800317c:	2064      	movs	r0, #100	@ 0x64
 800317e:	fb00 f303 	mul.w	r3, r0, r3
 8003182:	1ad3      	subs	r3, r2, r3
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	3332      	adds	r3, #50	@ 0x32
 8003188:	4a07      	ldr	r2, [pc, #28]	@ (80031a8 <UART_SetConfig+0x118>)
 800318a:	fba2 2303 	umull	r2, r3, r2, r3
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	f003 020f 	and.w	r2, r3, #15
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	440a      	add	r2, r1
 800319a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}
 80031a4:	40013800 	.word	0x40013800
 80031a8:	51eb851f 	.word	0x51eb851f

080031ac <siprintf>:
 80031ac:	b40e      	push	{r1, r2, r3}
 80031ae:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80031b2:	b500      	push	{lr}
 80031b4:	b09c      	sub	sp, #112	@ 0x70
 80031b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80031b8:	9002      	str	r0, [sp, #8]
 80031ba:	9006      	str	r0, [sp, #24]
 80031bc:	9107      	str	r1, [sp, #28]
 80031be:	9104      	str	r1, [sp, #16]
 80031c0:	4808      	ldr	r0, [pc, #32]	@ (80031e4 <siprintf+0x38>)
 80031c2:	4909      	ldr	r1, [pc, #36]	@ (80031e8 <siprintf+0x3c>)
 80031c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80031c8:	9105      	str	r1, [sp, #20]
 80031ca:	6800      	ldr	r0, [r0, #0]
 80031cc:	a902      	add	r1, sp, #8
 80031ce:	9301      	str	r3, [sp, #4]
 80031d0:	f000 f992 	bl	80034f8 <_svfiprintf_r>
 80031d4:	2200      	movs	r2, #0
 80031d6:	9b02      	ldr	r3, [sp, #8]
 80031d8:	701a      	strb	r2, [r3, #0]
 80031da:	b01c      	add	sp, #112	@ 0x70
 80031dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80031e0:	b003      	add	sp, #12
 80031e2:	4770      	bx	lr
 80031e4:	20000010 	.word	0x20000010
 80031e8:	ffff0208 	.word	0xffff0208

080031ec <memset>:
 80031ec:	4603      	mov	r3, r0
 80031ee:	4402      	add	r2, r0
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d100      	bne.n	80031f6 <memset+0xa>
 80031f4:	4770      	bx	lr
 80031f6:	f803 1b01 	strb.w	r1, [r3], #1
 80031fa:	e7f9      	b.n	80031f0 <memset+0x4>

080031fc <__errno>:
 80031fc:	4b01      	ldr	r3, [pc, #4]	@ (8003204 <__errno+0x8>)
 80031fe:	6818      	ldr	r0, [r3, #0]
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	20000010 	.word	0x20000010

08003208 <__libc_init_array>:
 8003208:	b570      	push	{r4, r5, r6, lr}
 800320a:	2600      	movs	r6, #0
 800320c:	4d0c      	ldr	r5, [pc, #48]	@ (8003240 <__libc_init_array+0x38>)
 800320e:	4c0d      	ldr	r4, [pc, #52]	@ (8003244 <__libc_init_array+0x3c>)
 8003210:	1b64      	subs	r4, r4, r5
 8003212:	10a4      	asrs	r4, r4, #2
 8003214:	42a6      	cmp	r6, r4
 8003216:	d109      	bne.n	800322c <__libc_init_array+0x24>
 8003218:	f000 fc78 	bl	8003b0c <_init>
 800321c:	2600      	movs	r6, #0
 800321e:	4d0a      	ldr	r5, [pc, #40]	@ (8003248 <__libc_init_array+0x40>)
 8003220:	4c0a      	ldr	r4, [pc, #40]	@ (800324c <__libc_init_array+0x44>)
 8003222:	1b64      	subs	r4, r4, r5
 8003224:	10a4      	asrs	r4, r4, #2
 8003226:	42a6      	cmp	r6, r4
 8003228:	d105      	bne.n	8003236 <__libc_init_array+0x2e>
 800322a:	bd70      	pop	{r4, r5, r6, pc}
 800322c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003230:	4798      	blx	r3
 8003232:	3601      	adds	r6, #1
 8003234:	e7ee      	b.n	8003214 <__libc_init_array+0xc>
 8003236:	f855 3b04 	ldr.w	r3, [r5], #4
 800323a:	4798      	blx	r3
 800323c:	3601      	adds	r6, #1
 800323e:	e7f2      	b.n	8003226 <__libc_init_array+0x1e>
 8003240:	08003bb0 	.word	0x08003bb0
 8003244:	08003bb0 	.word	0x08003bb0
 8003248:	08003bb0 	.word	0x08003bb0
 800324c:	08003bb4 	.word	0x08003bb4

08003250 <__retarget_lock_acquire_recursive>:
 8003250:	4770      	bx	lr

08003252 <__retarget_lock_release_recursive>:
 8003252:	4770      	bx	lr

08003254 <_free_r>:
 8003254:	b538      	push	{r3, r4, r5, lr}
 8003256:	4605      	mov	r5, r0
 8003258:	2900      	cmp	r1, #0
 800325a:	d040      	beq.n	80032de <_free_r+0x8a>
 800325c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003260:	1f0c      	subs	r4, r1, #4
 8003262:	2b00      	cmp	r3, #0
 8003264:	bfb8      	it	lt
 8003266:	18e4      	addlt	r4, r4, r3
 8003268:	f000 f8de 	bl	8003428 <__malloc_lock>
 800326c:	4a1c      	ldr	r2, [pc, #112]	@ (80032e0 <_free_r+0x8c>)
 800326e:	6813      	ldr	r3, [r2, #0]
 8003270:	b933      	cbnz	r3, 8003280 <_free_r+0x2c>
 8003272:	6063      	str	r3, [r4, #4]
 8003274:	6014      	str	r4, [r2, #0]
 8003276:	4628      	mov	r0, r5
 8003278:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800327c:	f000 b8da 	b.w	8003434 <__malloc_unlock>
 8003280:	42a3      	cmp	r3, r4
 8003282:	d908      	bls.n	8003296 <_free_r+0x42>
 8003284:	6820      	ldr	r0, [r4, #0]
 8003286:	1821      	adds	r1, r4, r0
 8003288:	428b      	cmp	r3, r1
 800328a:	bf01      	itttt	eq
 800328c:	6819      	ldreq	r1, [r3, #0]
 800328e:	685b      	ldreq	r3, [r3, #4]
 8003290:	1809      	addeq	r1, r1, r0
 8003292:	6021      	streq	r1, [r4, #0]
 8003294:	e7ed      	b.n	8003272 <_free_r+0x1e>
 8003296:	461a      	mov	r2, r3
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	b10b      	cbz	r3, 80032a0 <_free_r+0x4c>
 800329c:	42a3      	cmp	r3, r4
 800329e:	d9fa      	bls.n	8003296 <_free_r+0x42>
 80032a0:	6811      	ldr	r1, [r2, #0]
 80032a2:	1850      	adds	r0, r2, r1
 80032a4:	42a0      	cmp	r0, r4
 80032a6:	d10b      	bne.n	80032c0 <_free_r+0x6c>
 80032a8:	6820      	ldr	r0, [r4, #0]
 80032aa:	4401      	add	r1, r0
 80032ac:	1850      	adds	r0, r2, r1
 80032ae:	4283      	cmp	r3, r0
 80032b0:	6011      	str	r1, [r2, #0]
 80032b2:	d1e0      	bne.n	8003276 <_free_r+0x22>
 80032b4:	6818      	ldr	r0, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	4408      	add	r0, r1
 80032ba:	6010      	str	r0, [r2, #0]
 80032bc:	6053      	str	r3, [r2, #4]
 80032be:	e7da      	b.n	8003276 <_free_r+0x22>
 80032c0:	d902      	bls.n	80032c8 <_free_r+0x74>
 80032c2:	230c      	movs	r3, #12
 80032c4:	602b      	str	r3, [r5, #0]
 80032c6:	e7d6      	b.n	8003276 <_free_r+0x22>
 80032c8:	6820      	ldr	r0, [r4, #0]
 80032ca:	1821      	adds	r1, r4, r0
 80032cc:	428b      	cmp	r3, r1
 80032ce:	bf01      	itttt	eq
 80032d0:	6819      	ldreq	r1, [r3, #0]
 80032d2:	685b      	ldreq	r3, [r3, #4]
 80032d4:	1809      	addeq	r1, r1, r0
 80032d6:	6021      	streq	r1, [r4, #0]
 80032d8:	6063      	str	r3, [r4, #4]
 80032da:	6054      	str	r4, [r2, #4]
 80032dc:	e7cb      	b.n	8003276 <_free_r+0x22>
 80032de:	bd38      	pop	{r3, r4, r5, pc}
 80032e0:	200002fc 	.word	0x200002fc

080032e4 <sbrk_aligned>:
 80032e4:	b570      	push	{r4, r5, r6, lr}
 80032e6:	4e0f      	ldr	r6, [pc, #60]	@ (8003324 <sbrk_aligned+0x40>)
 80032e8:	460c      	mov	r4, r1
 80032ea:	6831      	ldr	r1, [r6, #0]
 80032ec:	4605      	mov	r5, r0
 80032ee:	b911      	cbnz	r1, 80032f6 <sbrk_aligned+0x12>
 80032f0:	f000 fbaa 	bl	8003a48 <_sbrk_r>
 80032f4:	6030      	str	r0, [r6, #0]
 80032f6:	4621      	mov	r1, r4
 80032f8:	4628      	mov	r0, r5
 80032fa:	f000 fba5 	bl	8003a48 <_sbrk_r>
 80032fe:	1c43      	adds	r3, r0, #1
 8003300:	d103      	bne.n	800330a <sbrk_aligned+0x26>
 8003302:	f04f 34ff 	mov.w	r4, #4294967295
 8003306:	4620      	mov	r0, r4
 8003308:	bd70      	pop	{r4, r5, r6, pc}
 800330a:	1cc4      	adds	r4, r0, #3
 800330c:	f024 0403 	bic.w	r4, r4, #3
 8003310:	42a0      	cmp	r0, r4
 8003312:	d0f8      	beq.n	8003306 <sbrk_aligned+0x22>
 8003314:	1a21      	subs	r1, r4, r0
 8003316:	4628      	mov	r0, r5
 8003318:	f000 fb96 	bl	8003a48 <_sbrk_r>
 800331c:	3001      	adds	r0, #1
 800331e:	d1f2      	bne.n	8003306 <sbrk_aligned+0x22>
 8003320:	e7ef      	b.n	8003302 <sbrk_aligned+0x1e>
 8003322:	bf00      	nop
 8003324:	200002f8 	.word	0x200002f8

08003328 <_malloc_r>:
 8003328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800332c:	1ccd      	adds	r5, r1, #3
 800332e:	f025 0503 	bic.w	r5, r5, #3
 8003332:	3508      	adds	r5, #8
 8003334:	2d0c      	cmp	r5, #12
 8003336:	bf38      	it	cc
 8003338:	250c      	movcc	r5, #12
 800333a:	2d00      	cmp	r5, #0
 800333c:	4606      	mov	r6, r0
 800333e:	db01      	blt.n	8003344 <_malloc_r+0x1c>
 8003340:	42a9      	cmp	r1, r5
 8003342:	d904      	bls.n	800334e <_malloc_r+0x26>
 8003344:	230c      	movs	r3, #12
 8003346:	6033      	str	r3, [r6, #0]
 8003348:	2000      	movs	r0, #0
 800334a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800334e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003424 <_malloc_r+0xfc>
 8003352:	f000 f869 	bl	8003428 <__malloc_lock>
 8003356:	f8d8 3000 	ldr.w	r3, [r8]
 800335a:	461c      	mov	r4, r3
 800335c:	bb44      	cbnz	r4, 80033b0 <_malloc_r+0x88>
 800335e:	4629      	mov	r1, r5
 8003360:	4630      	mov	r0, r6
 8003362:	f7ff ffbf 	bl	80032e4 <sbrk_aligned>
 8003366:	1c43      	adds	r3, r0, #1
 8003368:	4604      	mov	r4, r0
 800336a:	d158      	bne.n	800341e <_malloc_r+0xf6>
 800336c:	f8d8 4000 	ldr.w	r4, [r8]
 8003370:	4627      	mov	r7, r4
 8003372:	2f00      	cmp	r7, #0
 8003374:	d143      	bne.n	80033fe <_malloc_r+0xd6>
 8003376:	2c00      	cmp	r4, #0
 8003378:	d04b      	beq.n	8003412 <_malloc_r+0xea>
 800337a:	6823      	ldr	r3, [r4, #0]
 800337c:	4639      	mov	r1, r7
 800337e:	4630      	mov	r0, r6
 8003380:	eb04 0903 	add.w	r9, r4, r3
 8003384:	f000 fb60 	bl	8003a48 <_sbrk_r>
 8003388:	4581      	cmp	r9, r0
 800338a:	d142      	bne.n	8003412 <_malloc_r+0xea>
 800338c:	6821      	ldr	r1, [r4, #0]
 800338e:	4630      	mov	r0, r6
 8003390:	1a6d      	subs	r5, r5, r1
 8003392:	4629      	mov	r1, r5
 8003394:	f7ff ffa6 	bl	80032e4 <sbrk_aligned>
 8003398:	3001      	adds	r0, #1
 800339a:	d03a      	beq.n	8003412 <_malloc_r+0xea>
 800339c:	6823      	ldr	r3, [r4, #0]
 800339e:	442b      	add	r3, r5
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	f8d8 3000 	ldr.w	r3, [r8]
 80033a6:	685a      	ldr	r2, [r3, #4]
 80033a8:	bb62      	cbnz	r2, 8003404 <_malloc_r+0xdc>
 80033aa:	f8c8 7000 	str.w	r7, [r8]
 80033ae:	e00f      	b.n	80033d0 <_malloc_r+0xa8>
 80033b0:	6822      	ldr	r2, [r4, #0]
 80033b2:	1b52      	subs	r2, r2, r5
 80033b4:	d420      	bmi.n	80033f8 <_malloc_r+0xd0>
 80033b6:	2a0b      	cmp	r2, #11
 80033b8:	d917      	bls.n	80033ea <_malloc_r+0xc2>
 80033ba:	1961      	adds	r1, r4, r5
 80033bc:	42a3      	cmp	r3, r4
 80033be:	6025      	str	r5, [r4, #0]
 80033c0:	bf18      	it	ne
 80033c2:	6059      	strne	r1, [r3, #4]
 80033c4:	6863      	ldr	r3, [r4, #4]
 80033c6:	bf08      	it	eq
 80033c8:	f8c8 1000 	streq.w	r1, [r8]
 80033cc:	5162      	str	r2, [r4, r5]
 80033ce:	604b      	str	r3, [r1, #4]
 80033d0:	4630      	mov	r0, r6
 80033d2:	f000 f82f 	bl	8003434 <__malloc_unlock>
 80033d6:	f104 000b 	add.w	r0, r4, #11
 80033da:	1d23      	adds	r3, r4, #4
 80033dc:	f020 0007 	bic.w	r0, r0, #7
 80033e0:	1ac2      	subs	r2, r0, r3
 80033e2:	bf1c      	itt	ne
 80033e4:	1a1b      	subne	r3, r3, r0
 80033e6:	50a3      	strne	r3, [r4, r2]
 80033e8:	e7af      	b.n	800334a <_malloc_r+0x22>
 80033ea:	6862      	ldr	r2, [r4, #4]
 80033ec:	42a3      	cmp	r3, r4
 80033ee:	bf0c      	ite	eq
 80033f0:	f8c8 2000 	streq.w	r2, [r8]
 80033f4:	605a      	strne	r2, [r3, #4]
 80033f6:	e7eb      	b.n	80033d0 <_malloc_r+0xa8>
 80033f8:	4623      	mov	r3, r4
 80033fa:	6864      	ldr	r4, [r4, #4]
 80033fc:	e7ae      	b.n	800335c <_malloc_r+0x34>
 80033fe:	463c      	mov	r4, r7
 8003400:	687f      	ldr	r7, [r7, #4]
 8003402:	e7b6      	b.n	8003372 <_malloc_r+0x4a>
 8003404:	461a      	mov	r2, r3
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	42a3      	cmp	r3, r4
 800340a:	d1fb      	bne.n	8003404 <_malloc_r+0xdc>
 800340c:	2300      	movs	r3, #0
 800340e:	6053      	str	r3, [r2, #4]
 8003410:	e7de      	b.n	80033d0 <_malloc_r+0xa8>
 8003412:	230c      	movs	r3, #12
 8003414:	4630      	mov	r0, r6
 8003416:	6033      	str	r3, [r6, #0]
 8003418:	f000 f80c 	bl	8003434 <__malloc_unlock>
 800341c:	e794      	b.n	8003348 <_malloc_r+0x20>
 800341e:	6005      	str	r5, [r0, #0]
 8003420:	e7d6      	b.n	80033d0 <_malloc_r+0xa8>
 8003422:	bf00      	nop
 8003424:	200002fc 	.word	0x200002fc

08003428 <__malloc_lock>:
 8003428:	4801      	ldr	r0, [pc, #4]	@ (8003430 <__malloc_lock+0x8>)
 800342a:	f7ff bf11 	b.w	8003250 <__retarget_lock_acquire_recursive>
 800342e:	bf00      	nop
 8003430:	200002f4 	.word	0x200002f4

08003434 <__malloc_unlock>:
 8003434:	4801      	ldr	r0, [pc, #4]	@ (800343c <__malloc_unlock+0x8>)
 8003436:	f7ff bf0c 	b.w	8003252 <__retarget_lock_release_recursive>
 800343a:	bf00      	nop
 800343c:	200002f4 	.word	0x200002f4

08003440 <__ssputs_r>:
 8003440:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003444:	461f      	mov	r7, r3
 8003446:	688e      	ldr	r6, [r1, #8]
 8003448:	4682      	mov	sl, r0
 800344a:	42be      	cmp	r6, r7
 800344c:	460c      	mov	r4, r1
 800344e:	4690      	mov	r8, r2
 8003450:	680b      	ldr	r3, [r1, #0]
 8003452:	d82d      	bhi.n	80034b0 <__ssputs_r+0x70>
 8003454:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003458:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800345c:	d026      	beq.n	80034ac <__ssputs_r+0x6c>
 800345e:	6965      	ldr	r5, [r4, #20]
 8003460:	6909      	ldr	r1, [r1, #16]
 8003462:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003466:	eba3 0901 	sub.w	r9, r3, r1
 800346a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800346e:	1c7b      	adds	r3, r7, #1
 8003470:	444b      	add	r3, r9
 8003472:	106d      	asrs	r5, r5, #1
 8003474:	429d      	cmp	r5, r3
 8003476:	bf38      	it	cc
 8003478:	461d      	movcc	r5, r3
 800347a:	0553      	lsls	r3, r2, #21
 800347c:	d527      	bpl.n	80034ce <__ssputs_r+0x8e>
 800347e:	4629      	mov	r1, r5
 8003480:	f7ff ff52 	bl	8003328 <_malloc_r>
 8003484:	4606      	mov	r6, r0
 8003486:	b360      	cbz	r0, 80034e2 <__ssputs_r+0xa2>
 8003488:	464a      	mov	r2, r9
 800348a:	6921      	ldr	r1, [r4, #16]
 800348c:	f000 fafa 	bl	8003a84 <memcpy>
 8003490:	89a3      	ldrh	r3, [r4, #12]
 8003492:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003496:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800349a:	81a3      	strh	r3, [r4, #12]
 800349c:	6126      	str	r6, [r4, #16]
 800349e:	444e      	add	r6, r9
 80034a0:	6026      	str	r6, [r4, #0]
 80034a2:	463e      	mov	r6, r7
 80034a4:	6165      	str	r5, [r4, #20]
 80034a6:	eba5 0509 	sub.w	r5, r5, r9
 80034aa:	60a5      	str	r5, [r4, #8]
 80034ac:	42be      	cmp	r6, r7
 80034ae:	d900      	bls.n	80034b2 <__ssputs_r+0x72>
 80034b0:	463e      	mov	r6, r7
 80034b2:	4632      	mov	r2, r6
 80034b4:	4641      	mov	r1, r8
 80034b6:	6820      	ldr	r0, [r4, #0]
 80034b8:	f000 faac 	bl	8003a14 <memmove>
 80034bc:	2000      	movs	r0, #0
 80034be:	68a3      	ldr	r3, [r4, #8]
 80034c0:	1b9b      	subs	r3, r3, r6
 80034c2:	60a3      	str	r3, [r4, #8]
 80034c4:	6823      	ldr	r3, [r4, #0]
 80034c6:	4433      	add	r3, r6
 80034c8:	6023      	str	r3, [r4, #0]
 80034ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034ce:	462a      	mov	r2, r5
 80034d0:	f000 fae6 	bl	8003aa0 <_realloc_r>
 80034d4:	4606      	mov	r6, r0
 80034d6:	2800      	cmp	r0, #0
 80034d8:	d1e0      	bne.n	800349c <__ssputs_r+0x5c>
 80034da:	4650      	mov	r0, sl
 80034dc:	6921      	ldr	r1, [r4, #16]
 80034de:	f7ff feb9 	bl	8003254 <_free_r>
 80034e2:	230c      	movs	r3, #12
 80034e4:	f8ca 3000 	str.w	r3, [sl]
 80034e8:	89a3      	ldrh	r3, [r4, #12]
 80034ea:	f04f 30ff 	mov.w	r0, #4294967295
 80034ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80034f2:	81a3      	strh	r3, [r4, #12]
 80034f4:	e7e9      	b.n	80034ca <__ssputs_r+0x8a>
	...

080034f8 <_svfiprintf_r>:
 80034f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034fc:	4698      	mov	r8, r3
 80034fe:	898b      	ldrh	r3, [r1, #12]
 8003500:	4607      	mov	r7, r0
 8003502:	061b      	lsls	r3, r3, #24
 8003504:	460d      	mov	r5, r1
 8003506:	4614      	mov	r4, r2
 8003508:	b09d      	sub	sp, #116	@ 0x74
 800350a:	d510      	bpl.n	800352e <_svfiprintf_r+0x36>
 800350c:	690b      	ldr	r3, [r1, #16]
 800350e:	b973      	cbnz	r3, 800352e <_svfiprintf_r+0x36>
 8003510:	2140      	movs	r1, #64	@ 0x40
 8003512:	f7ff ff09 	bl	8003328 <_malloc_r>
 8003516:	6028      	str	r0, [r5, #0]
 8003518:	6128      	str	r0, [r5, #16]
 800351a:	b930      	cbnz	r0, 800352a <_svfiprintf_r+0x32>
 800351c:	230c      	movs	r3, #12
 800351e:	603b      	str	r3, [r7, #0]
 8003520:	f04f 30ff 	mov.w	r0, #4294967295
 8003524:	b01d      	add	sp, #116	@ 0x74
 8003526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800352a:	2340      	movs	r3, #64	@ 0x40
 800352c:	616b      	str	r3, [r5, #20]
 800352e:	2300      	movs	r3, #0
 8003530:	9309      	str	r3, [sp, #36]	@ 0x24
 8003532:	2320      	movs	r3, #32
 8003534:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003538:	2330      	movs	r3, #48	@ 0x30
 800353a:	f04f 0901 	mov.w	r9, #1
 800353e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003542:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80036dc <_svfiprintf_r+0x1e4>
 8003546:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800354a:	4623      	mov	r3, r4
 800354c:	469a      	mov	sl, r3
 800354e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003552:	b10a      	cbz	r2, 8003558 <_svfiprintf_r+0x60>
 8003554:	2a25      	cmp	r2, #37	@ 0x25
 8003556:	d1f9      	bne.n	800354c <_svfiprintf_r+0x54>
 8003558:	ebba 0b04 	subs.w	fp, sl, r4
 800355c:	d00b      	beq.n	8003576 <_svfiprintf_r+0x7e>
 800355e:	465b      	mov	r3, fp
 8003560:	4622      	mov	r2, r4
 8003562:	4629      	mov	r1, r5
 8003564:	4638      	mov	r0, r7
 8003566:	f7ff ff6b 	bl	8003440 <__ssputs_r>
 800356a:	3001      	adds	r0, #1
 800356c:	f000 80a7 	beq.w	80036be <_svfiprintf_r+0x1c6>
 8003570:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003572:	445a      	add	r2, fp
 8003574:	9209      	str	r2, [sp, #36]	@ 0x24
 8003576:	f89a 3000 	ldrb.w	r3, [sl]
 800357a:	2b00      	cmp	r3, #0
 800357c:	f000 809f 	beq.w	80036be <_svfiprintf_r+0x1c6>
 8003580:	2300      	movs	r3, #0
 8003582:	f04f 32ff 	mov.w	r2, #4294967295
 8003586:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800358a:	f10a 0a01 	add.w	sl, sl, #1
 800358e:	9304      	str	r3, [sp, #16]
 8003590:	9307      	str	r3, [sp, #28]
 8003592:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003596:	931a      	str	r3, [sp, #104]	@ 0x68
 8003598:	4654      	mov	r4, sl
 800359a:	2205      	movs	r2, #5
 800359c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80035a0:	484e      	ldr	r0, [pc, #312]	@ (80036dc <_svfiprintf_r+0x1e4>)
 80035a2:	f000 fa61 	bl	8003a68 <memchr>
 80035a6:	9a04      	ldr	r2, [sp, #16]
 80035a8:	b9d8      	cbnz	r0, 80035e2 <_svfiprintf_r+0xea>
 80035aa:	06d0      	lsls	r0, r2, #27
 80035ac:	bf44      	itt	mi
 80035ae:	2320      	movmi	r3, #32
 80035b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035b4:	0711      	lsls	r1, r2, #28
 80035b6:	bf44      	itt	mi
 80035b8:	232b      	movmi	r3, #43	@ 0x2b
 80035ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80035be:	f89a 3000 	ldrb.w	r3, [sl]
 80035c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80035c4:	d015      	beq.n	80035f2 <_svfiprintf_r+0xfa>
 80035c6:	4654      	mov	r4, sl
 80035c8:	2000      	movs	r0, #0
 80035ca:	f04f 0c0a 	mov.w	ip, #10
 80035ce:	9a07      	ldr	r2, [sp, #28]
 80035d0:	4621      	mov	r1, r4
 80035d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80035d6:	3b30      	subs	r3, #48	@ 0x30
 80035d8:	2b09      	cmp	r3, #9
 80035da:	d94b      	bls.n	8003674 <_svfiprintf_r+0x17c>
 80035dc:	b1b0      	cbz	r0, 800360c <_svfiprintf_r+0x114>
 80035de:	9207      	str	r2, [sp, #28]
 80035e0:	e014      	b.n	800360c <_svfiprintf_r+0x114>
 80035e2:	eba0 0308 	sub.w	r3, r0, r8
 80035e6:	fa09 f303 	lsl.w	r3, r9, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	46a2      	mov	sl, r4
 80035ee:	9304      	str	r3, [sp, #16]
 80035f0:	e7d2      	b.n	8003598 <_svfiprintf_r+0xa0>
 80035f2:	9b03      	ldr	r3, [sp, #12]
 80035f4:	1d19      	adds	r1, r3, #4
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	9103      	str	r1, [sp, #12]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	bfbb      	ittet	lt
 80035fe:	425b      	neglt	r3, r3
 8003600:	f042 0202 	orrlt.w	r2, r2, #2
 8003604:	9307      	strge	r3, [sp, #28]
 8003606:	9307      	strlt	r3, [sp, #28]
 8003608:	bfb8      	it	lt
 800360a:	9204      	strlt	r2, [sp, #16]
 800360c:	7823      	ldrb	r3, [r4, #0]
 800360e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003610:	d10a      	bne.n	8003628 <_svfiprintf_r+0x130>
 8003612:	7863      	ldrb	r3, [r4, #1]
 8003614:	2b2a      	cmp	r3, #42	@ 0x2a
 8003616:	d132      	bne.n	800367e <_svfiprintf_r+0x186>
 8003618:	9b03      	ldr	r3, [sp, #12]
 800361a:	3402      	adds	r4, #2
 800361c:	1d1a      	adds	r2, r3, #4
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	9203      	str	r2, [sp, #12]
 8003622:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003626:	9305      	str	r3, [sp, #20]
 8003628:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80036e0 <_svfiprintf_r+0x1e8>
 800362c:	2203      	movs	r2, #3
 800362e:	4650      	mov	r0, sl
 8003630:	7821      	ldrb	r1, [r4, #0]
 8003632:	f000 fa19 	bl	8003a68 <memchr>
 8003636:	b138      	cbz	r0, 8003648 <_svfiprintf_r+0x150>
 8003638:	2240      	movs	r2, #64	@ 0x40
 800363a:	9b04      	ldr	r3, [sp, #16]
 800363c:	eba0 000a 	sub.w	r0, r0, sl
 8003640:	4082      	lsls	r2, r0
 8003642:	4313      	orrs	r3, r2
 8003644:	3401      	adds	r4, #1
 8003646:	9304      	str	r3, [sp, #16]
 8003648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800364c:	2206      	movs	r2, #6
 800364e:	4825      	ldr	r0, [pc, #148]	@ (80036e4 <_svfiprintf_r+0x1ec>)
 8003650:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003654:	f000 fa08 	bl	8003a68 <memchr>
 8003658:	2800      	cmp	r0, #0
 800365a:	d036      	beq.n	80036ca <_svfiprintf_r+0x1d2>
 800365c:	4b22      	ldr	r3, [pc, #136]	@ (80036e8 <_svfiprintf_r+0x1f0>)
 800365e:	bb1b      	cbnz	r3, 80036a8 <_svfiprintf_r+0x1b0>
 8003660:	9b03      	ldr	r3, [sp, #12]
 8003662:	3307      	adds	r3, #7
 8003664:	f023 0307 	bic.w	r3, r3, #7
 8003668:	3308      	adds	r3, #8
 800366a:	9303      	str	r3, [sp, #12]
 800366c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800366e:	4433      	add	r3, r6
 8003670:	9309      	str	r3, [sp, #36]	@ 0x24
 8003672:	e76a      	b.n	800354a <_svfiprintf_r+0x52>
 8003674:	460c      	mov	r4, r1
 8003676:	2001      	movs	r0, #1
 8003678:	fb0c 3202 	mla	r2, ip, r2, r3
 800367c:	e7a8      	b.n	80035d0 <_svfiprintf_r+0xd8>
 800367e:	2300      	movs	r3, #0
 8003680:	f04f 0c0a 	mov.w	ip, #10
 8003684:	4619      	mov	r1, r3
 8003686:	3401      	adds	r4, #1
 8003688:	9305      	str	r3, [sp, #20]
 800368a:	4620      	mov	r0, r4
 800368c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003690:	3a30      	subs	r2, #48	@ 0x30
 8003692:	2a09      	cmp	r2, #9
 8003694:	d903      	bls.n	800369e <_svfiprintf_r+0x1a6>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0c6      	beq.n	8003628 <_svfiprintf_r+0x130>
 800369a:	9105      	str	r1, [sp, #20]
 800369c:	e7c4      	b.n	8003628 <_svfiprintf_r+0x130>
 800369e:	4604      	mov	r4, r0
 80036a0:	2301      	movs	r3, #1
 80036a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80036a6:	e7f0      	b.n	800368a <_svfiprintf_r+0x192>
 80036a8:	ab03      	add	r3, sp, #12
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	462a      	mov	r2, r5
 80036ae:	4638      	mov	r0, r7
 80036b0:	4b0e      	ldr	r3, [pc, #56]	@ (80036ec <_svfiprintf_r+0x1f4>)
 80036b2:	a904      	add	r1, sp, #16
 80036b4:	f3af 8000 	nop.w
 80036b8:	1c42      	adds	r2, r0, #1
 80036ba:	4606      	mov	r6, r0
 80036bc:	d1d6      	bne.n	800366c <_svfiprintf_r+0x174>
 80036be:	89ab      	ldrh	r3, [r5, #12]
 80036c0:	065b      	lsls	r3, r3, #25
 80036c2:	f53f af2d 	bmi.w	8003520 <_svfiprintf_r+0x28>
 80036c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80036c8:	e72c      	b.n	8003524 <_svfiprintf_r+0x2c>
 80036ca:	ab03      	add	r3, sp, #12
 80036cc:	9300      	str	r3, [sp, #0]
 80036ce:	462a      	mov	r2, r5
 80036d0:	4638      	mov	r0, r7
 80036d2:	4b06      	ldr	r3, [pc, #24]	@ (80036ec <_svfiprintf_r+0x1f4>)
 80036d4:	a904      	add	r1, sp, #16
 80036d6:	f000 f87d 	bl	80037d4 <_printf_i>
 80036da:	e7ed      	b.n	80036b8 <_svfiprintf_r+0x1c0>
 80036dc:	08003b72 	.word	0x08003b72
 80036e0:	08003b78 	.word	0x08003b78
 80036e4:	08003b7c 	.word	0x08003b7c
 80036e8:	00000000 	.word	0x00000000
 80036ec:	08003441 	.word	0x08003441

080036f0 <_printf_common>:
 80036f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80036f4:	4616      	mov	r6, r2
 80036f6:	4698      	mov	r8, r3
 80036f8:	688a      	ldr	r2, [r1, #8]
 80036fa:	690b      	ldr	r3, [r1, #16]
 80036fc:	4607      	mov	r7, r0
 80036fe:	4293      	cmp	r3, r2
 8003700:	bfb8      	it	lt
 8003702:	4613      	movlt	r3, r2
 8003704:	6033      	str	r3, [r6, #0]
 8003706:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800370a:	460c      	mov	r4, r1
 800370c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003710:	b10a      	cbz	r2, 8003716 <_printf_common+0x26>
 8003712:	3301      	adds	r3, #1
 8003714:	6033      	str	r3, [r6, #0]
 8003716:	6823      	ldr	r3, [r4, #0]
 8003718:	0699      	lsls	r1, r3, #26
 800371a:	bf42      	ittt	mi
 800371c:	6833      	ldrmi	r3, [r6, #0]
 800371e:	3302      	addmi	r3, #2
 8003720:	6033      	strmi	r3, [r6, #0]
 8003722:	6825      	ldr	r5, [r4, #0]
 8003724:	f015 0506 	ands.w	r5, r5, #6
 8003728:	d106      	bne.n	8003738 <_printf_common+0x48>
 800372a:	f104 0a19 	add.w	sl, r4, #25
 800372e:	68e3      	ldr	r3, [r4, #12]
 8003730:	6832      	ldr	r2, [r6, #0]
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	42ab      	cmp	r3, r5
 8003736:	dc2b      	bgt.n	8003790 <_printf_common+0xa0>
 8003738:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800373c:	6822      	ldr	r2, [r4, #0]
 800373e:	3b00      	subs	r3, #0
 8003740:	bf18      	it	ne
 8003742:	2301      	movne	r3, #1
 8003744:	0692      	lsls	r2, r2, #26
 8003746:	d430      	bmi.n	80037aa <_printf_common+0xba>
 8003748:	4641      	mov	r1, r8
 800374a:	4638      	mov	r0, r7
 800374c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003750:	47c8      	blx	r9
 8003752:	3001      	adds	r0, #1
 8003754:	d023      	beq.n	800379e <_printf_common+0xae>
 8003756:	6823      	ldr	r3, [r4, #0]
 8003758:	6922      	ldr	r2, [r4, #16]
 800375a:	f003 0306 	and.w	r3, r3, #6
 800375e:	2b04      	cmp	r3, #4
 8003760:	bf14      	ite	ne
 8003762:	2500      	movne	r5, #0
 8003764:	6833      	ldreq	r3, [r6, #0]
 8003766:	f04f 0600 	mov.w	r6, #0
 800376a:	bf08      	it	eq
 800376c:	68e5      	ldreq	r5, [r4, #12]
 800376e:	f104 041a 	add.w	r4, r4, #26
 8003772:	bf08      	it	eq
 8003774:	1aed      	subeq	r5, r5, r3
 8003776:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800377a:	bf08      	it	eq
 800377c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003780:	4293      	cmp	r3, r2
 8003782:	bfc4      	itt	gt
 8003784:	1a9b      	subgt	r3, r3, r2
 8003786:	18ed      	addgt	r5, r5, r3
 8003788:	42b5      	cmp	r5, r6
 800378a:	d11a      	bne.n	80037c2 <_printf_common+0xd2>
 800378c:	2000      	movs	r0, #0
 800378e:	e008      	b.n	80037a2 <_printf_common+0xb2>
 8003790:	2301      	movs	r3, #1
 8003792:	4652      	mov	r2, sl
 8003794:	4641      	mov	r1, r8
 8003796:	4638      	mov	r0, r7
 8003798:	47c8      	blx	r9
 800379a:	3001      	adds	r0, #1
 800379c:	d103      	bne.n	80037a6 <_printf_common+0xb6>
 800379e:	f04f 30ff 	mov.w	r0, #4294967295
 80037a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80037a6:	3501      	adds	r5, #1
 80037a8:	e7c1      	b.n	800372e <_printf_common+0x3e>
 80037aa:	2030      	movs	r0, #48	@ 0x30
 80037ac:	18e1      	adds	r1, r4, r3
 80037ae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80037b8:	4422      	add	r2, r4
 80037ba:	3302      	adds	r3, #2
 80037bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80037c0:	e7c2      	b.n	8003748 <_printf_common+0x58>
 80037c2:	2301      	movs	r3, #1
 80037c4:	4622      	mov	r2, r4
 80037c6:	4641      	mov	r1, r8
 80037c8:	4638      	mov	r0, r7
 80037ca:	47c8      	blx	r9
 80037cc:	3001      	adds	r0, #1
 80037ce:	d0e6      	beq.n	800379e <_printf_common+0xae>
 80037d0:	3601      	adds	r6, #1
 80037d2:	e7d9      	b.n	8003788 <_printf_common+0x98>

080037d4 <_printf_i>:
 80037d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80037d8:	7e0f      	ldrb	r7, [r1, #24]
 80037da:	4691      	mov	r9, r2
 80037dc:	2f78      	cmp	r7, #120	@ 0x78
 80037de:	4680      	mov	r8, r0
 80037e0:	460c      	mov	r4, r1
 80037e2:	469a      	mov	sl, r3
 80037e4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80037e6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80037ea:	d807      	bhi.n	80037fc <_printf_i+0x28>
 80037ec:	2f62      	cmp	r7, #98	@ 0x62
 80037ee:	d80a      	bhi.n	8003806 <_printf_i+0x32>
 80037f0:	2f00      	cmp	r7, #0
 80037f2:	f000 80d3 	beq.w	800399c <_printf_i+0x1c8>
 80037f6:	2f58      	cmp	r7, #88	@ 0x58
 80037f8:	f000 80ba 	beq.w	8003970 <_printf_i+0x19c>
 80037fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003800:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003804:	e03a      	b.n	800387c <_printf_i+0xa8>
 8003806:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800380a:	2b15      	cmp	r3, #21
 800380c:	d8f6      	bhi.n	80037fc <_printf_i+0x28>
 800380e:	a101      	add	r1, pc, #4	@ (adr r1, 8003814 <_printf_i+0x40>)
 8003810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003814:	0800386d 	.word	0x0800386d
 8003818:	08003881 	.word	0x08003881
 800381c:	080037fd 	.word	0x080037fd
 8003820:	080037fd 	.word	0x080037fd
 8003824:	080037fd 	.word	0x080037fd
 8003828:	080037fd 	.word	0x080037fd
 800382c:	08003881 	.word	0x08003881
 8003830:	080037fd 	.word	0x080037fd
 8003834:	080037fd 	.word	0x080037fd
 8003838:	080037fd 	.word	0x080037fd
 800383c:	080037fd 	.word	0x080037fd
 8003840:	08003983 	.word	0x08003983
 8003844:	080038ab 	.word	0x080038ab
 8003848:	0800393d 	.word	0x0800393d
 800384c:	080037fd 	.word	0x080037fd
 8003850:	080037fd 	.word	0x080037fd
 8003854:	080039a5 	.word	0x080039a5
 8003858:	080037fd 	.word	0x080037fd
 800385c:	080038ab 	.word	0x080038ab
 8003860:	080037fd 	.word	0x080037fd
 8003864:	080037fd 	.word	0x080037fd
 8003868:	08003945 	.word	0x08003945
 800386c:	6833      	ldr	r3, [r6, #0]
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6032      	str	r2, [r6, #0]
 8003874:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003878:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800387c:	2301      	movs	r3, #1
 800387e:	e09e      	b.n	80039be <_printf_i+0x1ea>
 8003880:	6833      	ldr	r3, [r6, #0]
 8003882:	6820      	ldr	r0, [r4, #0]
 8003884:	1d19      	adds	r1, r3, #4
 8003886:	6031      	str	r1, [r6, #0]
 8003888:	0606      	lsls	r6, r0, #24
 800388a:	d501      	bpl.n	8003890 <_printf_i+0xbc>
 800388c:	681d      	ldr	r5, [r3, #0]
 800388e:	e003      	b.n	8003898 <_printf_i+0xc4>
 8003890:	0645      	lsls	r5, r0, #25
 8003892:	d5fb      	bpl.n	800388c <_printf_i+0xb8>
 8003894:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003898:	2d00      	cmp	r5, #0
 800389a:	da03      	bge.n	80038a4 <_printf_i+0xd0>
 800389c:	232d      	movs	r3, #45	@ 0x2d
 800389e:	426d      	negs	r5, r5
 80038a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80038a4:	230a      	movs	r3, #10
 80038a6:	4859      	ldr	r0, [pc, #356]	@ (8003a0c <_printf_i+0x238>)
 80038a8:	e011      	b.n	80038ce <_printf_i+0xfa>
 80038aa:	6821      	ldr	r1, [r4, #0]
 80038ac:	6833      	ldr	r3, [r6, #0]
 80038ae:	0608      	lsls	r0, r1, #24
 80038b0:	f853 5b04 	ldr.w	r5, [r3], #4
 80038b4:	d402      	bmi.n	80038bc <_printf_i+0xe8>
 80038b6:	0649      	lsls	r1, r1, #25
 80038b8:	bf48      	it	mi
 80038ba:	b2ad      	uxthmi	r5, r5
 80038bc:	2f6f      	cmp	r7, #111	@ 0x6f
 80038be:	6033      	str	r3, [r6, #0]
 80038c0:	bf14      	ite	ne
 80038c2:	230a      	movne	r3, #10
 80038c4:	2308      	moveq	r3, #8
 80038c6:	4851      	ldr	r0, [pc, #324]	@ (8003a0c <_printf_i+0x238>)
 80038c8:	2100      	movs	r1, #0
 80038ca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80038ce:	6866      	ldr	r6, [r4, #4]
 80038d0:	2e00      	cmp	r6, #0
 80038d2:	bfa8      	it	ge
 80038d4:	6821      	ldrge	r1, [r4, #0]
 80038d6:	60a6      	str	r6, [r4, #8]
 80038d8:	bfa4      	itt	ge
 80038da:	f021 0104 	bicge.w	r1, r1, #4
 80038de:	6021      	strge	r1, [r4, #0]
 80038e0:	b90d      	cbnz	r5, 80038e6 <_printf_i+0x112>
 80038e2:	2e00      	cmp	r6, #0
 80038e4:	d04b      	beq.n	800397e <_printf_i+0x1aa>
 80038e6:	4616      	mov	r6, r2
 80038e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80038ec:	fb03 5711 	mls	r7, r3, r1, r5
 80038f0:	5dc7      	ldrb	r7, [r0, r7]
 80038f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80038f6:	462f      	mov	r7, r5
 80038f8:	42bb      	cmp	r3, r7
 80038fa:	460d      	mov	r5, r1
 80038fc:	d9f4      	bls.n	80038e8 <_printf_i+0x114>
 80038fe:	2b08      	cmp	r3, #8
 8003900:	d10b      	bne.n	800391a <_printf_i+0x146>
 8003902:	6823      	ldr	r3, [r4, #0]
 8003904:	07df      	lsls	r7, r3, #31
 8003906:	d508      	bpl.n	800391a <_printf_i+0x146>
 8003908:	6923      	ldr	r3, [r4, #16]
 800390a:	6861      	ldr	r1, [r4, #4]
 800390c:	4299      	cmp	r1, r3
 800390e:	bfde      	ittt	le
 8003910:	2330      	movle	r3, #48	@ 0x30
 8003912:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003916:	f106 36ff 	addle.w	r6, r6, #4294967295
 800391a:	1b92      	subs	r2, r2, r6
 800391c:	6122      	str	r2, [r4, #16]
 800391e:	464b      	mov	r3, r9
 8003920:	4621      	mov	r1, r4
 8003922:	4640      	mov	r0, r8
 8003924:	f8cd a000 	str.w	sl, [sp]
 8003928:	aa03      	add	r2, sp, #12
 800392a:	f7ff fee1 	bl	80036f0 <_printf_common>
 800392e:	3001      	adds	r0, #1
 8003930:	d14a      	bne.n	80039c8 <_printf_i+0x1f4>
 8003932:	f04f 30ff 	mov.w	r0, #4294967295
 8003936:	b004      	add	sp, #16
 8003938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	f043 0320 	orr.w	r3, r3, #32
 8003942:	6023      	str	r3, [r4, #0]
 8003944:	2778      	movs	r7, #120	@ 0x78
 8003946:	4832      	ldr	r0, [pc, #200]	@ (8003a10 <_printf_i+0x23c>)
 8003948:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	6831      	ldr	r1, [r6, #0]
 8003950:	061f      	lsls	r7, r3, #24
 8003952:	f851 5b04 	ldr.w	r5, [r1], #4
 8003956:	d402      	bmi.n	800395e <_printf_i+0x18a>
 8003958:	065f      	lsls	r7, r3, #25
 800395a:	bf48      	it	mi
 800395c:	b2ad      	uxthmi	r5, r5
 800395e:	6031      	str	r1, [r6, #0]
 8003960:	07d9      	lsls	r1, r3, #31
 8003962:	bf44      	itt	mi
 8003964:	f043 0320 	orrmi.w	r3, r3, #32
 8003968:	6023      	strmi	r3, [r4, #0]
 800396a:	b11d      	cbz	r5, 8003974 <_printf_i+0x1a0>
 800396c:	2310      	movs	r3, #16
 800396e:	e7ab      	b.n	80038c8 <_printf_i+0xf4>
 8003970:	4826      	ldr	r0, [pc, #152]	@ (8003a0c <_printf_i+0x238>)
 8003972:	e7e9      	b.n	8003948 <_printf_i+0x174>
 8003974:	6823      	ldr	r3, [r4, #0]
 8003976:	f023 0320 	bic.w	r3, r3, #32
 800397a:	6023      	str	r3, [r4, #0]
 800397c:	e7f6      	b.n	800396c <_printf_i+0x198>
 800397e:	4616      	mov	r6, r2
 8003980:	e7bd      	b.n	80038fe <_printf_i+0x12a>
 8003982:	6833      	ldr	r3, [r6, #0]
 8003984:	6825      	ldr	r5, [r4, #0]
 8003986:	1d18      	adds	r0, r3, #4
 8003988:	6961      	ldr	r1, [r4, #20]
 800398a:	6030      	str	r0, [r6, #0]
 800398c:	062e      	lsls	r6, r5, #24
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	d501      	bpl.n	8003996 <_printf_i+0x1c2>
 8003992:	6019      	str	r1, [r3, #0]
 8003994:	e002      	b.n	800399c <_printf_i+0x1c8>
 8003996:	0668      	lsls	r0, r5, #25
 8003998:	d5fb      	bpl.n	8003992 <_printf_i+0x1be>
 800399a:	8019      	strh	r1, [r3, #0]
 800399c:	2300      	movs	r3, #0
 800399e:	4616      	mov	r6, r2
 80039a0:	6123      	str	r3, [r4, #16]
 80039a2:	e7bc      	b.n	800391e <_printf_i+0x14a>
 80039a4:	6833      	ldr	r3, [r6, #0]
 80039a6:	2100      	movs	r1, #0
 80039a8:	1d1a      	adds	r2, r3, #4
 80039aa:	6032      	str	r2, [r6, #0]
 80039ac:	681e      	ldr	r6, [r3, #0]
 80039ae:	6862      	ldr	r2, [r4, #4]
 80039b0:	4630      	mov	r0, r6
 80039b2:	f000 f859 	bl	8003a68 <memchr>
 80039b6:	b108      	cbz	r0, 80039bc <_printf_i+0x1e8>
 80039b8:	1b80      	subs	r0, r0, r6
 80039ba:	6060      	str	r0, [r4, #4]
 80039bc:	6863      	ldr	r3, [r4, #4]
 80039be:	6123      	str	r3, [r4, #16]
 80039c0:	2300      	movs	r3, #0
 80039c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80039c6:	e7aa      	b.n	800391e <_printf_i+0x14a>
 80039c8:	4632      	mov	r2, r6
 80039ca:	4649      	mov	r1, r9
 80039cc:	4640      	mov	r0, r8
 80039ce:	6923      	ldr	r3, [r4, #16]
 80039d0:	47d0      	blx	sl
 80039d2:	3001      	adds	r0, #1
 80039d4:	d0ad      	beq.n	8003932 <_printf_i+0x15e>
 80039d6:	6823      	ldr	r3, [r4, #0]
 80039d8:	079b      	lsls	r3, r3, #30
 80039da:	d413      	bmi.n	8003a04 <_printf_i+0x230>
 80039dc:	68e0      	ldr	r0, [r4, #12]
 80039de:	9b03      	ldr	r3, [sp, #12]
 80039e0:	4298      	cmp	r0, r3
 80039e2:	bfb8      	it	lt
 80039e4:	4618      	movlt	r0, r3
 80039e6:	e7a6      	b.n	8003936 <_printf_i+0x162>
 80039e8:	2301      	movs	r3, #1
 80039ea:	4632      	mov	r2, r6
 80039ec:	4649      	mov	r1, r9
 80039ee:	4640      	mov	r0, r8
 80039f0:	47d0      	blx	sl
 80039f2:	3001      	adds	r0, #1
 80039f4:	d09d      	beq.n	8003932 <_printf_i+0x15e>
 80039f6:	3501      	adds	r5, #1
 80039f8:	68e3      	ldr	r3, [r4, #12]
 80039fa:	9903      	ldr	r1, [sp, #12]
 80039fc:	1a5b      	subs	r3, r3, r1
 80039fe:	42ab      	cmp	r3, r5
 8003a00:	dcf2      	bgt.n	80039e8 <_printf_i+0x214>
 8003a02:	e7eb      	b.n	80039dc <_printf_i+0x208>
 8003a04:	2500      	movs	r5, #0
 8003a06:	f104 0619 	add.w	r6, r4, #25
 8003a0a:	e7f5      	b.n	80039f8 <_printf_i+0x224>
 8003a0c:	08003b83 	.word	0x08003b83
 8003a10:	08003b94 	.word	0x08003b94

08003a14 <memmove>:
 8003a14:	4288      	cmp	r0, r1
 8003a16:	b510      	push	{r4, lr}
 8003a18:	eb01 0402 	add.w	r4, r1, r2
 8003a1c:	d902      	bls.n	8003a24 <memmove+0x10>
 8003a1e:	4284      	cmp	r4, r0
 8003a20:	4623      	mov	r3, r4
 8003a22:	d807      	bhi.n	8003a34 <memmove+0x20>
 8003a24:	1e43      	subs	r3, r0, #1
 8003a26:	42a1      	cmp	r1, r4
 8003a28:	d008      	beq.n	8003a3c <memmove+0x28>
 8003a2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003a32:	e7f8      	b.n	8003a26 <memmove+0x12>
 8003a34:	4601      	mov	r1, r0
 8003a36:	4402      	add	r2, r0
 8003a38:	428a      	cmp	r2, r1
 8003a3a:	d100      	bne.n	8003a3e <memmove+0x2a>
 8003a3c:	bd10      	pop	{r4, pc}
 8003a3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003a42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003a46:	e7f7      	b.n	8003a38 <memmove+0x24>

08003a48 <_sbrk_r>:
 8003a48:	b538      	push	{r3, r4, r5, lr}
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	4d05      	ldr	r5, [pc, #20]	@ (8003a64 <_sbrk_r+0x1c>)
 8003a4e:	4604      	mov	r4, r0
 8003a50:	4608      	mov	r0, r1
 8003a52:	602b      	str	r3, [r5, #0]
 8003a54:	f7fd fb2e 	bl	80010b4 <_sbrk>
 8003a58:	1c43      	adds	r3, r0, #1
 8003a5a:	d102      	bne.n	8003a62 <_sbrk_r+0x1a>
 8003a5c:	682b      	ldr	r3, [r5, #0]
 8003a5e:	b103      	cbz	r3, 8003a62 <_sbrk_r+0x1a>
 8003a60:	6023      	str	r3, [r4, #0]
 8003a62:	bd38      	pop	{r3, r4, r5, pc}
 8003a64:	200002f0 	.word	0x200002f0

08003a68 <memchr>:
 8003a68:	4603      	mov	r3, r0
 8003a6a:	b510      	push	{r4, lr}
 8003a6c:	b2c9      	uxtb	r1, r1
 8003a6e:	4402      	add	r2, r0
 8003a70:	4293      	cmp	r3, r2
 8003a72:	4618      	mov	r0, r3
 8003a74:	d101      	bne.n	8003a7a <memchr+0x12>
 8003a76:	2000      	movs	r0, #0
 8003a78:	e003      	b.n	8003a82 <memchr+0x1a>
 8003a7a:	7804      	ldrb	r4, [r0, #0]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	428c      	cmp	r4, r1
 8003a80:	d1f6      	bne.n	8003a70 <memchr+0x8>
 8003a82:	bd10      	pop	{r4, pc}

08003a84 <memcpy>:
 8003a84:	440a      	add	r2, r1
 8003a86:	4291      	cmp	r1, r2
 8003a88:	f100 33ff 	add.w	r3, r0, #4294967295
 8003a8c:	d100      	bne.n	8003a90 <memcpy+0xc>
 8003a8e:	4770      	bx	lr
 8003a90:	b510      	push	{r4, lr}
 8003a92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003a96:	4291      	cmp	r1, r2
 8003a98:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003a9c:	d1f9      	bne.n	8003a92 <memcpy+0xe>
 8003a9e:	bd10      	pop	{r4, pc}

08003aa0 <_realloc_r>:
 8003aa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003aa4:	4680      	mov	r8, r0
 8003aa6:	4615      	mov	r5, r2
 8003aa8:	460c      	mov	r4, r1
 8003aaa:	b921      	cbnz	r1, 8003ab6 <_realloc_r+0x16>
 8003aac:	4611      	mov	r1, r2
 8003aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ab2:	f7ff bc39 	b.w	8003328 <_malloc_r>
 8003ab6:	b92a      	cbnz	r2, 8003ac4 <_realloc_r+0x24>
 8003ab8:	f7ff fbcc 	bl	8003254 <_free_r>
 8003abc:	2400      	movs	r4, #0
 8003abe:	4620      	mov	r0, r4
 8003ac0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ac4:	f000 f81a 	bl	8003afc <_malloc_usable_size_r>
 8003ac8:	4285      	cmp	r5, r0
 8003aca:	4606      	mov	r6, r0
 8003acc:	d802      	bhi.n	8003ad4 <_realloc_r+0x34>
 8003ace:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8003ad2:	d8f4      	bhi.n	8003abe <_realloc_r+0x1e>
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4640      	mov	r0, r8
 8003ad8:	f7ff fc26 	bl	8003328 <_malloc_r>
 8003adc:	4607      	mov	r7, r0
 8003ade:	2800      	cmp	r0, #0
 8003ae0:	d0ec      	beq.n	8003abc <_realloc_r+0x1c>
 8003ae2:	42b5      	cmp	r5, r6
 8003ae4:	462a      	mov	r2, r5
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	bf28      	it	cs
 8003aea:	4632      	movcs	r2, r6
 8003aec:	f7ff ffca 	bl	8003a84 <memcpy>
 8003af0:	4621      	mov	r1, r4
 8003af2:	4640      	mov	r0, r8
 8003af4:	f7ff fbae 	bl	8003254 <_free_r>
 8003af8:	463c      	mov	r4, r7
 8003afa:	e7e0      	b.n	8003abe <_realloc_r+0x1e>

08003afc <_malloc_usable_size_r>:
 8003afc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b00:	1f18      	subs	r0, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	bfbc      	itt	lt
 8003b06:	580b      	ldrlt	r3, [r1, r0]
 8003b08:	18c0      	addlt	r0, r0, r3
 8003b0a:	4770      	bx	lr

08003b0c <_init>:
 8003b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b0e:	bf00      	nop
 8003b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b12:	bc08      	pop	{r3}
 8003b14:	469e      	mov	lr, r3
 8003b16:	4770      	bx	lr

08003b18 <_fini>:
 8003b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1a:	bf00      	nop
 8003b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b1e:	bc08      	pop	{r3}
 8003b20:	469e      	mov	lr, r3
 8003b22:	4770      	bx	lr
