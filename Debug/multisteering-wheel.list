
multisteering-wheel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000278c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002898  08002898  00003898  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080028c4  080028c4  00004010  2**0
                  CONTENTS
  4 .ARM          00000000  080028c4  080028c4  00004010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080028c4  080028c4  00004010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080028c4  080028c4  000038c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080028c8  080028c8  000038c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080028cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  20000010  080028dc  00004010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000d0  080028dc  000040d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00004010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008591  00000000  00000000  00004039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016f7  00000000  00000000  0000c5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0000dcc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005b6  00000000  00000000  0000e440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016d0c  00000000  00000000  0000e9f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008bb5  00000000  00000000  00025702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000840a0  00000000  00000000  0002e2b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b2357  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dc4  00000000  00000000  000b239c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000b4160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08002880 	.word	0x08002880

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08002880 	.word	0x08002880

0800014c <HAL_CAN_RxFifo0MsgPendingCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	//TODO: set correct callback (according to defined addresses)
}
 8000154:	bf00      	nop
 8000156:	370c      	adds	r7, #12
 8000158:	46bd      	mov	sp, r7
 800015a:	bc80      	pop	{r7}
 800015c:	4770      	bx	lr

0800015e <HAL_CAN_ErrorCallback>:
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800015e:	b580      	push	{r7, lr}
 8000160:	b082      	sub	sp, #8
 8000162:	af00      	add	r7, sp, #0
 8000164:	6078      	str	r0, [r7, #4]
	Error_Handler();
 8000166:	f000 fc3f 	bl	80009e8 <Error_Handler>
}
 800016a:	bf00      	nop
 800016c:	3708      	adds	r7, #8
 800016e:	46bd      	mov	sp, r7
 8000170:	bd80      	pop	{r7, pc}

08000172 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000172:	b580      	push	{r7, lr}
 8000174:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000176:	f000 fda5 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800017a:	f000 f80b 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017e:	f000 f8d1 	bl	8000324 <MX_GPIO_Init>
  MX_CAN_Init();
 8000182:	f000 f84d 	bl	8000220 <MX_CAN_Init>
  MX_USART1_UART_Init();
 8000186:	f000 f8a3 	bl	80002d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  startup();
 800018a:	f000 fbd7 	bl	800093c <startup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	button_handler();
 800018e:	f000 f975 	bl	800047c <button_handler>
 8000192:	e7fc      	b.n	800018e <main+0x1c>

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	@ 0x40
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	2228      	movs	r2, #40	@ 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f002 fb40 	bl	8002828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b6:	2301      	movs	r3, #1
 80001b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001c0:	2300      	movs	r3, #0
 80001c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001c4:	2301      	movs	r3, #1
 80001c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c8:	2302      	movs	r3, #2
 80001ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80001d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 80001d2:	f44f 13c0 	mov.w	r3, #1572864	@ 0x180000
 80001d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d8:	f107 0318 	add.w	r3, r7, #24
 80001dc:	4618      	mov	r0, r3
 80001de:	f001 fe35 	bl	8001e4c <HAL_RCC_OscConfig>
 80001e2:	4603      	mov	r3, r0
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d001      	beq.n	80001ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80001e8:	f000 fbfe 	bl	80009e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001ec:	230f      	movs	r3, #15
 80001ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001f0:	2302      	movs	r3, #2
 80001f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001f4:	2300      	movs	r3, #0
 80001f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80001fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2102      	movs	r1, #2
 8000206:	4618      	mov	r0, r3
 8000208:	f002 f8a2 	bl	8002350 <HAL_RCC_ClockConfig>
 800020c:	4603      	mov	r3, r0
 800020e:	2b00      	cmp	r3, #0
 8000210:	d001      	beq.n	8000216 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000212:	f000 fbe9 	bl	80009e8 <Error_Handler>
  }
}
 8000216:	bf00      	nop
 8000218:	3740      	adds	r7, #64	@ 0x40
 800021a:	46bd      	mov	sp, r7
 800021c:	bd80      	pop	{r7, pc}
	...

08000220 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b08a      	sub	sp, #40	@ 0x28
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8000226:	4b28      	ldr	r3, [pc, #160]	@ (80002c8 <MX_CAN_Init+0xa8>)
 8000228:	4a28      	ldr	r2, [pc, #160]	@ (80002cc <MX_CAN_Init+0xac>)
 800022a:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800022c:	4b26      	ldr	r3, [pc, #152]	@ (80002c8 <MX_CAN_Init+0xa8>)
 800022e:	2210      	movs	r2, #16
 8000230:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8000232:	4b25      	ldr	r3, [pc, #148]	@ (80002c8 <MX_CAN_Init+0xa8>)
 8000234:	2200      	movs	r2, #0
 8000236:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000238:	4b23      	ldr	r3, [pc, #140]	@ (80002c8 <MX_CAN_Init+0xa8>)
 800023a:	2200      	movs	r2, #0
 800023c:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 800023e:	4b22      	ldr	r3, [pc, #136]	@ (80002c8 <MX_CAN_Init+0xa8>)
 8000240:	2200      	movs	r2, #0
 8000242:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000244:	4b20      	ldr	r3, [pc, #128]	@ (80002c8 <MX_CAN_Init+0xa8>)
 8000246:	2200      	movs	r2, #0
 8000248:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800024a:	4b1f      	ldr	r3, [pc, #124]	@ (80002c8 <MX_CAN_Init+0xa8>)
 800024c:	2200      	movs	r2, #0
 800024e:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8000250:	4b1d      	ldr	r3, [pc, #116]	@ (80002c8 <MX_CAN_Init+0xa8>)
 8000252:	2200      	movs	r2, #0
 8000254:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000256:	4b1c      	ldr	r3, [pc, #112]	@ (80002c8 <MX_CAN_Init+0xa8>)
 8000258:	2200      	movs	r2, #0
 800025a:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800025c:	4b1a      	ldr	r3, [pc, #104]	@ (80002c8 <MX_CAN_Init+0xa8>)
 800025e:	2200      	movs	r2, #0
 8000260:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8000262:	4b19      	ldr	r3, [pc, #100]	@ (80002c8 <MX_CAN_Init+0xa8>)
 8000264:	2200      	movs	r2, #0
 8000266:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000268:	4b17      	ldr	r3, [pc, #92]	@ (80002c8 <MX_CAN_Init+0xa8>)
 800026a:	2200      	movs	r2, #0
 800026c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 800026e:	4816      	ldr	r0, [pc, #88]	@ (80002c8 <MX_CAN_Init+0xa8>)
 8000270:	f000 fdae 	bl	8000dd0 <HAL_CAN_Init>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_CAN_Init+0x5e>
  {
    Error_Handler();
 800027a:	f000 fbb5 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  sFilterConfig.FilterBank = 0;
 800027e:	2300      	movs	r3, #0
 8000280:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000282:	2300      	movs	r3, #0
 8000284:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_16BIT;
 8000286:	2300      	movs	r3, #0
 8000288:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x600;
 800028a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800028e:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x600;
 8000290:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000294:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x7F8<<5;
 8000296:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 800029a:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x7F8<<5;
 800029c:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
 80002a0:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = ENABLE;
 80002a6:	2301      	movs	r3, #1
 80002a8:	623b      	str	r3, [r7, #32]
  //sFilterConfig.SlaveStartFilterBank = 14;

  if(HAL_CAN_ConfigFilter(&hcan, &sFilterConfig) != HAL_OK)
 80002aa:	463b      	mov	r3, r7
 80002ac:	4619      	mov	r1, r3
 80002ae:	4806      	ldr	r0, [pc, #24]	@ (80002c8 <MX_CAN_Init+0xa8>)
 80002b0:	f000 fe89 	bl	8000fc6 <HAL_CAN_ConfigFilter>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <MX_CAN_Init+0x9e>
  {
  Error_Handler();
 80002ba:	f000 fb95 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE END CAN_Init 2 */

}
 80002be:	bf00      	nop
 80002c0:	3728      	adds	r7, #40	@ 0x28
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	2000002c 	.word	0x2000002c
 80002cc:	40006400 	.word	0x40006400

080002d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80002d4:	4b11      	ldr	r3, [pc, #68]	@ (800031c <MX_USART1_UART_Init+0x4c>)
 80002d6:	4a12      	ldr	r2, [pc, #72]	@ (8000320 <MX_USART1_UART_Init+0x50>)
 80002d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80002da:	4b10      	ldr	r3, [pc, #64]	@ (800031c <MX_USART1_UART_Init+0x4c>)
 80002dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80002e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002e2:	4b0e      	ldr	r3, [pc, #56]	@ (800031c <MX_USART1_UART_Init+0x4c>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002e8:	4b0c      	ldr	r3, [pc, #48]	@ (800031c <MX_USART1_UART_Init+0x4c>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002ee:	4b0b      	ldr	r3, [pc, #44]	@ (800031c <MX_USART1_UART_Init+0x4c>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <MX_USART1_UART_Init+0x4c>)
 80002f6:	220c      	movs	r2, #12
 80002f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002fa:	4b08      	ldr	r3, [pc, #32]	@ (800031c <MX_USART1_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000300:	4b06      	ldr	r3, [pc, #24]	@ (800031c <MX_USART1_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000306:	4805      	ldr	r0, [pc, #20]	@ (800031c <MX_USART1_UART_Init+0x4c>)
 8000308:	f002 f9b0 	bl	800266c <HAL_UART_Init>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000312:	f000 fb69 	bl	80009e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000316:	bf00      	nop
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	20000054 	.word	0x20000054
 8000320:	40013800 	.word	0x40013800

08000324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	b088      	sub	sp, #32
 8000328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800032a:	f107 0310 	add.w	r3, r7, #16
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]
 8000334:	609a      	str	r2, [r3, #8]
 8000336:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000338:	4b4b      	ldr	r3, [pc, #300]	@ (8000468 <MX_GPIO_Init+0x144>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	4a4a      	ldr	r2, [pc, #296]	@ (8000468 <MX_GPIO_Init+0x144>)
 800033e:	f043 0310 	orr.w	r3, r3, #16
 8000342:	6193      	str	r3, [r2, #24]
 8000344:	4b48      	ldr	r3, [pc, #288]	@ (8000468 <MX_GPIO_Init+0x144>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	f003 0310 	and.w	r3, r3, #16
 800034c:	60fb      	str	r3, [r7, #12]
 800034e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000350:	4b45      	ldr	r3, [pc, #276]	@ (8000468 <MX_GPIO_Init+0x144>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	4a44      	ldr	r2, [pc, #272]	@ (8000468 <MX_GPIO_Init+0x144>)
 8000356:	f043 0320 	orr.w	r3, r3, #32
 800035a:	6193      	str	r3, [r2, #24]
 800035c:	4b42      	ldr	r3, [pc, #264]	@ (8000468 <MX_GPIO_Init+0x144>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	f003 0320 	and.w	r3, r3, #32
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000368:	4b3f      	ldr	r3, [pc, #252]	@ (8000468 <MX_GPIO_Init+0x144>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	4a3e      	ldr	r2, [pc, #248]	@ (8000468 <MX_GPIO_Init+0x144>)
 800036e:	f043 0308 	orr.w	r3, r3, #8
 8000372:	6193      	str	r3, [r2, #24]
 8000374:	4b3c      	ldr	r3, [pc, #240]	@ (8000468 <MX_GPIO_Init+0x144>)
 8000376:	699b      	ldr	r3, [r3, #24]
 8000378:	f003 0308 	and.w	r3, r3, #8
 800037c:	607b      	str	r3, [r7, #4]
 800037e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000380:	4b39      	ldr	r3, [pc, #228]	@ (8000468 <MX_GPIO_Init+0x144>)
 8000382:	699b      	ldr	r3, [r3, #24]
 8000384:	4a38      	ldr	r2, [pc, #224]	@ (8000468 <MX_GPIO_Init+0x144>)
 8000386:	f043 0304 	orr.w	r3, r3, #4
 800038a:	6193      	str	r3, [r2, #24]
 800038c:	4b36      	ldr	r3, [pc, #216]	@ (8000468 <MX_GPIO_Init+0x144>)
 800038e:	699b      	ldr	r3, [r3, #24]
 8000390:	f003 0304 	and.w	r3, r3, #4
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, GPIO_PIN_RESET);
 8000398:	2200      	movs	r2, #0
 800039a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800039e:	4833      	ldr	r0, [pc, #204]	@ (800046c <MX_GPIO_Init+0x148>)
 80003a0:	f001 fd23 	bl	8001dea <HAL_GPIO_WritePin>
#if DEBUG == 1
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80003aa:	4831      	ldr	r0, [pc, #196]	@ (8000470 <MX_GPIO_Init+0x14c>)
 80003ac:	f001 fd1d 	bl	8001dea <HAL_GPIO_WritePin>
#endif
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 80003b0:	2200      	movs	r2, #0
 80003b2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80003b6:	482f      	ldr	r0, [pc, #188]	@ (8000474 <MX_GPIO_Init+0x150>)
 80003b8:	f001 fd17 	bl	8001dea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CAN_LED_Pin */
  GPIO_InitStruct.Pin = CAN_LED_Pin;
 80003bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80003c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003c2:	2301      	movs	r3, #1
 80003c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c6:	2300      	movs	r3, #0
 80003c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003ca:	2302      	movs	r3, #2
 80003cc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAN_LED_GPIO_Port, &GPIO_InitStruct);
 80003ce:	f107 0310 	add.w	r3, r7, #16
 80003d2:	4619      	mov	r1, r3
 80003d4:	4825      	ldr	r0, [pc, #148]	@ (800046c <MX_GPIO_Init+0x148>)
 80003d6:	f001 fb6d 	bl	8001ab4 <HAL_GPIO_Init>
#if DEBUG == 1
  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 80003da:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80003de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003e0:	2301      	movs	r3, #1
 80003e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003e4:	2300      	movs	r3, #0
 80003e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003e8:	2302      	movs	r3, #2
 80003ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ec:	f107 0310 	add.w	r3, r7, #16
 80003f0:	4619      	mov	r1, r3
 80003f2:	481f      	ldr	r0, [pc, #124]	@ (8000470 <MX_GPIO_Init+0x14c>)
 80003f4:	f001 fb5e 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 80003f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80003fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003fe:	2301      	movs	r3, #1
 8000400:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000402:	2300      	movs	r3, #0
 8000404:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000406:	2302      	movs	r3, #2
 8000408:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 800040a:	f107 0310 	add.w	r3, r7, #16
 800040e:	4619      	mov	r1, r3
 8000410:	4818      	ldr	r0, [pc, #96]	@ (8000474 <MX_GPIO_Init+0x150>)
 8000412:	f001 fb4f 	bl	8001ab4 <HAL_GPIO_Init>
#endif
  /*Configure GPIO pin : BTN_6_Pin */
  GPIO_InitStruct.Pin = BTN_6_Pin;
 8000416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800041a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800041c:	4b16      	ldr	r3, [pc, #88]	@ (8000478 <MX_GPIO_Init+0x154>)
 800041e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000420:	2300      	movs	r3, #0
 8000422:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_6_GPIO_Port, &GPIO_InitStruct);
 8000424:	f107 0310 	add.w	r3, r7, #16
 8000428:	4619      	mov	r1, r3
 800042a:	4812      	ldr	r0, [pc, #72]	@ (8000474 <MX_GPIO_Init+0x150>)
 800042c:	f001 fb42 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_1_Pin BTN_2_Pin BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin|BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 8000430:	2378      	movs	r3, #120	@ 0x78
 8000432:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000434:	4b10      	ldr	r3, [pc, #64]	@ (8000478 <MX_GPIO_Init+0x154>)
 8000436:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000438:	2302      	movs	r3, #2
 800043a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800043c:	f107 0310 	add.w	r3, r7, #16
 8000440:	4619      	mov	r1, r3
 8000442:	480b      	ldr	r0, [pc, #44]	@ (8000470 <MX_GPIO_Init+0x14c>)
 8000444:	f001 fb36 	bl	8001ab4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_5_Pin */
  GPIO_InitStruct.Pin = BTN_5_Pin;
 8000448:	2380      	movs	r3, #128	@ 0x80
 800044a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800044c:	4b0a      	ldr	r3, [pc, #40]	@ (8000478 <MX_GPIO_Init+0x154>)
 800044e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000450:	2300      	movs	r3, #0
 8000452:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BTN_5_GPIO_Port, &GPIO_InitStruct);
 8000454:	f107 0310 	add.w	r3, r7, #16
 8000458:	4619      	mov	r1, r3
 800045a:	4805      	ldr	r0, [pc, #20]	@ (8000470 <MX_GPIO_Init+0x14c>)
 800045c:	f001 fb2a 	bl	8001ab4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000460:	bf00      	nop
 8000462:	3720      	adds	r7, #32
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	40021000 	.word	0x40021000
 800046c:	40011000 	.word	0x40011000
 8000470:	40010c00 	.word	0x40010c00
 8000474:	40010800 	.word	0x40010800
 8000478:	10110000 	.word	0x10110000

0800047c <button_handler>:

/* USER CODE BEGIN 4 */
void button_handler()
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
	  HAL_Delay(PILOT_FINGER_TAP_SPEED);
 8000480:	2096      	movs	r0, #150	@ 0x96
 8000482:	f000 fc81 	bl	8000d88 <HAL_Delay>
	  /* NEUTRAL GEAR BUTTON COMBINATION HANDLER */
	  if (HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) && HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && (HAL_GetTick() - time_ms > 150) && flag_btn3 == 0 && flag_btn4 == 0){
 8000486:	2120      	movs	r1, #32
 8000488:	4872      	ldr	r0, [pc, #456]	@ (8000654 <button_handler+0x1d8>)
 800048a:	f001 fc97 	bl	8001dbc <HAL_GPIO_ReadPin>
 800048e:	4603      	mov	r3, r0
 8000490:	2b00      	cmp	r3, #0
 8000492:	d033      	beq.n	80004fc <button_handler+0x80>
 8000494:	2140      	movs	r1, #64	@ 0x40
 8000496:	486f      	ldr	r0, [pc, #444]	@ (8000654 <button_handler+0x1d8>)
 8000498:	f001 fc90 	bl	8001dbc <HAL_GPIO_ReadPin>
 800049c:	4603      	mov	r3, r0
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d02c      	beq.n	80004fc <button_handler+0x80>
 80004a2:	f000 fc67 	bl	8000d74 <HAL_GetTick>
 80004a6:	4602      	mov	r2, r0
 80004a8:	4b6b      	ldr	r3, [pc, #428]	@ (8000658 <button_handler+0x1dc>)
 80004aa:	681b      	ldr	r3, [r3, #0]
 80004ac:	1ad3      	subs	r3, r2, r3
 80004ae:	2b96      	cmp	r3, #150	@ 0x96
 80004b0:	d924      	bls.n	80004fc <button_handler+0x80>
 80004b2:	4b6a      	ldr	r3, [pc, #424]	@ (800065c <button_handler+0x1e0>)
 80004b4:	781b      	ldrb	r3, [r3, #0]
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d120      	bne.n	80004fc <button_handler+0x80>
 80004ba:	4b69      	ldr	r3, [pc, #420]	@ (8000660 <button_handler+0x1e4>)
 80004bc:	781b      	ldrb	r3, [r3, #0]
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d11c      	bne.n	80004fc <button_handler+0x80>
	 		  flag_btn3 = 1;
 80004c2:	4b66      	ldr	r3, [pc, #408]	@ (800065c <button_handler+0x1e0>)
 80004c4:	2201      	movs	r2, #1
 80004c6:	701a      	strb	r2, [r3, #0]
	 		  flag_btn4 = 1;
 80004c8:	4b65      	ldr	r3, [pc, #404]	@ (8000660 <button_handler+0x1e4>)
 80004ca:	2201      	movs	r2, #1
 80004cc:	701a      	strb	r2, [r3, #0]
	 		  /* SEND CAN NEUTRAL GEAR MSG HERE */
#if DEBUG == 1
		  	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80004ce:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004d2:	4860      	ldr	r0, [pc, #384]	@ (8000654 <button_handler+0x1d8>)
 80004d4:	f001 fca1 	bl	8001e1a <HAL_GPIO_TogglePin>
		  	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80004d8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004dc:	485d      	ldr	r0, [pc, #372]	@ (8000654 <button_handler+0x1d8>)
 80004de:	f001 fc9c 	bl	8001e1a <HAL_GPIO_TogglePin>
		  	  HAL_Delay(100);
 80004e2:	2064      	movs	r0, #100	@ 0x64
 80004e4:	f000 fc50 	bl	8000d88 <HAL_Delay>
		  	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80004e8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004ec:	4859      	ldr	r0, [pc, #356]	@ (8000654 <button_handler+0x1d8>)
 80004ee:	f001 fc94 	bl	8001e1a <HAL_GPIO_TogglePin>
		  	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80004f2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004f6:	4857      	ldr	r0, [pc, #348]	@ (8000654 <button_handler+0x1d8>)
 80004f8:	f001 fc8f 	bl	8001e1a <HAL_GPIO_TogglePin>
#endif
	  }
	  if (!HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) && !HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && flag_btn3 == 1 && flag_btn4 == 1) {
 80004fc:	2120      	movs	r1, #32
 80004fe:	4855      	ldr	r0, [pc, #340]	@ (8000654 <button_handler+0x1d8>)
 8000500:	f001 fc5c 	bl	8001dbc <HAL_GPIO_ReadPin>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d117      	bne.n	800053a <button_handler+0xbe>
 800050a:	2140      	movs	r1, #64	@ 0x40
 800050c:	4851      	ldr	r0, [pc, #324]	@ (8000654 <button_handler+0x1d8>)
 800050e:	f001 fc55 	bl	8001dbc <HAL_GPIO_ReadPin>
 8000512:	4603      	mov	r3, r0
 8000514:	2b00      	cmp	r3, #0
 8000516:	d110      	bne.n	800053a <button_handler+0xbe>
 8000518:	4b50      	ldr	r3, [pc, #320]	@ (800065c <button_handler+0x1e0>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b01      	cmp	r3, #1
 800051e:	d10c      	bne.n	800053a <button_handler+0xbe>
 8000520:	4b4f      	ldr	r3, [pc, #316]	@ (8000660 <button_handler+0x1e4>)
 8000522:	781b      	ldrb	r3, [r3, #0]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d108      	bne.n	800053a <button_handler+0xbe>
	  	 		  flag_btn3 = 0;
 8000528:	4b4c      	ldr	r3, [pc, #304]	@ (800065c <button_handler+0x1e0>)
 800052a:	2200      	movs	r2, #0
 800052c:	701a      	strb	r2, [r3, #0]
	  	 		  flag_btn4 = 0;
 800052e:	4b4c      	ldr	r3, [pc, #304]	@ (8000660 <button_handler+0x1e4>)
 8000530:	2200      	movs	r2, #0
 8000532:	701a      	strb	r2, [r3, #0]
	  	 		  HAL_Delay(100);
 8000534:	2064      	movs	r0, #100	@ 0x64
 8000536:	f000 fc27 	bl	8000d88 <HAL_Delay>
	  	 	}
	  /* GEAR UP BUTTON HANDLER */
	  if (HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) && !HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && (HAL_GetTick() - time_ms > 150) && flag_btn3 == 0) {
 800053a:	2120      	movs	r1, #32
 800053c:	4845      	ldr	r0, [pc, #276]	@ (8000654 <button_handler+0x1d8>)
 800053e:	f001 fc3d 	bl	8001dbc <HAL_GPIO_ReadPin>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d022      	beq.n	800058e <button_handler+0x112>
 8000548:	2140      	movs	r1, #64	@ 0x40
 800054a:	4842      	ldr	r0, [pc, #264]	@ (8000654 <button_handler+0x1d8>)
 800054c:	f001 fc36 	bl	8001dbc <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d11b      	bne.n	800058e <button_handler+0x112>
 8000556:	f000 fc0d 	bl	8000d74 <HAL_GetTick>
 800055a:	4602      	mov	r2, r0
 800055c:	4b3e      	ldr	r3, [pc, #248]	@ (8000658 <button_handler+0x1dc>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	1ad3      	subs	r3, r2, r3
 8000562:	2b96      	cmp	r3, #150	@ 0x96
 8000564:	d913      	bls.n	800058e <button_handler+0x112>
 8000566:	4b3d      	ldr	r3, [pc, #244]	@ (800065c <button_handler+0x1e0>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d10f      	bne.n	800058e <button_handler+0x112>
		  flag_btn3 = 1;
 800056e:	4b3b      	ldr	r3, [pc, #236]	@ (800065c <button_handler+0x1e0>)
 8000570:	2201      	movs	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
		  	  /* SEND CAN GEAR UP MSG HERE */
#if DEBUG == 1
		  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000574:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000578:	4836      	ldr	r0, [pc, #216]	@ (8000654 <button_handler+0x1d8>)
 800057a:	f001 fc4e 	bl	8001e1a <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 800057e:	2064      	movs	r0, #100	@ 0x64
 8000580:	f000 fc02 	bl	8000d88 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000584:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000588:	4832      	ldr	r0, [pc, #200]	@ (8000654 <button_handler+0x1d8>)
 800058a:	f001 fc46 	bl	8001e1a <HAL_GPIO_TogglePin>
#endif
	  	}
	  if (!HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin) && flag_btn3 == 1) {
 800058e:	2120      	movs	r1, #32
 8000590:	4830      	ldr	r0, [pc, #192]	@ (8000654 <button_handler+0x1d8>)
 8000592:	f001 fc13 	bl	8001dbc <HAL_GPIO_ReadPin>
 8000596:	4603      	mov	r3, r0
 8000598:	2b00      	cmp	r3, #0
 800059a:	d109      	bne.n	80005b0 <button_handler+0x134>
 800059c:	4b2f      	ldr	r3, [pc, #188]	@ (800065c <button_handler+0x1e0>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d105      	bne.n	80005b0 <button_handler+0x134>
	 		  flag_btn3 = 0;
 80005a4:	4b2d      	ldr	r3, [pc, #180]	@ (800065c <button_handler+0x1e0>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	701a      	strb	r2, [r3, #0]
	 		  HAL_Delay(100);
 80005aa:	2064      	movs	r0, #100	@ 0x64
 80005ac:	f000 fbec 	bl	8000d88 <HAL_Delay>
	 	}
	  /* GEAR DOWN BUTTON HANDLER */
	  if (HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && !HAL_GPIO_ReadPin(BTN_3_GPIO_Port, BTN_3_Pin)  && (HAL_GetTick() - time_ms > 150) && flag_btn4 == 0) {
 80005b0:	2140      	movs	r1, #64	@ 0x40
 80005b2:	4828      	ldr	r0, [pc, #160]	@ (8000654 <button_handler+0x1d8>)
 80005b4:	f001 fc02 	bl	8001dbc <HAL_GPIO_ReadPin>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d022      	beq.n	8000604 <button_handler+0x188>
 80005be:	2120      	movs	r1, #32
 80005c0:	4824      	ldr	r0, [pc, #144]	@ (8000654 <button_handler+0x1d8>)
 80005c2:	f001 fbfb 	bl	8001dbc <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d11b      	bne.n	8000604 <button_handler+0x188>
 80005cc:	f000 fbd2 	bl	8000d74 <HAL_GetTick>
 80005d0:	4602      	mov	r2, r0
 80005d2:	4b21      	ldr	r3, [pc, #132]	@ (8000658 <button_handler+0x1dc>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	1ad3      	subs	r3, r2, r3
 80005d8:	2b96      	cmp	r3, #150	@ 0x96
 80005da:	d913      	bls.n	8000604 <button_handler+0x188>
 80005dc:	4b20      	ldr	r3, [pc, #128]	@ (8000660 <button_handler+0x1e4>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d10f      	bne.n	8000604 <button_handler+0x188>
		  	  flag_btn4 = 1;
 80005e4:	4b1e      	ldr	r3, [pc, #120]	@ (8000660 <button_handler+0x1e4>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
		  	  /* SEND CAN GEAR DOWN MSG HERE */
#if DEBUG == 1
		      HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80005ea:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005ee:	4819      	ldr	r0, [pc, #100]	@ (8000654 <button_handler+0x1d8>)
 80005f0:	f001 fc13 	bl	8001e1a <HAL_GPIO_TogglePin>
		  	  HAL_Delay(100);
 80005f4:	2064      	movs	r0, #100	@ 0x64
 80005f6:	f000 fbc7 	bl	8000d88 <HAL_Delay>
		  	  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 80005fa:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80005fe:	4815      	ldr	r0, [pc, #84]	@ (8000654 <button_handler+0x1d8>)
 8000600:	f001 fc0b 	bl	8001e1a <HAL_GPIO_TogglePin>
#endif
	  	}
	  if (!HAL_GPIO_ReadPin(BTN_4_GPIO_Port, BTN_4_Pin) && flag_btn4 == 1) {
 8000604:	2140      	movs	r1, #64	@ 0x40
 8000606:	4813      	ldr	r0, [pc, #76]	@ (8000654 <button_handler+0x1d8>)
 8000608:	f001 fbd8 	bl	8001dbc <HAL_GPIO_ReadPin>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d109      	bne.n	8000626 <button_handler+0x1aa>
 8000612:	4b13      	ldr	r3, [pc, #76]	@ (8000660 <button_handler+0x1e4>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b01      	cmp	r3, #1
 8000618:	d105      	bne.n	8000626 <button_handler+0x1aa>
	 		  flag_btn4 = 0;
 800061a:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <button_handler+0x1e4>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
	 		  HAL_Delay(100);
 8000620:	2064      	movs	r0, #100	@ 0x64
 8000622:	f000 fbb1 	bl	8000d88 <HAL_Delay>
	 	}
	  /* ENGINE STARTUP BUTTON HANDLER */
	  if (HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) && (HAL_GetTick() - time_ms > 150) && flag_btn1 == 0) {
 8000626:	2108      	movs	r1, #8
 8000628:	480a      	ldr	r0, [pc, #40]	@ (8000654 <button_handler+0x1d8>)
 800062a:	f001 fbc7 	bl	8001dbc <HAL_GPIO_ReadPin>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d039      	beq.n	80006a8 <button_handler+0x22c>
 8000634:	f000 fb9e 	bl	8000d74 <HAL_GetTick>
 8000638:	4602      	mov	r2, r0
 800063a:	4b07      	ldr	r3, [pc, #28]	@ (8000658 <button_handler+0x1dc>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	1ad3      	subs	r3, r2, r3
 8000640:	2b96      	cmp	r3, #150	@ 0x96
 8000642:	d931      	bls.n	80006a8 <button_handler+0x22c>
 8000644:	4b07      	ldr	r3, [pc, #28]	@ (8000664 <button_handler+0x1e8>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d12d      	bne.n	80006a8 <button_handler+0x22c>
		  flag_btn1 = 1;
 800064c:	4b05      	ldr	r3, [pc, #20]	@ (8000664 <button_handler+0x1e8>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
		  while(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)){
 8000652:	e015      	b.n	8000680 <button_handler+0x204>
 8000654:	40010c00 	.word	0x40010c00
 8000658:	200000c8 	.word	0x200000c8
 800065c:	200000c2 	.word	0x200000c2
 8000660:	200000c3 	.word	0x200000c3
 8000664:	200000c0 	.word	0x200000c0
		  		  /* SEND CAN MSG ENGINE STARTUP HERE */
			  msg_type = 0;
 8000668:	4b5b      	ldr	r3, [pc, #364]	@ (80007d8 <button_handler+0x35c>)
 800066a:	2200      	movs	r2, #0
 800066c:	701a      	strb	r2, [r3, #0]
			  while(can_msg_handler(msg_type));
 800066e:	bf00      	nop
 8000670:	4b59      	ldr	r3, [pc, #356]	@ (80007d8 <button_handler+0x35c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f000 f8bf 	bl	80007f8 <can_msg_handler>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1f7      	bne.n	8000670 <button_handler+0x1f4>
		  while(HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin)){
 8000680:	2108      	movs	r1, #8
 8000682:	4856      	ldr	r0, [pc, #344]	@ (80007dc <button_handler+0x360>)
 8000684:	f001 fb9a 	bl	8001dbc <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1ec      	bne.n	8000668 <button_handler+0x1ec>
		  		  /* ENGINE STARTUP SWITCH IS NOT LATCHING ! */
		  }
#if DEBUG == 1
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800068e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000692:	4852      	ldr	r0, [pc, #328]	@ (80007dc <button_handler+0x360>)
 8000694:	f001 fbc1 	bl	8001e1a <HAL_GPIO_TogglePin>
		  HAL_Delay(100);
 8000698:	2064      	movs	r0, #100	@ 0x64
 800069a:	f000 fb75 	bl	8000d88 <HAL_Delay>
		  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800069e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80006a2:	484e      	ldr	r0, [pc, #312]	@ (80007dc <button_handler+0x360>)
 80006a4:	f001 fbb9 	bl	8001e1a <HAL_GPIO_TogglePin>
#endif
	  	}
	  if (!HAL_GPIO_ReadPin(BTN_1_GPIO_Port, BTN_1_Pin) && flag_btn1 == 1) {
 80006a8:	2108      	movs	r1, #8
 80006aa:	484c      	ldr	r0, [pc, #304]	@ (80007dc <button_handler+0x360>)
 80006ac:	f001 fb86 	bl	8001dbc <HAL_GPIO_ReadPin>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d109      	bne.n	80006ca <button_handler+0x24e>
 80006b6:	4b4a      	ldr	r3, [pc, #296]	@ (80007e0 <button_handler+0x364>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	2b01      	cmp	r3, #1
 80006bc:	d105      	bne.n	80006ca <button_handler+0x24e>
	 		  flag_btn1 = 0;
 80006be:	4b48      	ldr	r3, [pc, #288]	@ (80007e0 <button_handler+0x364>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	701a      	strb	r2, [r3, #0]
	 		  HAL_Delay(100);
 80006c4:	2064      	movs	r0, #100	@ 0x64
 80006c6:	f000 fb5f 	bl	8000d88 <HAL_Delay>
	 	}
	  /* ENGINE STOP BUTTON HANDLER */
	  if (HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) && (HAL_GetTick() - time_ms > 150) && flag_btn2 == 0) {
 80006ca:	2110      	movs	r1, #16
 80006cc:	4843      	ldr	r0, [pc, #268]	@ (80007dc <button_handler+0x360>)
 80006ce:	f001 fb75 	bl	8001dbc <HAL_GPIO_ReadPin>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d01b      	beq.n	8000710 <button_handler+0x294>
 80006d8:	f000 fb4c 	bl	8000d74 <HAL_GetTick>
 80006dc:	4602      	mov	r2, r0
 80006de:	4b41      	ldr	r3, [pc, #260]	@ (80007e4 <button_handler+0x368>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	2b96      	cmp	r3, #150	@ 0x96
 80006e6:	d913      	bls.n	8000710 <button_handler+0x294>
 80006e8:	4b3f      	ldr	r3, [pc, #252]	@ (80007e8 <button_handler+0x36c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d10f      	bne.n	8000710 <button_handler+0x294>
		  flag_btn2 = 1;
 80006f0:	4b3d      	ldr	r3, [pc, #244]	@ (80007e8 <button_handler+0x36c>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
		  	  /* SEND CAN STOP ENGINE MSG HERE */
#if DEBUG == 1
		  	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80006f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006fa:	4838      	ldr	r0, [pc, #224]	@ (80007dc <button_handler+0x360>)
 80006fc:	f001 fb8d 	bl	8001e1a <HAL_GPIO_TogglePin>
		  	  HAL_Delay(100);
 8000700:	2064      	movs	r0, #100	@ 0x64
 8000702:	f000 fb41 	bl	8000d88 <HAL_Delay>
		  	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000706:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800070a:	4834      	ldr	r0, [pc, #208]	@ (80007dc <button_handler+0x360>)
 800070c:	f001 fb85 	bl	8001e1a <HAL_GPIO_TogglePin>
#endif
	  	}
	  if (!HAL_GPIO_ReadPin(BTN_2_GPIO_Port, BTN_2_Pin) && flag_btn2 == 1) {
 8000710:	2110      	movs	r1, #16
 8000712:	4832      	ldr	r0, [pc, #200]	@ (80007dc <button_handler+0x360>)
 8000714:	f001 fb52 	bl	8001dbc <HAL_GPIO_ReadPin>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d109      	bne.n	8000732 <button_handler+0x2b6>
 800071e:	4b32      	ldr	r3, [pc, #200]	@ (80007e8 <button_handler+0x36c>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b01      	cmp	r3, #1
 8000724:	d105      	bne.n	8000732 <button_handler+0x2b6>
		  flag_btn2 = 0;
 8000726:	4b30      	ldr	r3, [pc, #192]	@ (80007e8 <button_handler+0x36c>)
 8000728:	2200      	movs	r2, #0
 800072a:	701a      	strb	r2, [r3, #0]
	 		  HAL_Delay(100);
 800072c:	2064      	movs	r0, #100	@ 0x64
 800072e:	f000 fb2b 	bl	8000d88 <HAL_Delay>
	 	}
	  /* NEXT SCREEN BUTTON HANDLER */
	  if (HAL_GPIO_ReadPin(BTN_5_GPIO_Port, BTN_5_Pin) && (HAL_GetTick() - time_ms > 150) && flag_btn5 == 0) {
 8000732:	2180      	movs	r1, #128	@ 0x80
 8000734:	4829      	ldr	r0, [pc, #164]	@ (80007dc <button_handler+0x360>)
 8000736:	f001 fb41 	bl	8001dbc <HAL_GPIO_ReadPin>
 800073a:	4603      	mov	r3, r0
 800073c:	2b00      	cmp	r3, #0
 800073e:	d011      	beq.n	8000764 <button_handler+0x2e8>
 8000740:	f000 fb18 	bl	8000d74 <HAL_GetTick>
 8000744:	4602      	mov	r2, r0
 8000746:	4b27      	ldr	r3, [pc, #156]	@ (80007e4 <button_handler+0x368>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	2b96      	cmp	r3, #150	@ 0x96
 800074e:	d909      	bls.n	8000764 <button_handler+0x2e8>
 8000750:	4b26      	ldr	r3, [pc, #152]	@ (80007ec <button_handler+0x370>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d105      	bne.n	8000764 <button_handler+0x2e8>
		  	  flag_btn5 = 1;
 8000758:	4b24      	ldr	r3, [pc, #144]	@ (80007ec <button_handler+0x370>)
 800075a:	2201      	movs	r2, #1
 800075c:	701a      	strb	r2, [r3, #0]
		  	  /* SEND USART NEXT SCREEN MSG HERE */

		  	  HAL_Delay(100);
 800075e:	2064      	movs	r0, #100	@ 0x64
 8000760:	f000 fb12 	bl	8000d88 <HAL_Delay>
	  	}
	  if (!HAL_GPIO_ReadPin(BTN_5_GPIO_Port, BTN_5_Pin) && flag_btn5 == 1) {
 8000764:	2180      	movs	r1, #128	@ 0x80
 8000766:	481d      	ldr	r0, [pc, #116]	@ (80007dc <button_handler+0x360>)
 8000768:	f001 fb28 	bl	8001dbc <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d106      	bne.n	8000780 <button_handler+0x304>
 8000772:	4b1e      	ldr	r3, [pc, #120]	@ (80007ec <button_handler+0x370>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b01      	cmp	r3, #1
 8000778:	d102      	bne.n	8000780 <button_handler+0x304>
	 		  flag_btn5 = 0;
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <button_handler+0x370>)
 800077c:	2200      	movs	r2, #0
 800077e:	701a      	strb	r2, [r3, #0]
	 		  //HAL_Delay(100);
	 	}
	  /* PREVIOUS SCREEN BUTTON HANDLER */
	  if (HAL_GPIO_ReadPin(BTN_6_GPIO_Port, BTN_6_Pin) && (HAL_GetTick() - time_ms > 150) && flag_btn6 == 0) {
 8000780:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000784:	481a      	ldr	r0, [pc, #104]	@ (80007f0 <button_handler+0x374>)
 8000786:	f001 fb19 	bl	8001dbc <HAL_GPIO_ReadPin>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d011      	beq.n	80007b4 <button_handler+0x338>
 8000790:	f000 faf0 	bl	8000d74 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	4b13      	ldr	r3, [pc, #76]	@ (80007e4 <button_handler+0x368>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	1ad3      	subs	r3, r2, r3
 800079c:	2b96      	cmp	r3, #150	@ 0x96
 800079e:	d909      	bls.n	80007b4 <button_handler+0x338>
 80007a0:	4b14      	ldr	r3, [pc, #80]	@ (80007f4 <button_handler+0x378>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d105      	bne.n	80007b4 <button_handler+0x338>
		  	  flag_btn6 = 1;
 80007a8:	4b12      	ldr	r3, [pc, #72]	@ (80007f4 <button_handler+0x378>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	701a      	strb	r2, [r3, #0]
		  	  /* SEND USART PREVIOUS SCREEN MSG HERE */

		  	  HAL_Delay(100);
 80007ae:	2064      	movs	r0, #100	@ 0x64
 80007b0:	f000 faea 	bl	8000d88 <HAL_Delay>
	  	}
	  if (!HAL_GPIO_ReadPin(BTN_6_GPIO_Port, BTN_6_Pin) && flag_btn6 == 1) {
 80007b4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007b8:	480d      	ldr	r0, [pc, #52]	@ (80007f0 <button_handler+0x374>)
 80007ba:	f001 faff 	bl	8001dbc <HAL_GPIO_ReadPin>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d106      	bne.n	80007d2 <button_handler+0x356>
 80007c4:	4b0b      	ldr	r3, [pc, #44]	@ (80007f4 <button_handler+0x378>)
 80007c6:	781b      	ldrb	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d102      	bne.n	80007d2 <button_handler+0x356>
	 		  flag_btn6 = 0;
 80007cc:	4b09      	ldr	r3, [pc, #36]	@ (80007f4 <button_handler+0x378>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
	 		  //HAL_Delay(100);
	 	}

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000000 	.word	0x20000000
 80007dc:	40010c00 	.word	0x40010c00
 80007e0:	200000c0 	.word	0x200000c0
 80007e4:	200000c8 	.word	0x200000c8
 80007e8:	200000c1 	.word	0x200000c1
 80007ec:	200000c4 	.word	0x200000c4
 80007f0:	40010800 	.word	0x40010800
 80007f4:	200000c5 	.word	0x200000c5

080007f8 <can_msg_handler>:
int can_msg_handler(uint8_t typemsg){
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	71fb      	strb	r3, [r7, #7]
	switch (typemsg) {
 8000802:	79fb      	ldrb	r3, [r7, #7]
 8000804:	2b04      	cmp	r3, #4
 8000806:	f200 808a 	bhi.w	800091e <can_msg_handler+0x126>
 800080a:	a201      	add	r2, pc, #4	@ (adr r2, 8000810 <can_msg_handler+0x18>)
 800080c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000810:	08000825 	.word	0x08000825
 8000814:	08000857 	.word	0x08000857
 8000818:	08000889 	.word	0x08000889
 800081c:	080008bb 	.word	0x080008bb
 8000820:	080008ed 	.word	0x080008ed
		case 0:
	/* MSG START ENGINE */
	TxHeader.StdId = 0x642;
 8000824:	4b41      	ldr	r3, [pc, #260]	@ (800092c <can_msg_handler+0x134>)
 8000826:	f240 6242 	movw	r2, #1602	@ 0x642
 800082a:	601a      	str	r2, [r3, #0]
	TxData[4] = 0b00000001; //using binary system to make bit set more clear
 800082c:	4b40      	ldr	r3, [pc, #256]	@ (8000930 <can_msg_handler+0x138>)
 800082e:	2201      	movs	r2, #1
 8000830:	711a      	strb	r2, [r3, #4]
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0); //CAN SW#0
 8000832:	bf00      	nop
 8000834:	483f      	ldr	r0, [pc, #252]	@ (8000934 <can_msg_handler+0x13c>)
 8000836:	f000 fda2 	bl	800137e <HAL_CAN_GetTxMailboxesFreeLevel>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d0f9      	beq.n	8000834 <can_msg_handler+0x3c>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, TxMailbox);
 8000840:	4b3d      	ldr	r3, [pc, #244]	@ (8000938 <can_msg_handler+0x140>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	4a3a      	ldr	r2, [pc, #232]	@ (8000930 <can_msg_handler+0x138>)
 8000846:	4939      	ldr	r1, [pc, #228]	@ (800092c <can_msg_handler+0x134>)
 8000848:	483a      	ldr	r0, [pc, #232]	@ (8000934 <can_msg_handler+0x13c>)
 800084a:	f000 fcc9 	bl	80011e0 <HAL_CAN_AddTxMessage>
	TxData[4] = 0x00;
 800084e:	4b38      	ldr	r3, [pc, #224]	@ (8000930 <can_msg_handler+0x138>)
 8000850:	2200      	movs	r2, #0
 8000852:	711a      	strb	r2, [r3, #4]
			break;
 8000854:	e064      	b.n	8000920 <can_msg_handler+0x128>
		case 1:
	/* MSG STOP ENGINE */
	TxHeader.StdId = 0x642;
 8000856:	4b35      	ldr	r3, [pc, #212]	@ (800092c <can_msg_handler+0x134>)
 8000858:	f240 6242 	movw	r2, #1602	@ 0x642
 800085c:	601a      	str	r2, [r3, #0]
	TxData[4] = 0b00000010; //CAN SW#1
 800085e:	4b34      	ldr	r3, [pc, #208]	@ (8000930 <can_msg_handler+0x138>)
 8000860:	2202      	movs	r2, #2
 8000862:	711a      	strb	r2, [r3, #4]
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 8000864:	bf00      	nop
 8000866:	4833      	ldr	r0, [pc, #204]	@ (8000934 <can_msg_handler+0x13c>)
 8000868:	f000 fd89 	bl	800137e <HAL_CAN_GetTxMailboxesFreeLevel>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d0f9      	beq.n	8000866 <can_msg_handler+0x6e>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, TxMailbox);
 8000872:	4b31      	ldr	r3, [pc, #196]	@ (8000938 <can_msg_handler+0x140>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a2e      	ldr	r2, [pc, #184]	@ (8000930 <can_msg_handler+0x138>)
 8000878:	492c      	ldr	r1, [pc, #176]	@ (800092c <can_msg_handler+0x134>)
 800087a:	482e      	ldr	r0, [pc, #184]	@ (8000934 <can_msg_handler+0x13c>)
 800087c:	f000 fcb0 	bl	80011e0 <HAL_CAN_AddTxMessage>
	TxData[4] = 0x00;
 8000880:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <can_msg_handler+0x138>)
 8000882:	2200      	movs	r2, #0
 8000884:	711a      	strb	r2, [r3, #4]
			break;
 8000886:	e04b      	b.n	8000920 <can_msg_handler+0x128>
		case 2:
	/* MSG GEAR UP */
	TxHeader.StdId = 0x642;
 8000888:	4b28      	ldr	r3, [pc, #160]	@ (800092c <can_msg_handler+0x134>)
 800088a:	f240 6242 	movw	r2, #1602	@ 0x642
 800088e:	601a      	str	r2, [r3, #0]
	TxData[4] = 0b00000100; //CAN SW#2
 8000890:	4b27      	ldr	r3, [pc, #156]	@ (8000930 <can_msg_handler+0x138>)
 8000892:	2204      	movs	r2, #4
 8000894:	711a      	strb	r2, [r3, #4]
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 8000896:	bf00      	nop
 8000898:	4826      	ldr	r0, [pc, #152]	@ (8000934 <can_msg_handler+0x13c>)
 800089a:	f000 fd70 	bl	800137e <HAL_CAN_GetTxMailboxesFreeLevel>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d0f9      	beq.n	8000898 <can_msg_handler+0xa0>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, TxMailbox);
 80008a4:	4b24      	ldr	r3, [pc, #144]	@ (8000938 <can_msg_handler+0x140>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a21      	ldr	r2, [pc, #132]	@ (8000930 <can_msg_handler+0x138>)
 80008aa:	4920      	ldr	r1, [pc, #128]	@ (800092c <can_msg_handler+0x134>)
 80008ac:	4821      	ldr	r0, [pc, #132]	@ (8000934 <can_msg_handler+0x13c>)
 80008ae:	f000 fc97 	bl	80011e0 <HAL_CAN_AddTxMessage>
	TxData[4] = 0x00;
 80008b2:	4b1f      	ldr	r3, [pc, #124]	@ (8000930 <can_msg_handler+0x138>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	711a      	strb	r2, [r3, #4]
			break;
 80008b8:	e032      	b.n	8000920 <can_msg_handler+0x128>
		case 3:
	/* MSG GEAR DOWN */
	TxHeader.StdId = 0x642;
 80008ba:	4b1c      	ldr	r3, [pc, #112]	@ (800092c <can_msg_handler+0x134>)
 80008bc:	f240 6242 	movw	r2, #1602	@ 0x642
 80008c0:	601a      	str	r2, [r3, #0]
	TxData[4] = 0b00001000; //CAN SW #3
 80008c2:	4b1b      	ldr	r3, [pc, #108]	@ (8000930 <can_msg_handler+0x138>)
 80008c4:	2208      	movs	r2, #8
 80008c6:	711a      	strb	r2, [r3, #4]
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 80008c8:	bf00      	nop
 80008ca:	481a      	ldr	r0, [pc, #104]	@ (8000934 <can_msg_handler+0x13c>)
 80008cc:	f000 fd57 	bl	800137e <HAL_CAN_GetTxMailboxesFreeLevel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d0f9      	beq.n	80008ca <can_msg_handler+0xd2>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, TxMailbox);
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <can_msg_handler+0x140>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a15      	ldr	r2, [pc, #84]	@ (8000930 <can_msg_handler+0x138>)
 80008dc:	4913      	ldr	r1, [pc, #76]	@ (800092c <can_msg_handler+0x134>)
 80008de:	4815      	ldr	r0, [pc, #84]	@ (8000934 <can_msg_handler+0x13c>)
 80008e0:	f000 fc7e 	bl	80011e0 <HAL_CAN_AddTxMessage>
	TxData[4] = 0x00;
 80008e4:	4b12      	ldr	r3, [pc, #72]	@ (8000930 <can_msg_handler+0x138>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	711a      	strb	r2, [r3, #4]
			break;
 80008ea:	e019      	b.n	8000920 <can_msg_handler+0x128>
		case 4:
	/* MSG GEAR NEUTRAL */
	TxHeader.StdId = 0x642;
 80008ec:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <can_msg_handler+0x134>)
 80008ee:	f240 6242 	movw	r2, #1602	@ 0x642
 80008f2:	601a      	str	r2, [r3, #0]
	TxData[4] = 0b00010000; //CAN SW#4
 80008f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000930 <can_msg_handler+0x138>)
 80008f6:	2210      	movs	r2, #16
 80008f8:	711a      	strb	r2, [r3, #4]
	while(HAL_CAN_GetTxMailboxesFreeLevel(&hcan) == 0);
 80008fa:	bf00      	nop
 80008fc:	480d      	ldr	r0, [pc, #52]	@ (8000934 <can_msg_handler+0x13c>)
 80008fe:	f000 fd3e 	bl	800137e <HAL_CAN_GetTxMailboxesFreeLevel>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d0f9      	beq.n	80008fc <can_msg_handler+0x104>
	HAL_CAN_AddTxMessage(&hcan, &TxHeader, TxData, TxMailbox);
 8000908:	4b0b      	ldr	r3, [pc, #44]	@ (8000938 <can_msg_handler+0x140>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a08      	ldr	r2, [pc, #32]	@ (8000930 <can_msg_handler+0x138>)
 800090e:	4907      	ldr	r1, [pc, #28]	@ (800092c <can_msg_handler+0x134>)
 8000910:	4808      	ldr	r0, [pc, #32]	@ (8000934 <can_msg_handler+0x13c>)
 8000912:	f000 fc65 	bl	80011e0 <HAL_CAN_AddTxMessage>
	TxData[4] = 0x00;
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <can_msg_handler+0x138>)
 8000918:	2200      	movs	r2, #0
 800091a:	711a      	strb	r2, [r3, #4]
			break;
 800091c:	e000      	b.n	8000920 <can_msg_handler+0x128>
		default:
	/* MSG NONE */
			break;
 800091e:	bf00      	nop
		msg_type = 255; // SET NONE TYPE MSG
		return 0; // return OK value to prevent endless loop
	}
}
 8000920:	bf00      	nop
 8000922:	4618      	mov	r0, r3
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000009c 	.word	0x2000009c
 8000930:	200000b4 	.word	0x200000b4
 8000934:	2000002c 	.word	0x2000002c
 8000938:	200000bc 	.word	0x200000bc

0800093c <startup>:
//TODO: define nextion_msg_handler() function
void startup(){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	 HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000946:	4823      	ldr	r0, [pc, #140]	@ (80009d4 <startup+0x98>)
 8000948:	f001 fa4f 	bl	8001dea <HAL_GPIO_WritePin>
	  TxHeader.StdId = 0x642;
 800094c:	4b22      	ldr	r3, [pc, #136]	@ (80009d8 <startup+0x9c>)
 800094e:	f240 6242 	movw	r2, #1602	@ 0x642
 8000952:	601a      	str	r2, [r3, #0]
	  TxHeader.ExtId = 0;
 8000954:	4b20      	ldr	r3, [pc, #128]	@ (80009d8 <startup+0x9c>)
 8000956:	2200      	movs	r2, #0
 8000958:	605a      	str	r2, [r3, #4]
	  TxHeader.RTR = CAN_RTR_DATA; // CAN_RTR_REMOTE
 800095a:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <startup+0x9c>)
 800095c:	2200      	movs	r2, #0
 800095e:	60da      	str	r2, [r3, #12]
	  TxHeader.IDE = CAN_ID_STD;   // USE STANDART ID
 8000960:	4b1d      	ldr	r3, [pc, #116]	@ (80009d8 <startup+0x9c>)
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
	  TxHeader.DLC = 8;
 8000966:	4b1c      	ldr	r3, [pc, #112]	@ (80009d8 <startup+0x9c>)
 8000968:	2208      	movs	r2, #8
 800096a:	611a      	str	r2, [r3, #16]
	  TxHeader.TransmitGlobalTime = 0;
 800096c:	4b1a      	ldr	r3, [pc, #104]	@ (80009d8 <startup+0x9c>)
 800096e:	2200      	movs	r2, #0
 8000970:	751a      	strb	r2, [r3, #20]
	  while(HAL_CAN_Start(&hcan) == HAL_ERROR);
 8000972:	bf00      	nop
 8000974:	4819      	ldr	r0, [pc, #100]	@ (80009dc <startup+0xa0>)
 8000976:	f000 fbef 	bl	8001158 <HAL_CAN_Start>
 800097a:	4603      	mov	r3, r0
 800097c:	2b01      	cmp	r3, #1
 800097e:	d0f9      	beq.n	8000974 <startup+0x38>
	  /* SOME LED BLINK FOR SUCCESSFUL STARTUP*/
	  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000980:	2102      	movs	r1, #2
 8000982:	4816      	ldr	r0, [pc, #88]	@ (80009dc <startup+0xa0>)
 8000984:	f000 fd2f 	bl	80013e6 <HAL_CAN_ActivateNotification>
	  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, 1);
 8000988:	2201      	movs	r2, #1
 800098a:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800098e:	4814      	ldr	r0, [pc, #80]	@ (80009e0 <startup+0xa4>)
 8000990:	f001 fa2b 	bl	8001dea <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8000994:	20c8      	movs	r0, #200	@ 0xc8
 8000996:	f000 f9f7 	bl	8000d88 <HAL_Delay>
	  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 800099a:	2201      	movs	r2, #1
 800099c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009a0:	480c      	ldr	r0, [pc, #48]	@ (80009d4 <startup+0x98>)
 80009a2:	f001 fa22 	bl	8001dea <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80009ac:	480c      	ldr	r0, [pc, #48]	@ (80009e0 <startup+0xa4>)
 80009ae:	f001 fa1c 	bl	8001dea <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80009b2:	20c8      	movs	r0, #200	@ 0xc8
 80009b4:	f000 f9e8 	bl	8000d88 <HAL_Delay>
	  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 0);
 80009b8:	2200      	movs	r2, #0
 80009ba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009be:	4805      	ldr	r0, [pc, #20]	@ (80009d4 <startup+0x98>)
 80009c0:	f001 fa13 	bl	8001dea <HAL_GPIO_WritePin>
	  time_ms = HAL_GetTick();
 80009c4:	f000 f9d6 	bl	8000d74 <HAL_GetTick>
 80009c8:	4603      	mov	r3, r0
 80009ca:	4a06      	ldr	r2, [pc, #24]	@ (80009e4 <startup+0xa8>)
 80009cc:	6013      	str	r3, [r2, #0]
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	bf00      	nop
 80009d4:	40011000 	.word	0x40011000
 80009d8:	2000009c 	.word	0x2000009c
 80009dc:	2000002c 	.word	0x2000002c
 80009e0:	40010c00 	.word	0x40010c00
 80009e4:	200000c8 	.word	0x200000c8

080009e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ec:	b672      	cpsid	i
}
 80009ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009f6:	4805      	ldr	r0, [pc, #20]	@ (8000a0c <Error_Handler+0x24>)
 80009f8:	f001 f9f7 	bl	8001dea <HAL_GPIO_WritePin>
	  HAL_Delay(5000);
 80009fc:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000a00:	f000 f9c2 	bl	8000d88 <HAL_Delay>
	  HAL_NVIC_SystemReset();
 8000a04:	f001 f845 	bl	8001a92 <HAL_NVIC_SystemReset>
	  HAL_GPIO_WritePin(CAN_LED_GPIO_Port, CAN_LED_Pin, 1);
 8000a08:	bf00      	nop
 8000a0a:	e7f1      	b.n	80009f0 <Error_Handler+0x8>
 8000a0c:	40011000 	.word	0x40011000

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b12      	ldr	r3, [pc, #72]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60bb      	str	r3, [r7, #8]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a0e      	ldr	r2, [pc, #56]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000a6c <HAL_MspInit+0x5c>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a46:	4b0a      	ldr	r3, [pc, #40]	@ (8000a70 <HAL_MspInit+0x60>)
 8000a48:	685b      	ldr	r3, [r3, #4]
 8000a4a:	60fb      	str	r3, [r7, #12]
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000a52:	60fb      	str	r3, [r7, #12]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <HAL_MspInit+0x60>)
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	40010000 	.word	0x40010000

08000a74 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08a      	sub	sp, #40	@ 0x28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8000b44 <HAL_CAN_MspInit+0xd0>)
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d153      	bne.n	8000b3c <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000a94:	4b2c      	ldr	r3, [pc, #176]	@ (8000b48 <HAL_CAN_MspInit+0xd4>)
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	4a2b      	ldr	r2, [pc, #172]	@ (8000b48 <HAL_CAN_MspInit+0xd4>)
 8000a9a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a9e:	61d3      	str	r3, [r2, #28]
 8000aa0:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <HAL_CAN_MspInit+0xd4>)
 8000aa2:	69db      	ldr	r3, [r3, #28]
 8000aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000aa8:	613b      	str	r3, [r7, #16]
 8000aaa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aac:	4b26      	ldr	r3, [pc, #152]	@ (8000b48 <HAL_CAN_MspInit+0xd4>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	4a25      	ldr	r2, [pc, #148]	@ (8000b48 <HAL_CAN_MspInit+0xd4>)
 8000ab2:	f043 0308 	orr.w	r3, r3, #8
 8000ab6:	6193      	str	r3, [r2, #24]
 8000ab8:	4b23      	ldr	r3, [pc, #140]	@ (8000b48 <HAL_CAN_MspInit+0xd4>)
 8000aba:	699b      	ldr	r3, [r3, #24]
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
    /**CAN GPIO Configuration
    PB8     ------> CAN_RX
    PB9     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ac4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ac8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000aca:	2300      	movs	r3, #0
 8000acc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	481c      	ldr	r0, [pc, #112]	@ (8000b4c <HAL_CAN_MspInit+0xd8>)
 8000ada:	f000 ffeb 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ade:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ae2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aec:	f107 0314 	add.w	r3, r7, #20
 8000af0:	4619      	mov	r1, r3
 8000af2:	4816      	ldr	r0, [pc, #88]	@ (8000b4c <HAL_CAN_MspInit+0xd8>)
 8000af4:	f000 ffde 	bl	8001ab4 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_CAN1_2();
 8000af8:	4b15      	ldr	r3, [pc, #84]	@ (8000b50 <HAL_CAN_MspInit+0xdc>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	627b      	str	r3, [r7, #36]	@ 0x24
 8000afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b00:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 8000b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b08:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b16:	4a0e      	ldr	r2, [pc, #56]	@ (8000b50 <HAL_CAN_MspInit+0xdc>)
 8000b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b1a:	6053      	str	r3, [r2, #4]

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 1, 0);
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	2101      	movs	r1, #1
 8000b20:	2014      	movs	r0, #20
 8000b22:	f000 ff8c 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8000b26:	2014      	movs	r0, #20
 8000b28:	f000 ffa5 	bl	8001a76 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 2, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2102      	movs	r1, #2
 8000b30:	2015      	movs	r0, #21
 8000b32:	f000 ff84 	bl	8001a3e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000b36:	2015      	movs	r0, #21
 8000b38:	f000 ff9d 	bl	8001a76 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8000b3c:	bf00      	nop
 8000b3e:	3728      	adds	r7, #40	@ 0x28
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40006400 	.word	0x40006400
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010c00 	.word	0x40010c00
 8000b50:	40010000 	.word	0x40010000

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b088      	sub	sp, #32
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0310 	add.w	r3, r7, #16
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a1c      	ldr	r2, [pc, #112]	@ (8000be0 <HAL_UART_MspInit+0x8c>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d131      	bne.n	8000bd8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000b74:	4b1b      	ldr	r3, [pc, #108]	@ (8000be4 <HAL_UART_MspInit+0x90>)
 8000b76:	699b      	ldr	r3, [r3, #24]
 8000b78:	4a1a      	ldr	r2, [pc, #104]	@ (8000be4 <HAL_UART_MspInit+0x90>)
 8000b7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b7e:	6193      	str	r3, [r2, #24]
 8000b80:	4b18      	ldr	r3, [pc, #96]	@ (8000be4 <HAL_UART_MspInit+0x90>)
 8000b82:	699b      	ldr	r3, [r3, #24]
 8000b84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b88:	60fb      	str	r3, [r7, #12]
 8000b8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b15      	ldr	r3, [pc, #84]	@ (8000be4 <HAL_UART_MspInit+0x90>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a14      	ldr	r2, [pc, #80]	@ (8000be4 <HAL_UART_MspInit+0x90>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b12      	ldr	r3, [pc, #72]	@ (8000be4 <HAL_UART_MspInit+0x90>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ba4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000baa:	2302      	movs	r3, #2
 8000bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bae:	2303      	movs	r3, #3
 8000bb0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0310 	add.w	r3, r7, #16
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	480b      	ldr	r0, [pc, #44]	@ (8000be8 <HAL_UART_MspInit+0x94>)
 8000bba:	f000 ff7b 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4805      	ldr	r0, [pc, #20]	@ (8000be8 <HAL_UART_MspInit+0x94>)
 8000bd4:	f000 ff6e 	bl	8001ab4 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40013800 	.word	0x40013800
 8000be4:	40021000 	.word	0x40021000
 8000be8:	40010800 	.word	0x40010800

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <MemManage_Handler+0x4>

08000c04 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr

08000c20 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c24:	bf00      	nop
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f888 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c48:	4802      	ldr	r0, [pc, #8]	@ (8000c54 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c4a:	f000 fbf1 	bl	8001430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000002c 	.word	0x2000002c

08000c58 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000c5c:	4802      	ldr	r0, [pc, #8]	@ (8000c68 <CAN1_RX1_IRQHandler+0x10>)
 8000c5e:	f000 fbe7 	bl	8001430 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	2000002c 	.word	0x2000002c

08000c6c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c78:	f7ff fff8 	bl	8000c6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480b      	ldr	r0, [pc, #44]	@ (8000cac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c7e:	490c      	ldr	r1, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c80:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c94:	4c09      	ldr	r4, [pc, #36]	@ (8000cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f001 fdc9 	bl	8002838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca6:	f7ff fa64 	bl	8000172 <main>
  bx lr
 8000caa:	4770      	bx	lr
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000cb4:	080028cc 	.word	0x080028cc
  ldr r2, =_sbss
 8000cb8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000cbc:	200000d0 	.word	0x200000d0

08000cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_2_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <HAL_Init+0x28>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <HAL_Init+0x28>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 fea7 	bl	8001a28 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f000 f808 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff fe96 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_InitTick+0x54>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_InitTick+0x58>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 fec3 	bl	8001a9a <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00e      	b.n	8000d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d80a      	bhi.n	8000d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 fe87 	bl	8001a3e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4a06      	ldr	r2, [pc, #24]	@ (8000d4c <HAL_InitTick+0x5c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000004 	.word	0x20000004
 8000d48:	2000000c 	.word	0x2000000c
 8000d4c:	20000008 	.word	0x20000008

08000d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_IncTick+0x1c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a03      	ldr	r2, [pc, #12]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	2000000c 	.word	0x2000000c
 8000d70:	200000cc 	.word	0x200000cc

08000d74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b02      	ldr	r3, [pc, #8]	@ (8000d84 <HAL_GetTick+0x10>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	200000cc 	.word	0x200000cc

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff fff0 	bl	8000d74 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dae:	bf00      	nop
 8000db0:	f7ff ffe0 	bl	8000d74 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000000c 	.word	0x2000000c

08000dd0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d101      	bne.n	8000de2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000dde:	2301      	movs	r3, #1
 8000de0:	e0ed      	b.n	8000fbe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d102      	bne.n	8000df4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff fe40 	bl	8000a74 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	681a      	ldr	r2, [r3, #0]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0201 	orr.w	r2, r2, #1
 8000e02:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e04:	f7ff ffb6 	bl	8000d74 <HAL_GetTick>
 8000e08:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e0a:	e012      	b.n	8000e32 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e0c:	f7ff ffb2 	bl	8000d74 <HAL_GetTick>
 8000e10:	4602      	mov	r2, r0
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	1ad3      	subs	r3, r2, r3
 8000e16:	2b0a      	cmp	r3, #10
 8000e18:	d90b      	bls.n	8000e32 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e1e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	2205      	movs	r2, #5
 8000e2a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e0c5      	b.n	8000fbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 0301 	and.w	r3, r3, #1
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d0e5      	beq.n	8000e0c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f022 0202 	bic.w	r2, r2, #2
 8000e4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e50:	f7ff ff90 	bl	8000d74 <HAL_GetTick>
 8000e54:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e56:	e012      	b.n	8000e7e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000e58:	f7ff ff8c 	bl	8000d74 <HAL_GetTick>
 8000e5c:	4602      	mov	r2, r0
 8000e5e:	68fb      	ldr	r3, [r7, #12]
 8000e60:	1ad3      	subs	r3, r2, r3
 8000e62:	2b0a      	cmp	r3, #10
 8000e64:	d90b      	bls.n	8000e7e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e6a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2205      	movs	r2, #5
 8000e76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e09f      	b.n	8000fbe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0302 	and.w	r3, r3, #2
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d1e5      	bne.n	8000e58 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	7e1b      	ldrb	r3, [r3, #24]
 8000e90:	2b01      	cmp	r3, #1
 8000e92:	d108      	bne.n	8000ea6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8000ea2:	601a      	str	r2, [r3, #0]
 8000ea4:	e007      	b.n	8000eb6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000eb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	7e5b      	ldrb	r3, [r3, #25]
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d108      	bne.n	8000ed0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8000ecc:	601a      	str	r2, [r3, #0]
 8000ece:	e007      	b.n	8000ee0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8000ede:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	7e9b      	ldrb	r3, [r3, #26]
 8000ee4:	2b01      	cmp	r3, #1
 8000ee6:	d108      	bne.n	8000efa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f042 0220 	orr.w	r2, r2, #32
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	e007      	b.n	8000f0a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681a      	ldr	r2, [r3, #0]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	f022 0220 	bic.w	r2, r2, #32
 8000f08:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	7edb      	ldrb	r3, [r3, #27]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d108      	bne.n	8000f24 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f022 0210 	bic.w	r2, r2, #16
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	e007      	b.n	8000f34 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f042 0210 	orr.w	r2, r2, #16
 8000f32:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	7f1b      	ldrb	r3, [r3, #28]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d108      	bne.n	8000f4e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	f042 0208 	orr.w	r2, r2, #8
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	e007      	b.n	8000f5e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	681a      	ldr	r2, [r3, #0]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f022 0208 	bic.w	r2, r2, #8
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	7f5b      	ldrb	r3, [r3, #29]
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d108      	bne.n	8000f78 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0204 	orr.w	r2, r2, #4
 8000f74:	601a      	str	r2, [r3, #0]
 8000f76:	e007      	b.n	8000f88 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f022 0204 	bic.w	r2, r2, #4
 8000f86:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	431a      	orrs	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	691b      	ldr	r3, [r3, #16]
 8000f96:	431a      	orrs	r2, r3
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	ea42 0103 	orr.w	r1, r2, r3
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	1e5a      	subs	r2, r3, #1
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}

08000fc6 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8000fc6:	b480      	push	{r7}
 8000fc8:	b087      	sub	sp, #28
 8000fca:	af00      	add	r7, sp, #0
 8000fcc:	6078      	str	r0, [r7, #4]
 8000fce:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fdc:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000fde:	7cfb      	ldrb	r3, [r7, #19]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d003      	beq.n	8000fec <HAL_CAN_ConfigFilter+0x26>
 8000fe4:	7cfb      	ldrb	r3, [r7, #19]
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	f040 80aa 	bne.w	8001140 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	f003 031f 	and.w	r3, r3, #31
 8001004:	2201      	movs	r2, #1
 8001006:	fa02 f303 	lsl.w	r3, r2, r3
 800100a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001012:	68fb      	ldr	r3, [r7, #12]
 8001014:	43db      	mvns	r3, r3
 8001016:	401a      	ands	r2, r3
 8001018:	697b      	ldr	r3, [r7, #20]
 800101a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	69db      	ldr	r3, [r3, #28]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d123      	bne.n	800106e <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	43db      	mvns	r3, r3
 8001030:	401a      	ands	r2, r3
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001048:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	3248      	adds	r2, #72	@ 0x48
 800104e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001062:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001064:	6979      	ldr	r1, [r7, #20]
 8001066:	3348      	adds	r3, #72	@ 0x48
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	440b      	add	r3, r1
 800106c:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	69db      	ldr	r3, [r3, #28]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d122      	bne.n	80010bc <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	431a      	orrs	r2, r3
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001092:	683a      	ldr	r2, [r7, #0]
 8001094:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001096:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	3248      	adds	r2, #72	@ 0x48
 800109c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80010b0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80010b2:	6979      	ldr	r1, [r7, #20]
 80010b4:	3348      	adds	r3, #72	@ 0x48
 80010b6:	00db      	lsls	r3, r3, #3
 80010b8:	440b      	add	r3, r1
 80010ba:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d109      	bne.n	80010d8 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	401a      	ands	r2, r3
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80010d6:	e007      	b.n	80010e8 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	431a      	orrs	r2, r3
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	691b      	ldr	r3, [r3, #16]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001102:	e007      	b.n	8001114 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	431a      	orrs	r2, r3
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	6a1b      	ldr	r3, [r3, #32]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d107      	bne.n	800112c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	431a      	orrs	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001132:	f023 0201 	bic.w	r2, r3, #1
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	e006      	b.n	800114e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001144:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800114c:	2301      	movs	r3, #1
  }
}
 800114e:	4618      	mov	r0, r3
 8001150:	371c      	adds	r7, #28
 8001152:	46bd      	mov	sp, r7
 8001154:	bc80      	pop	{r7}
 8001156:	4770      	bx	lr

08001158 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b01      	cmp	r3, #1
 800116a:	d12e      	bne.n	80011ca <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2202      	movs	r2, #2
 8001170:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f022 0201 	bic.w	r2, r2, #1
 8001182:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001184:	f7ff fdf6 	bl	8000d74 <HAL_GetTick>
 8001188:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800118a:	e012      	b.n	80011b2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800118c:	f7ff fdf2 	bl	8000d74 <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	2b0a      	cmp	r3, #10
 8001198:	d90b      	bls.n	80011b2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	2205      	movs	r2, #5
 80011aa:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e012      	b.n	80011d8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1e5      	bne.n	800118c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80011c6:	2300      	movs	r3, #0
 80011c8:	e006      	b.n	80011d8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ce:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
  }
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3710      	adds	r7, #16
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011f4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80011fe:	7ffb      	ldrb	r3, [r7, #31]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d003      	beq.n	800120c <HAL_CAN_AddTxMessage+0x2c>
 8001204:	7ffb      	ldrb	r3, [r7, #31]
 8001206:	2b02      	cmp	r3, #2
 8001208:	f040 80ad 	bne.w	8001366 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800120c:	69bb      	ldr	r3, [r7, #24]
 800120e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001212:	2b00      	cmp	r3, #0
 8001214:	d10a      	bne.n	800122c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001216:	69bb      	ldr	r3, [r7, #24]
 8001218:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800121c:	2b00      	cmp	r3, #0
 800121e:	d105      	bne.n	800122c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001226:	2b00      	cmp	r3, #0
 8001228:	f000 8095 	beq.w	8001356 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800122c:	69bb      	ldr	r3, [r7, #24]
 800122e:	0e1b      	lsrs	r3, r3, #24
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001236:	2201      	movs	r2, #1
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	409a      	lsls	r2, r3
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10d      	bne.n	8001264 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001252:	68f9      	ldr	r1, [r7, #12]
 8001254:	6809      	ldr	r1, [r1, #0]
 8001256:	431a      	orrs	r2, r3
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	3318      	adds	r3, #24
 800125c:	011b      	lsls	r3, r3, #4
 800125e:	440b      	add	r3, r1
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e00f      	b.n	8001284 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800126a:	68bb      	ldr	r3, [r7, #8]
 800126c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800126e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001274:	68f9      	ldr	r1, [r7, #12]
 8001276:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001278:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	3318      	adds	r3, #24
 800127e:	011b      	lsls	r3, r3, #4
 8001280:	440b      	add	r3, r1
 8001282:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6819      	ldr	r1, [r3, #0]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	691a      	ldr	r2, [r3, #16]
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	3318      	adds	r3, #24
 8001290:	011b      	lsls	r3, r3, #4
 8001292:	440b      	add	r3, r1
 8001294:	3304      	adds	r3, #4
 8001296:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	7d1b      	ldrb	r3, [r3, #20]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d111      	bne.n	80012c4 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	3318      	adds	r3, #24
 80012a8:	011b      	lsls	r3, r3, #4
 80012aa:	4413      	add	r3, r2
 80012ac:	3304      	adds	r3, #4
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68fa      	ldr	r2, [r7, #12]
 80012b2:	6811      	ldr	r1, [r2, #0]
 80012b4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3318      	adds	r3, #24
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	440b      	add	r3, r1
 80012c0:	3304      	adds	r3, #4
 80012c2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3307      	adds	r3, #7
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	061a      	lsls	r2, r3, #24
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	3306      	adds	r3, #6
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	041b      	lsls	r3, r3, #16
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3305      	adds	r3, #5
 80012da:	781b      	ldrb	r3, [r3, #0]
 80012dc:	021b      	lsls	r3, r3, #8
 80012de:	4313      	orrs	r3, r2
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	3204      	adds	r2, #4
 80012e4:	7812      	ldrb	r2, [r2, #0]
 80012e6:	4610      	mov	r0, r2
 80012e8:	68fa      	ldr	r2, [r7, #12]
 80012ea:	6811      	ldr	r1, [r2, #0]
 80012ec:	ea43 0200 	orr.w	r2, r3, r0
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	011b      	lsls	r3, r3, #4
 80012f4:	440b      	add	r3, r1
 80012f6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80012fa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3303      	adds	r3, #3
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	061a      	lsls	r2, r3, #24
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3302      	adds	r3, #2
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	041b      	lsls	r3, r3, #16
 800130c:	431a      	orrs	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	3301      	adds	r3, #1
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	021b      	lsls	r3, r3, #8
 8001316:	4313      	orrs	r3, r2
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	7812      	ldrb	r2, [r2, #0]
 800131c:	4610      	mov	r0, r2
 800131e:	68fa      	ldr	r2, [r7, #12]
 8001320:	6811      	ldr	r1, [r2, #0]
 8001322:	ea43 0200 	orr.w	r2, r3, r0
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	011b      	lsls	r3, r3, #4
 800132a:	440b      	add	r3, r1
 800132c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001330:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	681a      	ldr	r2, [r3, #0]
 8001336:	697b      	ldr	r3, [r7, #20]
 8001338:	3318      	adds	r3, #24
 800133a:	011b      	lsls	r3, r3, #4
 800133c:	4413      	add	r3, r2
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	6811      	ldr	r1, [r2, #0]
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	3318      	adds	r3, #24
 800134c:	011b      	lsls	r3, r3, #4
 800134e:	440b      	add	r3, r1
 8001350:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	e00e      	b.n	8001374 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800135a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e006      	b.n	8001374 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800136a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
  }
}
 8001374:	4618      	mov	r0, r3
 8001376:	3724      	adds	r7, #36	@ 0x24
 8001378:	46bd      	mov	sp, r7
 800137a:	bc80      	pop	{r7}
 800137c:	4770      	bx	lr

0800137e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800137e:	b480      	push	{r7}
 8001380:	b085      	sub	sp, #20
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001390:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001392:	7afb      	ldrb	r3, [r7, #11]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d002      	beq.n	800139e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001398:	7afb      	ldrb	r3, [r7, #11]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d11d      	bne.n	80013da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d002      	beq.n	80013b2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3301      	adds	r3, #1
 80013b0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d002      	beq.n	80013c6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3301      	adds	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d002      	beq.n	80013da <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	3301      	adds	r3, #1
 80013d8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80013da:	68fb      	ldr	r3, [r7, #12]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr

080013e6 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013e6:	b480      	push	{r7}
 80013e8:	b085      	sub	sp, #20
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	6078      	str	r0, [r7, #4]
 80013ee:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013f6:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d002      	beq.n	8001404 <HAL_CAN_ActivateNotification+0x1e>
 80013fe:	7bfb      	ldrb	r3, [r7, #15]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d109      	bne.n	8001418 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6959      	ldr	r1, [r3, #20]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	683a      	ldr	r2, [r7, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001414:	2300      	movs	r3, #0
 8001416:	e006      	b.n	8001426 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
  }
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bc80      	pop	{r7}
 800142e:	4770      	bx	lr

08001430 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b08a      	sub	sp, #40	@ 0x28
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800146c:	6a3b      	ldr	r3, [r7, #32]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d07c      	beq.n	8001570 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001476:	69bb      	ldr	r3, [r7, #24]
 8001478:	f003 0301 	and.w	r3, r3, #1
 800147c:	2b00      	cmp	r3, #0
 800147e:	d023      	beq.n	80014c8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2201      	movs	r2, #1
 8001486:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	f003 0302 	and.w	r3, r3, #2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d003      	beq.n	800149a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f000 f983 	bl	800179e <HAL_CAN_TxMailbox0CompleteCallback>
 8001498:	e016      	b.n	80014c8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d004      	beq.n	80014ae <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014a6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ac:	e00c      	b.n	80014c8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	f003 0308 	and.w	r3, r3, #8
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80014be:	627b      	str	r3, [r7, #36]	@ 0x24
 80014c0:	e002      	b.n	80014c8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014c2:	6878      	ldr	r0, [r7, #4]
 80014c4:	f000 f986 	bl	80017d4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d024      	beq.n	800151c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014da:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014dc:	69bb      	ldr	r3, [r7, #24]
 80014de:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d003      	beq.n	80014ee <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014e6:	6878      	ldr	r0, [r7, #4]
 80014e8:	f000 f962 	bl	80017b0 <HAL_CAN_TxMailbox1CompleteCallback>
 80014ec:	e016      	b.n	800151c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80014f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014fa:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80014fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001500:	e00c      	b.n	800151c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001508:	2b00      	cmp	r3, #0
 800150a:	d004      	beq.n	8001516 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800150c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
 8001514:	e002      	b.n	800151c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f000 f965 	bl	80017e6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800151c:	69bb      	ldr	r3, [r7, #24]
 800151e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d024      	beq.n	8001570 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800152e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d003      	beq.n	8001542 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 f941 	bl	80017c2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001540:	e016      	b.n	8001570 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800154c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800154e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001552:	627b      	str	r3, [r7, #36]	@ 0x24
 8001554:	e00c      	b.n	8001570 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001556:	69bb      	ldr	r3, [r7, #24]
 8001558:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d004      	beq.n	800156a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001562:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001566:	627b      	str	r3, [r7, #36]	@ 0x24
 8001568:	e002      	b.n	8001570 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 f944 	bl	80017f8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	f003 0308 	and.w	r3, r3, #8
 8001576:	2b00      	cmp	r3, #0
 8001578:	d00c      	beq.n	8001594 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	d007      	beq.n	8001594 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001586:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800158a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2210      	movs	r2, #16
 8001592:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001594:	6a3b      	ldr	r3, [r7, #32]
 8001596:	f003 0304 	and.w	r3, r3, #4
 800159a:	2b00      	cmp	r3, #0
 800159c:	d00b      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	f003 0308 	and.w	r3, r3, #8
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d006      	beq.n	80015b6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2208      	movs	r2, #8
 80015ae:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f000 f92a 	bl	800180a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015b6:	6a3b      	ldr	r3, [r7, #32]
 80015b8:	f003 0302 	and.w	r3, r3, #2
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d009      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	68db      	ldr	r3, [r3, #12]
 80015c6:	f003 0303 	and.w	r3, r3, #3
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d002      	beq.n	80015d4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7fe fdbc 	bl	800014c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d00c      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	f003 0310 	and.w	r3, r3, #16
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d007      	beq.n	80015f8 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015ee:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	2210      	movs	r2, #16
 80015f6:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80015f8:	6a3b      	ldr	r3, [r7, #32]
 80015fa:	f003 0320 	and.w	r3, r3, #32
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d00b      	beq.n	800161a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d006      	beq.n	800161a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2208      	movs	r2, #8
 8001612:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f000 f90a 	bl	800182e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800161a:	6a3b      	ldr	r3, [r7, #32]
 800161c:	f003 0310 	and.w	r3, r3, #16
 8001620:	2b00      	cmp	r3, #0
 8001622:	d009      	beq.n	8001638 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	691b      	ldr	r3, [r3, #16]
 800162a:	f003 0303 	and.w	r3, r3, #3
 800162e:	2b00      	cmp	r3, #0
 8001630:	d002      	beq.n	8001638 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001632:	6878      	ldr	r0, [r7, #4]
 8001634:	f000 f8f2 	bl	800181c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	f003 0310 	and.w	r3, r3, #16
 8001648:	2b00      	cmp	r3, #0
 800164a:	d006      	beq.n	800165a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2210      	movs	r2, #16
 8001652:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f000 f8f3 	bl	8001840 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800165a:	6a3b      	ldr	r3, [r7, #32]
 800165c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001660:	2b00      	cmp	r3, #0
 8001662:	d00b      	beq.n	800167c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f003 0308 	and.w	r3, r3, #8
 800166a:	2b00      	cmp	r3, #0
 800166c:	d006      	beq.n	800167c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2208      	movs	r2, #8
 8001674:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f8eb 	bl	8001852 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800167c:	6a3b      	ldr	r3, [r7, #32]
 800167e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d07b      	beq.n	800177e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	f003 0304 	and.w	r3, r3, #4
 800168c:	2b00      	cmp	r3, #0
 800168e:	d072      	beq.n	8001776 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001690:	6a3b      	ldr	r3, [r7, #32]
 8001692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001696:	2b00      	cmp	r3, #0
 8001698:	d008      	beq.n	80016ac <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d003      	beq.n	80016ac <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016a6:	f043 0301 	orr.w	r3, r3, #1
 80016aa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016ac:	6a3b      	ldr	r3, [r7, #32]
 80016ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d008      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c2:	f043 0302 	orr.w	r3, r3, #2
 80016c6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016c8:	6a3b      	ldr	r3, [r7, #32]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d008      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d003      	beq.n	80016e4 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016de:	f043 0304 	orr.w	r3, r3, #4
 80016e2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d043      	beq.n	8001776 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d03e      	beq.n	8001776 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80016fe:	2b60      	cmp	r3, #96	@ 0x60
 8001700:	d02b      	beq.n	800175a <HAL_CAN_IRQHandler+0x32a>
 8001702:	2b60      	cmp	r3, #96	@ 0x60
 8001704:	d82e      	bhi.n	8001764 <HAL_CAN_IRQHandler+0x334>
 8001706:	2b50      	cmp	r3, #80	@ 0x50
 8001708:	d022      	beq.n	8001750 <HAL_CAN_IRQHandler+0x320>
 800170a:	2b50      	cmp	r3, #80	@ 0x50
 800170c:	d82a      	bhi.n	8001764 <HAL_CAN_IRQHandler+0x334>
 800170e:	2b40      	cmp	r3, #64	@ 0x40
 8001710:	d019      	beq.n	8001746 <HAL_CAN_IRQHandler+0x316>
 8001712:	2b40      	cmp	r3, #64	@ 0x40
 8001714:	d826      	bhi.n	8001764 <HAL_CAN_IRQHandler+0x334>
 8001716:	2b30      	cmp	r3, #48	@ 0x30
 8001718:	d010      	beq.n	800173c <HAL_CAN_IRQHandler+0x30c>
 800171a:	2b30      	cmp	r3, #48	@ 0x30
 800171c:	d822      	bhi.n	8001764 <HAL_CAN_IRQHandler+0x334>
 800171e:	2b10      	cmp	r3, #16
 8001720:	d002      	beq.n	8001728 <HAL_CAN_IRQHandler+0x2f8>
 8001722:	2b20      	cmp	r3, #32
 8001724:	d005      	beq.n	8001732 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001726:	e01d      	b.n	8001764 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800172a:	f043 0308 	orr.w	r3, r3, #8
 800172e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001730:	e019      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001734:	f043 0310 	orr.w	r3, r3, #16
 8001738:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800173a:	e014      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800173c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800173e:	f043 0320 	orr.w	r3, r3, #32
 8001742:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001744:	e00f      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001748:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800174c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800174e:	e00a      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001752:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001756:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001758:	e005      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800175a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800175c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001760:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001762:	e000      	b.n	8001766 <HAL_CAN_IRQHandler+0x336>
            break;
 8001764:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	699a      	ldr	r2, [r3, #24]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001774:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	2204      	movs	r2, #4
 800177c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800177e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800178a:	431a      	orrs	r2, r3
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001790:	6878      	ldr	r0, [r7, #4]
 8001792:	f7fe fce4 	bl	800015e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001796:	bf00      	nop
 8001798:	3728      	adds	r7, #40	@ 0x28
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr

080017b0 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017b8:	bf00      	nop
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	bc80      	pop	{r7}
 80017c0:	4770      	bx	lr

080017c2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017e6:	b480      	push	{r7}
 80017e8:	b083      	sub	sp, #12
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	bc80      	pop	{r7}
 8001808:	4770      	bx	lr

0800180a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800180a:	b480      	push	{r7}
 800180c:	b083      	sub	sp, #12
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	bc80      	pop	{r7}
 800182c:	4770      	bx	lr

0800182e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001836:	bf00      	nop
 8001838:	370c      	adds	r7, #12
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	bc80      	pop	{r7}
 8001850:	4770      	bx	lr

08001852 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001852:	b480      	push	{r7}
 8001854:	b083      	sub	sp, #12
 8001856:	af00      	add	r7, sp, #0
 8001858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr

08001864 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001864:	b480      	push	{r7}
 8001866:	b085      	sub	sp, #20
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001874:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001876:	68db      	ldr	r3, [r3, #12]
 8001878:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001880:	4013      	ands	r3, r2
 8001882:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800188c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001890:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001894:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001896:	4a04      	ldr	r2, [pc, #16]	@ (80018a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	60d3      	str	r3, [r2, #12]
}
 800189c:	bf00      	nop
 800189e:	3714      	adds	r7, #20
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bc80      	pop	{r7}
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <__NVIC_GetPriorityGrouping+0x18>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	0a1b      	lsrs	r3, r3, #8
 80018b6:	f003 0307 	and.w	r3, r3, #7
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b083      	sub	sp, #12
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	4603      	mov	r3, r0
 80018d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	db0b      	blt.n	80018f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018da:	79fb      	ldrb	r3, [r7, #7]
 80018dc:	f003 021f 	and.w	r2, r3, #31
 80018e0:	4906      	ldr	r1, [pc, #24]	@ (80018fc <__NVIC_EnableIRQ+0x34>)
 80018e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e6:	095b      	lsrs	r3, r3, #5
 80018e8:	2001      	movs	r0, #1
 80018ea:	fa00 f202 	lsl.w	r2, r0, r2
 80018ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bc80      	pop	{r7}
 80018fa:	4770      	bx	lr
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	@ (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	@ (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	bc80      	pop	{r7}
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	@ 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	@ 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019bc:	f3bf 8f4f 	dsb	sy
}
 80019c0:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80019c2:	4b06      	ldr	r3, [pc, #24]	@ (80019dc <__NVIC_SystemReset+0x24>)
 80019c4:	68db      	ldr	r3, [r3, #12]
 80019c6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80019ca:	4904      	ldr	r1, [pc, #16]	@ (80019dc <__NVIC_SystemReset+0x24>)
 80019cc:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <__NVIC_SystemReset+0x28>)
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80019d2:	f3bf 8f4f 	dsb	sy
}
 80019d6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80019d8:	bf00      	nop
 80019da:	e7fd      	b.n	80019d8 <__NVIC_SystemReset+0x20>
 80019dc:	e000ed00 	.word	0xe000ed00
 80019e0:	05fa0004 	.word	0x05fa0004

080019e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	3b01      	subs	r3, #1
 80019f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019f4:	d301      	bcc.n	80019fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00f      	b.n	8001a1a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001a24 <SysTick_Config+0x40>)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a02:	210f      	movs	r1, #15
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f7ff ff7a 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a0c:	4b05      	ldr	r3, [pc, #20]	@ (8001a24 <SysTick_Config+0x40>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a12:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <SysTick_Config+0x40>)
 8001a14:	2207      	movs	r2, #7
 8001a16:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	e000e010 	.word	0xe000e010

08001a28 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f7ff ff17 	bl	8001864 <__NVIC_SetPriorityGrouping>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b086      	sub	sp, #24
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	4603      	mov	r3, r0
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
 8001a4a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a50:	f7ff ff2c 	bl	80018ac <__NVIC_GetPriorityGrouping>
 8001a54:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68b9      	ldr	r1, [r7, #8]
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff ff7a 	bl	8001954 <NVIC_EncodePriority>
 8001a60:	4602      	mov	r2, r0
 8001a62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff49 	bl	8001900 <__NVIC_SetPriority>
}
 8001a6e:	bf00      	nop
 8001a70:	3718      	adds	r7, #24
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b082      	sub	sp, #8
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a84:	4618      	mov	r0, r3
 8001a86:	f7ff ff1f 	bl	80018c8 <__NVIC_EnableIRQ>
}
 8001a8a:	bf00      	nop
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8001a96:	f7ff ff8f 	bl	80019b8 <__NVIC_SystemReset>

08001a9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f7ff ff9e 	bl	80019e4 <SysTick_Config>
 8001aa8:	4603      	mov	r3, r0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3708      	adds	r7, #8
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b08b      	sub	sp, #44	@ 0x2c
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac6:	e169      	b.n	8001d9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f040 8158 	bne.w	8001d96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4a9a      	ldr	r2, [pc, #616]	@ (8001d54 <HAL_GPIO_Init+0x2a0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d05e      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001af0:	4a98      	ldr	r2, [pc, #608]	@ (8001d54 <HAL_GPIO_Init+0x2a0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d875      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001af6:	4a98      	ldr	r2, [pc, #608]	@ (8001d58 <HAL_GPIO_Init+0x2a4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d058      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001afc:	4a96      	ldr	r2, [pc, #600]	@ (8001d58 <HAL_GPIO_Init+0x2a4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d86f      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b02:	4a96      	ldr	r2, [pc, #600]	@ (8001d5c <HAL_GPIO_Init+0x2a8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d052      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001b08:	4a94      	ldr	r2, [pc, #592]	@ (8001d5c <HAL_GPIO_Init+0x2a8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d869      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b0e:	4a94      	ldr	r2, [pc, #592]	@ (8001d60 <HAL_GPIO_Init+0x2ac>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d04c      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001b14:	4a92      	ldr	r2, [pc, #584]	@ (8001d60 <HAL_GPIO_Init+0x2ac>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d863      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b1a:	4a92      	ldr	r2, [pc, #584]	@ (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d046      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001b20:	4a90      	ldr	r2, [pc, #576]	@ (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d85d      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b26:	2b12      	cmp	r3, #18
 8001b28:	d82a      	bhi.n	8001b80 <HAL_GPIO_Init+0xcc>
 8001b2a:	2b12      	cmp	r3, #18
 8001b2c:	d859      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b34 <HAL_GPIO_Init+0x80>)
 8001b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b34:	08001baf 	.word	0x08001baf
 8001b38:	08001b89 	.word	0x08001b89
 8001b3c:	08001b9b 	.word	0x08001b9b
 8001b40:	08001bdd 	.word	0x08001bdd
 8001b44:	08001be3 	.word	0x08001be3
 8001b48:	08001be3 	.word	0x08001be3
 8001b4c:	08001be3 	.word	0x08001be3
 8001b50:	08001be3 	.word	0x08001be3
 8001b54:	08001be3 	.word	0x08001be3
 8001b58:	08001be3 	.word	0x08001be3
 8001b5c:	08001be3 	.word	0x08001be3
 8001b60:	08001be3 	.word	0x08001be3
 8001b64:	08001be3 	.word	0x08001be3
 8001b68:	08001be3 	.word	0x08001be3
 8001b6c:	08001be3 	.word	0x08001be3
 8001b70:	08001be3 	.word	0x08001be3
 8001b74:	08001be3 	.word	0x08001be3
 8001b78:	08001b91 	.word	0x08001b91
 8001b7c:	08001ba5 	.word	0x08001ba5
 8001b80:	4a79      	ldr	r2, [pc, #484]	@ (8001d68 <HAL_GPIO_Init+0x2b4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b86:	e02c      	b.n	8001be2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	623b      	str	r3, [r7, #32]
          break;
 8001b8e:	e029      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	3304      	adds	r3, #4
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e024      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	623b      	str	r3, [r7, #32]
          break;
 8001ba2:	e01f      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	330c      	adds	r3, #12
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	e01a      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	623b      	str	r3, [r7, #32]
          break;
 8001bba:	e013      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	611a      	str	r2, [r3, #16]
          break;
 8001bce:	e009      	b.n	8001be4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	615a      	str	r2, [r3, #20]
          break;
 8001bda:	e003      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          break;
 8001be2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2bff      	cmp	r3, #255	@ 0xff
 8001be8:	d801      	bhi.n	8001bee <HAL_GPIO_Init+0x13a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	e001      	b.n	8001bf2 <HAL_GPIO_Init+0x13e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2bff      	cmp	r3, #255	@ 0xff
 8001bf8:	d802      	bhi.n	8001c00 <HAL_GPIO_Init+0x14c>
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	e002      	b.n	8001c06 <HAL_GPIO_Init+0x152>
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	3b08      	subs	r3, #8
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	401a      	ands	r2, r3
 8001c18:	6a39      	ldr	r1, [r7, #32]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	431a      	orrs	r2, r3
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80b1 	beq.w	8001d96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c34:	4b4d      	ldr	r3, [pc, #308]	@ (8001d6c <HAL_GPIO_Init+0x2b8>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a4c      	ldr	r2, [pc, #304]	@ (8001d6c <HAL_GPIO_Init+0x2b8>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b4a      	ldr	r3, [pc, #296]	@ (8001d6c <HAL_GPIO_Init+0x2b8>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c4c:	4a48      	ldr	r2, [pc, #288]	@ (8001d70 <HAL_GPIO_Init+0x2bc>)
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a40      	ldr	r2, [pc, #256]	@ (8001d74 <HAL_GPIO_Init+0x2c0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_GPIO_Init+0x1ec>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d78 <HAL_GPIO_Init+0x2c4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d00d      	beq.n	8001c9c <HAL_GPIO_Init+0x1e8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a3e      	ldr	r2, [pc, #248]	@ (8001d7c <HAL_GPIO_Init+0x2c8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d007      	beq.n	8001c98 <HAL_GPIO_Init+0x1e4>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d80 <HAL_GPIO_Init+0x2cc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_GPIO_Init+0x1e0>
 8001c90:	2303      	movs	r3, #3
 8001c92:	e006      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001c94:	2304      	movs	r3, #4
 8001c96:	e004      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e002      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca4:	f002 0203 	and.w	r2, r2, #3
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	4093      	lsls	r3, r2
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cb2:	492f      	ldr	r1, [pc, #188]	@ (8001d70 <HAL_GPIO_Init+0x2bc>)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	492c      	ldr	r1, [pc, #176]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cda:	4b2a      	ldr	r3, [pc, #168]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4928      	ldr	r1, [pc, #160]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	4922      	ldr	r1, [pc, #136]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d02:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	491e      	ldr	r1, [pc, #120]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4918      	ldr	r1, [pc, #96]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4914      	ldr	r1, [pc, #80]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d021      	beq.n	8001d88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d44:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	490e      	ldr	r1, [pc, #56]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e021      	b.n	8001d96 <HAL_GPIO_Init+0x2e2>
 8001d52:	bf00      	nop
 8001d54:	10320000 	.word	0x10320000
 8001d58:	10310000 	.word	0x10310000
 8001d5c:	10220000 	.word	0x10220000
 8001d60:	10210000 	.word	0x10210000
 8001d64:	10120000 	.word	0x10120000
 8001d68:	10110000 	.word	0x10110000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40010800 	.word	0x40010800
 8001d78:	40010c00 	.word	0x40010c00
 8001d7c:	40011000 	.word	0x40011000
 8001d80:	40011400 	.word	0x40011400
 8001d84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_GPIO_Init+0x304>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	4909      	ldr	r1, [pc, #36]	@ (8001db8 <HAL_GPIO_Init+0x304>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	3301      	adds	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f47f ae8e 	bne.w	8001ac8 <HAL_GPIO_Init+0x14>
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	372c      	adds	r7, #44	@ 0x2c
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689a      	ldr	r2, [r3, #8]
 8001dcc:	887b      	ldrh	r3, [r7, #2]
 8001dce:	4013      	ands	r3, r2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d002      	beq.n	8001dda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	73fb      	strb	r3, [r7, #15]
 8001dd8:	e001      	b.n	8001dde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3714      	adds	r7, #20
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bc80      	pop	{r7}
 8001de8:	4770      	bx	lr

08001dea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001dea:	b480      	push	{r7}
 8001dec:	b083      	sub	sp, #12
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
 8001df2:	460b      	mov	r3, r1
 8001df4:	807b      	strh	r3, [r7, #2]
 8001df6:	4613      	mov	r3, r2
 8001df8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001dfa:	787b      	ldrb	r3, [r7, #1]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e00:	887a      	ldrh	r2, [r7, #2]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e06:	e003      	b.n	8001e10 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e08:	887b      	ldrh	r3, [r7, #2]
 8001e0a:	041a      	lsls	r2, r3, #16
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	611a      	str	r2, [r3, #16]
}
 8001e10:	bf00      	nop
 8001e12:	370c      	adds	r7, #12
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bc80      	pop	{r7}
 8001e18:	4770      	bx	lr

08001e1a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e2c:	887a      	ldrh	r2, [r7, #2]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	4013      	ands	r3, r2
 8001e32:	041a      	lsls	r2, r3, #16
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	43d9      	mvns	r1, r3
 8001e38:	887b      	ldrh	r3, [r7, #2]
 8001e3a:	400b      	ands	r3, r1
 8001e3c:	431a      	orrs	r2, r3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	611a      	str	r2, [r3, #16]
}
 8001e42:	bf00      	nop
 8001e44:	3714      	adds	r7, #20
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr

08001e4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d101      	bne.n	8001e5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e272      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0301 	and.w	r3, r3, #1
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f000 8087 	beq.w	8001f7a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e6c:	4b92      	ldr	r3, [pc, #584]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d00c      	beq.n	8001e92 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e78:	4b8f      	ldr	r3, [pc, #572]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f003 030c 	and.w	r3, r3, #12
 8001e80:	2b08      	cmp	r3, #8
 8001e82:	d112      	bne.n	8001eaa <HAL_RCC_OscConfig+0x5e>
 8001e84:	4b8c      	ldr	r3, [pc, #560]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e90:	d10b      	bne.n	8001eaa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e92:	4b89      	ldr	r3, [pc, #548]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d06c      	beq.n	8001f78 <HAL_RCC_OscConfig+0x12c>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d168      	bne.n	8001f78 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e24c      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001eb2:	d106      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x76>
 8001eb4:	4b80      	ldr	r3, [pc, #512]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a7f      	ldr	r2, [pc, #508]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001eba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ebe:	6013      	str	r3, [r2, #0]
 8001ec0:	e02e      	b.n	8001f20 <HAL_RCC_OscConfig+0xd4>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10c      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x98>
 8001eca:	4b7b      	ldr	r3, [pc, #492]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a7a      	ldr	r2, [pc, #488]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	4b78      	ldr	r3, [pc, #480]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a77      	ldr	r2, [pc, #476]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ee0:	6013      	str	r3, [r2, #0]
 8001ee2:	e01d      	b.n	8001f20 <HAL_RCC_OscConfig+0xd4>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0xbc>
 8001eee:	4b72      	ldr	r3, [pc, #456]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a71      	ldr	r2, [pc, #452]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	4b6f      	ldr	r3, [pc, #444]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a6e      	ldr	r2, [pc, #440]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f04:	6013      	str	r3, [r2, #0]
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0xd4>
 8001f08:	4b6b      	ldr	r3, [pc, #428]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a6a      	ldr	r2, [pc, #424]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f12:	6013      	str	r3, [r2, #0]
 8001f14:	4b68      	ldr	r3, [pc, #416]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a67      	ldr	r2, [pc, #412]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f1e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d013      	beq.n	8001f50 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f28:	f7fe ff24 	bl	8000d74 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f30:	f7fe ff20 	bl	8000d74 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b64      	cmp	r3, #100	@ 0x64
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e200      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f42:	4b5d      	ldr	r3, [pc, #372]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d0f0      	beq.n	8001f30 <HAL_RCC_OscConfig+0xe4>
 8001f4e:	e014      	b.n	8001f7a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f50:	f7fe ff10 	bl	8000d74 <HAL_GetTick>
 8001f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f56:	e008      	b.n	8001f6a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f58:	f7fe ff0c 	bl	8000d74 <HAL_GetTick>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b64      	cmp	r3, #100	@ 0x64
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e1ec      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f6a:	4b53      	ldr	r3, [pc, #332]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1f0      	bne.n	8001f58 <HAL_RCC_OscConfig+0x10c>
 8001f76:	e000      	b.n	8001f7a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d063      	beq.n	800204e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f86:	4b4c      	ldr	r3, [pc, #304]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f92:	4b49      	ldr	r3, [pc, #292]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d11c      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x18c>
 8001f9e:	4b46      	ldr	r3, [pc, #280]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d116      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001faa:	4b43      	ldr	r3, [pc, #268]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d005      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x176>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	691b      	ldr	r3, [r3, #16]
 8001fba:	2b01      	cmp	r3, #1
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e1c0      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fc2:	4b3d      	ldr	r3, [pc, #244]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	695b      	ldr	r3, [r3, #20]
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4939      	ldr	r1, [pc, #228]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	e03a      	b.n	800204e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d020      	beq.n	8002022 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fe0:	4b36      	ldr	r3, [pc, #216]	@ (80020bc <HAL_RCC_OscConfig+0x270>)
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe6:	f7fe fec5 	bl	8000d74 <HAL_GetTick>
 8001fea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fec:	e008      	b.n	8002000 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fee:	f7fe fec1 	bl	8000d74 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	693b      	ldr	r3, [r7, #16]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e1a1      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002000:	4b2d      	ldr	r3, [pc, #180]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d0f0      	beq.n	8001fee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200c:	4b2a      	ldr	r3, [pc, #168]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	695b      	ldr	r3, [r3, #20]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	4927      	ldr	r1, [pc, #156]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]
 8002020:	e015      	b.n	800204e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002022:	4b26      	ldr	r3, [pc, #152]	@ (80020bc <HAL_RCC_OscConfig+0x270>)
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7fe fea4 	bl	8000d74 <HAL_GetTick>
 800202c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800202e:	e008      	b.n	8002042 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002030:	f7fe fea0 	bl	8000d74 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	693b      	ldr	r3, [r7, #16]
 8002038:	1ad3      	subs	r3, r2, r3
 800203a:	2b02      	cmp	r3, #2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e180      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	4b1d      	ldr	r3, [pc, #116]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d1f0      	bne.n	8002030 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d03a      	beq.n	80020d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d019      	beq.n	8002096 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002062:	4b17      	ldr	r3, [pc, #92]	@ (80020c0 <HAL_RCC_OscConfig+0x274>)
 8002064:	2201      	movs	r2, #1
 8002066:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002068:	f7fe fe84 	bl	8000d74 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002070:	f7fe fe80 	bl	8000d74 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e160      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002082:	4b0d      	ldr	r3, [pc, #52]	@ (80020b8 <HAL_RCC_OscConfig+0x26c>)
 8002084:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002086:	f003 0302 	and.w	r3, r3, #2
 800208a:	2b00      	cmp	r3, #0
 800208c:	d0f0      	beq.n	8002070 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800208e:	2001      	movs	r0, #1
 8002090:	f000 face 	bl	8002630 <RCC_Delay>
 8002094:	e01c      	b.n	80020d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002096:	4b0a      	ldr	r3, [pc, #40]	@ (80020c0 <HAL_RCC_OscConfig+0x274>)
 8002098:	2200      	movs	r2, #0
 800209a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800209c:	f7fe fe6a 	bl	8000d74 <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a2:	e00f      	b.n	80020c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020a4:	f7fe fe66 	bl	8000d74 <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d908      	bls.n	80020c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e146      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
 80020b6:	bf00      	nop
 80020b8:	40021000 	.word	0x40021000
 80020bc:	42420000 	.word	0x42420000
 80020c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c4:	4b92      	ldr	r3, [pc, #584]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1e9      	bne.n	80020a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80a6 	beq.w	800222a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020e2:	4b8b      	ldr	r3, [pc, #556]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10d      	bne.n	800210a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ee:	4b88      	ldr	r3, [pc, #544]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	4a87      	ldr	r2, [pc, #540]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020f8:	61d3      	str	r3, [r2, #28]
 80020fa:	4b85      	ldr	r3, [pc, #532]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b82      	ldr	r3, [pc, #520]	@ (8002314 <HAL_RCC_OscConfig+0x4c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d118      	bne.n	8002148 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b7f      	ldr	r3, [pc, #508]	@ (8002314 <HAL_RCC_OscConfig+0x4c8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a7e      	ldr	r2, [pc, #504]	@ (8002314 <HAL_RCC_OscConfig+0x4c8>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7fe fe27 	bl	8000d74 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	e008      	b.n	800213c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800212a:	f7fe fe23 	bl	8000d74 <HAL_GetTick>
 800212e:	4602      	mov	r2, r0
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	1ad3      	subs	r3, r2, r3
 8002134:	2b64      	cmp	r3, #100	@ 0x64
 8002136:	d901      	bls.n	800213c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e103      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800213c:	4b75      	ldr	r3, [pc, #468]	@ (8002314 <HAL_RCC_OscConfig+0x4c8>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0f0      	beq.n	800212a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2b01      	cmp	r3, #1
 800214e:	d106      	bne.n	800215e <HAL_RCC_OscConfig+0x312>
 8002150:	4b6f      	ldr	r3, [pc, #444]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4a6e      	ldr	r2, [pc, #440]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002156:	f043 0301 	orr.w	r3, r3, #1
 800215a:	6213      	str	r3, [r2, #32]
 800215c:	e02d      	b.n	80021ba <HAL_RCC_OscConfig+0x36e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10c      	bne.n	8002180 <HAL_RCC_OscConfig+0x334>
 8002166:	4b6a      	ldr	r3, [pc, #424]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a69      	ldr	r2, [pc, #420]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	f023 0301 	bic.w	r3, r3, #1
 8002170:	6213      	str	r3, [r2, #32]
 8002172:	4b67      	ldr	r3, [pc, #412]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	4a66      	ldr	r2, [pc, #408]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002178:	f023 0304 	bic.w	r3, r3, #4
 800217c:	6213      	str	r3, [r2, #32]
 800217e:	e01c      	b.n	80021ba <HAL_RCC_OscConfig+0x36e>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b05      	cmp	r3, #5
 8002186:	d10c      	bne.n	80021a2 <HAL_RCC_OscConfig+0x356>
 8002188:	4b61      	ldr	r3, [pc, #388]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a60      	ldr	r2, [pc, #384]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	f043 0304 	orr.w	r3, r3, #4
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	4b5e      	ldr	r3, [pc, #376]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002196:	6a1b      	ldr	r3, [r3, #32]
 8002198:	4a5d      	ldr	r2, [pc, #372]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6213      	str	r3, [r2, #32]
 80021a0:	e00b      	b.n	80021ba <HAL_RCC_OscConfig+0x36e>
 80021a2:	4b5b      	ldr	r3, [pc, #364]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a5a      	ldr	r2, [pc, #360]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	f023 0301 	bic.w	r3, r3, #1
 80021ac:	6213      	str	r3, [r2, #32]
 80021ae:	4b58      	ldr	r3, [pc, #352]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	4a57      	ldr	r2, [pc, #348]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80021b4:	f023 0304 	bic.w	r3, r3, #4
 80021b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	68db      	ldr	r3, [r3, #12]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d015      	beq.n	80021ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021c2:	f7fe fdd7 	bl	8000d74 <HAL_GetTick>
 80021c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	e00a      	b.n	80021e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ca:	f7fe fdd3 	bl	8000d74 <HAL_GetTick>
 80021ce:	4602      	mov	r2, r0
 80021d0:	693b      	ldr	r3, [r7, #16]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021d8:	4293      	cmp	r3, r2
 80021da:	d901      	bls.n	80021e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e0b1      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e0:	4b4b      	ldr	r3, [pc, #300]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80021e2:	6a1b      	ldr	r3, [r3, #32]
 80021e4:	f003 0302 	and.w	r3, r3, #2
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d0ee      	beq.n	80021ca <HAL_RCC_OscConfig+0x37e>
 80021ec:	e014      	b.n	8002218 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021ee:	f7fe fdc1 	bl	8000d74 <HAL_GetTick>
 80021f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021f4:	e00a      	b.n	800220c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe fdbd 	bl	8000d74 <HAL_GetTick>
 80021fa:	4602      	mov	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002204:	4293      	cmp	r3, r2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e09b      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800220c:	4b40      	ldr	r3, [pc, #256]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f003 0302 	and.w	r3, r3, #2
 8002214:	2b00      	cmp	r3, #0
 8002216:	d1ee      	bne.n	80021f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002218:	7dfb      	ldrb	r3, [r7, #23]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4b3c      	ldr	r3, [pc, #240]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	4a3b      	ldr	r2, [pc, #236]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002224:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002228:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8087 	beq.w	8002342 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002234:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f003 030c 	and.w	r3, r3, #12
 800223c:	2b08      	cmp	r3, #8
 800223e:	d061      	beq.n	8002304 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	69db      	ldr	r3, [r3, #28]
 8002244:	2b02      	cmp	r3, #2
 8002246:	d146      	bne.n	80022d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002248:	4b33      	ldr	r3, [pc, #204]	@ (8002318 <HAL_RCC_OscConfig+0x4cc>)
 800224a:	2200      	movs	r2, #0
 800224c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224e:	f7fe fd91 	bl	8000d74 <HAL_GetTick>
 8002252:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002254:	e008      	b.n	8002268 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002256:	f7fe fd8d 	bl	8000d74 <HAL_GetTick>
 800225a:	4602      	mov	r2, r0
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	1ad3      	subs	r3, r2, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d901      	bls.n	8002268 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002264:	2303      	movs	r3, #3
 8002266:	e06d      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002268:	4b29      	ldr	r3, [pc, #164]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002270:	2b00      	cmp	r3, #0
 8002272:	d1f0      	bne.n	8002256 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800227c:	d108      	bne.n	8002290 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800227e:	4b24      	ldr	r3, [pc, #144]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	4921      	ldr	r1, [pc, #132]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 800228c:	4313      	orrs	r3, r2
 800228e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002290:	4b1f      	ldr	r3, [pc, #124]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a19      	ldr	r1, [r3, #32]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a0:	430b      	orrs	r3, r1
 80022a2:	491b      	ldr	r1, [pc, #108]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a8:	4b1b      	ldr	r3, [pc, #108]	@ (8002318 <HAL_RCC_OscConfig+0x4cc>)
 80022aa:	2201      	movs	r2, #1
 80022ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022ae:	f7fe fd61 	bl	8000d74 <HAL_GetTick>
 80022b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022b6:	f7fe fd5d 	bl	8000d74 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	693b      	ldr	r3, [r7, #16]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e03d      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022c8:	4b11      	ldr	r3, [pc, #68]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0f0      	beq.n	80022b6 <HAL_RCC_OscConfig+0x46a>
 80022d4:	e035      	b.n	8002342 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d6:	4b10      	ldr	r3, [pc, #64]	@ (8002318 <HAL_RCC_OscConfig+0x4cc>)
 80022d8:	2200      	movs	r2, #0
 80022da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022dc:	f7fe fd4a 	bl	8000d74 <HAL_GetTick>
 80022e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e2:	e008      	b.n	80022f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e4:	f7fe fd46 	bl	8000d74 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	2b02      	cmp	r3, #2
 80022f0:	d901      	bls.n	80022f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022f2:	2303      	movs	r3, #3
 80022f4:	e026      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022f6:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1f0      	bne.n	80022e4 <HAL_RCC_OscConfig+0x498>
 8002302:	e01e      	b.n	8002342 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69db      	ldr	r3, [r3, #28]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d107      	bne.n	800231c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e019      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
 8002318:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800231c:	4b0b      	ldr	r3, [pc, #44]	@ (800234c <HAL_RCC_OscConfig+0x500>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	429a      	cmp	r2, r3
 800232e:	d106      	bne.n	800233e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233a:	429a      	cmp	r2, r3
 800233c:	d001      	beq.n	8002342 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800233e:	2301      	movs	r3, #1
 8002340:	e000      	b.n	8002344 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d101      	bne.n	8002364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0d0      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002364:	4b6a      	ldr	r3, [pc, #424]	@ (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0307 	and.w	r3, r3, #7
 800236c:	683a      	ldr	r2, [r7, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	d910      	bls.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002372:	4b67      	ldr	r3, [pc, #412]	@ (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f023 0207 	bic.w	r2, r3, #7
 800237a:	4965      	ldr	r1, [pc, #404]	@ (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	4313      	orrs	r3, r2
 8002380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002382:	4b63      	ldr	r3, [pc, #396]	@ (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0307 	and.w	r3, r3, #7
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	429a      	cmp	r2, r3
 800238e:	d001      	beq.n	8002394 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0b8      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0302 	and.w	r3, r3, #2
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0304 	and.w	r3, r3, #4
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d005      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023ac:	4b59      	ldr	r3, [pc, #356]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a58      	ldr	r2, [pc, #352]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023b2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0308 	and.w	r3, r3, #8
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023c4:	4b53      	ldr	r3, [pc, #332]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	4a52      	ldr	r2, [pc, #328]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023ca:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023d0:	4b50      	ldr	r3, [pc, #320]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	494d      	ldr	r1, [pc, #308]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f003 0301 	and.w	r3, r3, #1
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d040      	beq.n	8002470 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d107      	bne.n	8002406 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023f6:	4b47      	ldr	r3, [pc, #284]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d115      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	e07f      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	4b41      	ldr	r3, [pc, #260]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e073      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	4b3d      	ldr	r3, [pc, #244]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d101      	bne.n	800242e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e06b      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800242e:	4b39      	ldr	r3, [pc, #228]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f023 0203 	bic.w	r2, r3, #3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	4936      	ldr	r1, [pc, #216]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002440:	f7fe fc98 	bl	8000d74 <HAL_GetTick>
 8002444:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002446:	e00a      	b.n	800245e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002448:	f7fe fc94 	bl	8000d74 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002456:	4293      	cmp	r3, r2
 8002458:	d901      	bls.n	800245e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800245a:	2303      	movs	r3, #3
 800245c:	e053      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800245e:	4b2d      	ldr	r3, [pc, #180]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f003 020c 	and.w	r2, r3, #12
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	429a      	cmp	r2, r3
 800246e:	d1eb      	bne.n	8002448 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002470:	4b27      	ldr	r3, [pc, #156]	@ (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0307 	and.w	r3, r3, #7
 8002478:	683a      	ldr	r2, [r7, #0]
 800247a:	429a      	cmp	r2, r3
 800247c:	d210      	bcs.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247e:	4b24      	ldr	r3, [pc, #144]	@ (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f023 0207 	bic.w	r2, r3, #7
 8002486:	4922      	ldr	r1, [pc, #136]	@ (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	4313      	orrs	r3, r2
 800248c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800248e:	4b20      	ldr	r3, [pc, #128]	@ (8002510 <HAL_RCC_ClockConfig+0x1c0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e032      	b.n	8002506 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0304 	and.w	r3, r3, #4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024ac:	4b19      	ldr	r3, [pc, #100]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	4916      	ldr	r1, [pc, #88]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0308 	and.w	r3, r3, #8
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d009      	beq.n	80024de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024ca:	4b12      	ldr	r3, [pc, #72]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	490e      	ldr	r1, [pc, #56]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024de:	f000 f821 	bl	8002524 <HAL_RCC_GetSysClockFreq>
 80024e2:	4602      	mov	r2, r0
 80024e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002514 <HAL_RCC_ClockConfig+0x1c4>)
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	091b      	lsrs	r3, r3, #4
 80024ea:	f003 030f 	and.w	r3, r3, #15
 80024ee:	490a      	ldr	r1, [pc, #40]	@ (8002518 <HAL_RCC_ClockConfig+0x1c8>)
 80024f0:	5ccb      	ldrb	r3, [r1, r3]
 80024f2:	fa22 f303 	lsr.w	r3, r2, r3
 80024f6:	4a09      	ldr	r2, [pc, #36]	@ (800251c <HAL_RCC_ClockConfig+0x1cc>)
 80024f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024fa:	4b09      	ldr	r3, [pc, #36]	@ (8002520 <HAL_RCC_ClockConfig+0x1d0>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4618      	mov	r0, r3
 8002500:	f7fe fbf6 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	40022000 	.word	0x40022000
 8002514:	40021000 	.word	0x40021000
 8002518:	08002898 	.word	0x08002898
 800251c:	20000004 	.word	0x20000004
 8002520:	20000008 	.word	0x20000008

08002524 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002524:	b480      	push	{r7}
 8002526:	b087      	sub	sp, #28
 8002528:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60fb      	str	r3, [r7, #12]
 800252e:	2300      	movs	r3, #0
 8002530:	60bb      	str	r3, [r7, #8]
 8002532:	2300      	movs	r3, #0
 8002534:	617b      	str	r3, [r7, #20]
 8002536:	2300      	movs	r3, #0
 8002538:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800253a:	2300      	movs	r3, #0
 800253c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800253e:	4b1e      	ldr	r3, [pc, #120]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	f003 030c 	and.w	r3, r3, #12
 800254a:	2b04      	cmp	r3, #4
 800254c:	d002      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x30>
 800254e:	2b08      	cmp	r3, #8
 8002550:	d003      	beq.n	800255a <HAL_RCC_GetSysClockFreq+0x36>
 8002552:	e027      	b.n	80025a4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002554:	4b19      	ldr	r3, [pc, #100]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002556:	613b      	str	r3, [r7, #16]
      break;
 8002558:	e027      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	0c9b      	lsrs	r3, r3, #18
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	4a17      	ldr	r2, [pc, #92]	@ (80025c0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002564:	5cd3      	ldrb	r3, [r2, r3]
 8002566:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800256e:	2b00      	cmp	r3, #0
 8002570:	d010      	beq.n	8002594 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002572:	4b11      	ldr	r3, [pc, #68]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0x94>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	0c5b      	lsrs	r3, r3, #17
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	4a11      	ldr	r2, [pc, #68]	@ (80025c4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800257e:	5cd3      	ldrb	r3, [r2, r3]
 8002580:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a0d      	ldr	r2, [pc, #52]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 8002586:	fb03 f202 	mul.w	r2, r3, r2
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e004      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	4a0c      	ldr	r2, [pc, #48]	@ (80025c8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002598:	fb02 f303 	mul.w	r3, r2, r3
 800259c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	613b      	str	r3, [r7, #16]
      break;
 80025a2:	e002      	b.n	80025aa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4b05      	ldr	r3, [pc, #20]	@ (80025bc <HAL_RCC_GetSysClockFreq+0x98>)
 80025a6:	613b      	str	r3, [r7, #16]
      break;
 80025a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025aa:	693b      	ldr	r3, [r7, #16]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	007a1200 	.word	0x007a1200
 80025c0:	080028b0 	.word	0x080028b0
 80025c4:	080028c0 	.word	0x080028c0
 80025c8:	003d0900 	.word	0x003d0900

080025cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d0:	4b02      	ldr	r3, [pc, #8]	@ (80025dc <HAL_RCC_GetHCLKFreq+0x10>)
 80025d2:	681b      	ldr	r3, [r3, #0]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bc80      	pop	{r7}
 80025da:	4770      	bx	lr
 80025dc:	20000004 	.word	0x20000004

080025e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025e4:	f7ff fff2 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 80025e8:	4602      	mov	r2, r0
 80025ea:	4b05      	ldr	r3, [pc, #20]	@ (8002600 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	0a1b      	lsrs	r3, r3, #8
 80025f0:	f003 0307 	and.w	r3, r3, #7
 80025f4:	4903      	ldr	r1, [pc, #12]	@ (8002604 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025f6:	5ccb      	ldrb	r3, [r1, r3]
 80025f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40021000 	.word	0x40021000
 8002604:	080028a8 	.word	0x080028a8

08002608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800260c:	f7ff ffde 	bl	80025cc <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	@ (8002628 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	0adb      	lsrs	r3, r3, #11
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4903      	ldr	r1, [pc, #12]	@ (800262c <HAL_RCC_GetPCLK2Freq+0x24>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40021000 	.word	0x40021000
 800262c:	080028a8 	.word	0x080028a8

08002630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002638:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <RCC_Delay+0x34>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <RCC_Delay+0x38>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0a5b      	lsrs	r3, r3, #9
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800264c:	bf00      	nop
  }
  while (Delay --);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1e5a      	subs	r2, r3, #1
 8002652:	60fa      	str	r2, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f9      	bne.n	800264c <RCC_Delay+0x1c>
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	20000004 	.word	0x20000004
 8002668:	10624dd3 	.word	0x10624dd3

0800266c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e042      	b.n	8002704 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fa5e 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2224      	movs	r2, #36	@ 0x24
 800269c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	68da      	ldr	r2, [r3, #12]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80026ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f82b 	bl	800270c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	691a      	ldr	r2, [r3, #16]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80026c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	695a      	ldr	r2, [r3, #20]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80026d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68da      	ldr	r2, [r3, #12]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80026e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2220      	movs	r2, #32
 80026f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2200      	movs	r2, #0
 8002700:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002702:	2300      	movs	r3, #0
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	68da      	ldr	r2, [r3, #12]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	431a      	orrs	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	4313      	orrs	r3, r2
 800273a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002746:	f023 030c 	bic.w	r3, r3, #12
 800274a:	687a      	ldr	r2, [r7, #4]
 800274c:	6812      	ldr	r2, [r2, #0]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	430b      	orrs	r3, r1
 8002752:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	699a      	ldr	r2, [r3, #24]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	430a      	orrs	r2, r1
 8002768:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a2c      	ldr	r2, [pc, #176]	@ (8002820 <UART_SetConfig+0x114>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d103      	bne.n	800277c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002774:	f7ff ff48 	bl	8002608 <HAL_RCC_GetPCLK2Freq>
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	e002      	b.n	8002782 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800277c:	f7ff ff30 	bl	80025e0 <HAL_RCC_GetPCLK1Freq>
 8002780:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	4613      	mov	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	4413      	add	r3, r2
 800278a:	009a      	lsls	r2, r3, #2
 800278c:	441a      	add	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	4a22      	ldr	r2, [pc, #136]	@ (8002824 <UART_SetConfig+0x118>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	0119      	lsls	r1, r3, #4
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4613      	mov	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	4413      	add	r3, r2
 80027aa:	009a      	lsls	r2, r3, #2
 80027ac:	441a      	add	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80027b8:	4b1a      	ldr	r3, [pc, #104]	@ (8002824 <UART_SetConfig+0x118>)
 80027ba:	fba3 0302 	umull	r0, r3, r3, r2
 80027be:	095b      	lsrs	r3, r3, #5
 80027c0:	2064      	movs	r0, #100	@ 0x64
 80027c2:	fb00 f303 	mul.w	r3, r0, r3
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	3332      	adds	r3, #50	@ 0x32
 80027cc:	4a15      	ldr	r2, [pc, #84]	@ (8002824 <UART_SetConfig+0x118>)
 80027ce:	fba2 2303 	umull	r2, r3, r2, r3
 80027d2:	095b      	lsrs	r3, r3, #5
 80027d4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027d8:	4419      	add	r1, r3
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4613      	mov	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	009a      	lsls	r2, r3, #2
 80027e4:	441a      	add	r2, r3
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80027f0:	4b0c      	ldr	r3, [pc, #48]	@ (8002824 <UART_SetConfig+0x118>)
 80027f2:	fba3 0302 	umull	r0, r3, r3, r2
 80027f6:	095b      	lsrs	r3, r3, #5
 80027f8:	2064      	movs	r0, #100	@ 0x64
 80027fa:	fb00 f303 	mul.w	r3, r0, r3
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	3332      	adds	r3, #50	@ 0x32
 8002804:	4a07      	ldr	r2, [pc, #28]	@ (8002824 <UART_SetConfig+0x118>)
 8002806:	fba2 2303 	umull	r2, r3, r2, r3
 800280a:	095b      	lsrs	r3, r3, #5
 800280c:	f003 020f 	and.w	r2, r3, #15
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	440a      	add	r2, r1
 8002816:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002818:	bf00      	nop
 800281a:	3710      	adds	r7, #16
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	40013800 	.word	0x40013800
 8002824:	51eb851f 	.word	0x51eb851f

08002828 <memset>:
 8002828:	4603      	mov	r3, r0
 800282a:	4402      	add	r2, r0
 800282c:	4293      	cmp	r3, r2
 800282e:	d100      	bne.n	8002832 <memset+0xa>
 8002830:	4770      	bx	lr
 8002832:	f803 1b01 	strb.w	r1, [r3], #1
 8002836:	e7f9      	b.n	800282c <memset+0x4>

08002838 <__libc_init_array>:
 8002838:	b570      	push	{r4, r5, r6, lr}
 800283a:	2600      	movs	r6, #0
 800283c:	4d0c      	ldr	r5, [pc, #48]	@ (8002870 <__libc_init_array+0x38>)
 800283e:	4c0d      	ldr	r4, [pc, #52]	@ (8002874 <__libc_init_array+0x3c>)
 8002840:	1b64      	subs	r4, r4, r5
 8002842:	10a4      	asrs	r4, r4, #2
 8002844:	42a6      	cmp	r6, r4
 8002846:	d109      	bne.n	800285c <__libc_init_array+0x24>
 8002848:	f000 f81a 	bl	8002880 <_init>
 800284c:	2600      	movs	r6, #0
 800284e:	4d0a      	ldr	r5, [pc, #40]	@ (8002878 <__libc_init_array+0x40>)
 8002850:	4c0a      	ldr	r4, [pc, #40]	@ (800287c <__libc_init_array+0x44>)
 8002852:	1b64      	subs	r4, r4, r5
 8002854:	10a4      	asrs	r4, r4, #2
 8002856:	42a6      	cmp	r6, r4
 8002858:	d105      	bne.n	8002866 <__libc_init_array+0x2e>
 800285a:	bd70      	pop	{r4, r5, r6, pc}
 800285c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002860:	4798      	blx	r3
 8002862:	3601      	adds	r6, #1
 8002864:	e7ee      	b.n	8002844 <__libc_init_array+0xc>
 8002866:	f855 3b04 	ldr.w	r3, [r5], #4
 800286a:	4798      	blx	r3
 800286c:	3601      	adds	r6, #1
 800286e:	e7f2      	b.n	8002856 <__libc_init_array+0x1e>
 8002870:	080028c4 	.word	0x080028c4
 8002874:	080028c4 	.word	0x080028c4
 8002878:	080028c4 	.word	0x080028c4
 800287c:	080028c8 	.word	0x080028c8

08002880 <_init>:
 8002880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002882:	bf00      	nop
 8002884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002886:	bc08      	pop	{r3}
 8002888:	469e      	mov	lr, r3
 800288a:	4770      	bx	lr

0800288c <_fini>:
 800288c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800288e:	bf00      	nop
 8002890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002892:	bc08      	pop	{r3}
 8002894:	469e      	mov	lr, r3
 8002896:	4770      	bx	lr
